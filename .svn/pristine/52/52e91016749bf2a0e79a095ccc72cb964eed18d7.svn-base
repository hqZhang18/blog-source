{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/landscape/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/duoshuo.js","path":"js/duoshuo.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/1453689666.jpg","path":"css/images/1453689666.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/16440731.png","path":"css/images/16440731.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/1451784209.jpg","path":"css/images/1451784209.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/1453345771.jpg","path":"css/images/1453345771.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/16440732.png","path":"css/images/16440732.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/1478248872.jpg","path":"css/images/1478248872.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip_jr.png","path":"css/images/clip_jr.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/code1.png","path":"css/images/code1.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/code2.png","path":"css/images/code2.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/enterexit-4.png","path":"css/images/enterexit-4.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/enterexit-3.png","path":"css/images/enterexit-3.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/scrollup.png","path":"css/images/scrollup.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/scope.jpg","path":"css/images/scope.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/d302.png","path":"css/images/d302.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/code3.png","path":"css/images/code3.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/d301.png","path":"css/images/d301.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/test1.png","path":"css/images/test1.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip3.png","path":"css/images/clip3.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/1468981737.jpg","path":"css/images/1468981737.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner2.jpg","path":"css/images/banner2.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip4.png","path":"css/images/clip4.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip1.png","path":"css/images/clip1.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip2.png","path":"css/images/clip2.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip5.png","path":"css/images/clip5.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/clip0.png","path":"css/images/clip0.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ad0623f60a84c663eea45132c69965ee6abc313c","modified":1487514987280},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1482368992030},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1482368991983},{"_id":"themes/landscape/.project","hash":"31d22e7e9f2eb3b0f7fa2fedd542be5d8ee4d057","modified":1482368992022},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1482368989415},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1482368989472},{"_id":"themes/landscape/_config.yml","hash":"0ea903793a4ee7081516b24ed206e8e02109df78","modified":1483689706658},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1482368992002},{"_id":"source/_posts/CSS3中的clip-path使用攻略.md","hash":"99627d991fc998ec7d26f25e6e5bb48c8bc17a59","modified":1487416544091},{"_id":"source/_posts/CSS基础知识之position.md","hash":"da7103f38402df23d4e70f29e453cd16c791da82","modified":1482987687802},{"_id":"source/_posts/D3-理解-Update、Enter、Exit.md","hash":"35f3f5766d7204db70c99b9b747f2d8815106424","modified":1483944555772},{"_id":"source/_posts/D3-数据绑定.md","hash":"1eae57348f3467412fff77a6c8bc07c7db65499b","modified":1483942382255},{"_id":"source/_posts/D3.js踩的那些坑.md","hash":"8d7d4e0ae97a659b465ccc1c35f0ac5c62791585","modified":1482987687793},{"_id":"source/_posts/D3.js常用API.md","hash":"5501c5c4f843c5bb74b2753ebf1d780d51a94821","modified":1482987687804},{"_id":"source/_posts/D3基础.md","hash":"aff25e64a5f233ca2cacec79639da1e785c17121","modified":1487412006882},{"_id":"source/_posts/D3.js地图绘制.md","hash":"bafd61de74faab2ac39dcecc613dc27516746edd","modified":1483945069240},{"_id":"source/_posts/D3.js实现文本的换行.md","hash":"366d0ef970bbf2843fdb8da92c6f4e0e81030c69","modified":1482987687830},{"_id":"source/_posts/JS循环遍历.md","hash":"6cd826ed17ddbd21b564d24a69c5099ef7f8b388","modified":1487421165631},{"_id":"source/_posts/D3.js颜色插值和线性渐变.md","hash":"9f6cc46f116068cc1424661f707d493bdae98ca6","modified":1482987687843},{"_id":"source/_posts/IE中的CSS3不完全兼容解决方案.md","hash":"64a57ace6a3bec25d9edf5a5e30a1508aed34be4","modified":1482987687827},{"_id":"source/_posts/JavaScript-垃圾回收和内存管理.md","hash":"2d1ec1f1e2852e21065cc22b2ddd70183becb7b7","modified":1483664182085},{"_id":"source/_posts/HTMLCSS的一些总结.md","hash":"1f9fdf6832deff8c22f3badfa314cee9c9ba134f","modified":1487421487187},{"_id":"source/_posts/apply call bind使用详解.md","hash":"4f539ba2e57cd108900b7ccaa55ae35add1e6a0d","modified":1487421410138},{"_id":"source/_posts/js-判断键盘事件大全-兼容FireFox和IE（退格、制表、回车、空格、方向键、删除键等）.md","hash":"edca14f36595682e6d9c5989c365b7e5c5a427fa","modified":1482987687837},{"_id":"source/_posts/apply call bind.md","hash":"9c14f1159d28ad8bf35d05c2162ec6d5173c4eb0","modified":1487495065444},{"_id":"source/_posts/js返回上一页并刷新的几种方法.md","hash":"edcd27558e5092adad3141694e376a12aa7c49b6","modified":1487421779219},{"_id":"source/_posts/linear比例尺及ordinal比例尺的使用.md","hash":"ffa42e3c553dde3939340c93547274010f126618","modified":1488251536195},{"_id":"source/_posts/Webpack的安装与基本配置.md","hash":"22d54873a38cb4d7fcc91b640892fee9fed5f19a","modified":1483688333238},{"_id":"source/_posts/let和const命令(ES6).md","hash":"0469cf37f8fab0e14e065670fb4b4cf3f441093e","modified":1483751060605},{"_id":"source/_posts/git常用命令.md","hash":"462b8ed9a09b9c1a6a96f6c2c7da53ed18e64545","modified":1487419161834},{"_id":"source/_posts/react-router实例.md","hash":"8cf906be2d4ee8f7cde553847c11cf9b20b305fe","modified":1487641151354},{"_id":"source/_posts/px、em、rem-区别.md","hash":"18068f8dc50c67db5fdf8430b1b684165be41500","modified":1482987687806},{"_id":"source/_posts/JS作用域和闭包.md","hash":"df3e6c1d3c6e3351def2bc103fdb03b5c09e4a9e","modified":1487497318753},{"_id":"source/_posts/react入门04-组件样式.md","hash":"bfb3f7433c2d17389afe3b9e5fc5af225f3020dc","modified":1482987687845},{"_id":"source/_posts/react入门02-JSX语法.md","hash":"6c87c42be3ce08e6ae797c1e6a5d6511f7645ffa","modified":1482987687835},{"_id":"source/_posts/npm常用命令及npm-install-报的那些错.md","hash":"95be565d8c961b9613ccf38299acb725b06ef6ee","modified":1487641151354},{"_id":"source/_posts/react入门01-创建React工程.md","hash":"452990a632fd3be237a3b5766d968b2bdec9f7f7","modified":1482987687847},{"_id":"source/_posts/react入门06-属性设置-props.md","hash":"fac298add0246face95bee56e5c0463a79138d57","modified":1482987687759},{"_id":"source/_posts/react入门05-复合组件.md","hash":"cd479c9aebeef0783b389e9eb12bb1fdb2e78957","modified":1482987687788},{"_id":"source/_posts/react入门09-表单Dome.md","hash":"3e5f2617745bf003ddbf6850911376cd7a2a3d82","modified":1482987687832},{"_id":"source/_posts/react入门03-定义组件.md","hash":"46f06747ef5e9c49ed85e2095e365127781bb460","modified":1482987687767},{"_id":"source/_posts/react入门08-state.md","hash":"3f8eb9220ee35977023e08a39f9c9536f46e0f75","modified":1482987687840},{"_id":"source/_posts/《JavaScript-闯关记》之原型及原型链.md","hash":"0a9d04e3592f740768b62a6f5ac46e6014525525","modified":1482987687799},{"_id":"source/_posts/react入门10-组件的生命周期.md","hash":"edcc328affc8aa7c403b331391c61cf1c48798a0","modified":1483685083651},{"_id":"source/_posts/人在囧途之火车站.md","hash":"407d795d50a298493a2220edce491c4dcf298cb5","modified":1482987687818},{"_id":"source/_posts/前端跨域问题.md","hash":"7cfdd03f225c944d71c242333a594722aa4efd43","modified":1483664182083},{"_id":"source/_posts/react入门07-属性设置-children.md","hash":"5e1ea67b9067f8e2f4285aa3baeb8139ddc00bd9","modified":1482987687823},{"_id":"source/_posts/值传递和引用引用传递.md","hash":"05d6deef663bf2e2b3e16e7c3a4ca8a1d6837ce7","modified":1483577851627},{"_id":"source/_posts/年终了，这一年都干了些啥！！.md","hash":"be6c5c93c9101e010c6ecab81346c616e831b421","modified":1482987687756},{"_id":"source/_posts/每一段旅途都有他的意义[一].md","hash":"8c313deec24761598993f6ce9c60719fd086fe6a","modified":1482987687790},{"_id":"source/_posts/react评论框实例.md","hash":"7f6473187b930a2c55bc2302034392539ac984d7","modified":1487641151354},{"_id":"source/_posts/变量的解构赋值.md","hash":"3e3b0f5302c2f8bed0846572fb680c55ee20ea32","modified":1483927518832},{"_id":"source/_posts/浏览器兼容性问题汇总.md","hash":"cd3218366c51176e3c1b462693d0e9e6b33584ca","modified":1482987687820},{"_id":"source/_posts/每一段旅途都有他的意义[二].md","hash":"2101edb68ecef92c6e332cdaf769547456ffa54e","modified":1482987687825},{"_id":"source/_posts/纯CSS样式美化.md","hash":"dd85857297560d1c99bd0bc3666522529fb38eed","modified":1487420235497},{"_id":"source/_posts/面试遇到的问题.md","hash":"9ebc794a2e04d3275a70bc0af35be0b06ccb2bb1","modified":1483669052933},{"_id":"source/_posts/项目中D3遇到的那些烦心事.md","hash":"52556baee13e063e54a46f51cc314e7fd177bd90","modified":1488246599483},{"_id":"source/_posts/验证码倒计时.md","hash":"a36d23a579bc6a7f4a1f8f8e05a37fb48cce8a35","modified":1487421871429},{"_id":"source/life/index.md","hash":"e070bfe46d0e2c4ae8b263d888f9bf4fc89f368a","modified":1487514985197},{"_id":"source/life/lieft.md","hash":"e070bfe46d0e2c4ae8b263d888f9bf4fc89f368a","modified":1487514985192},{"_id":"source/about/index.md","hash":"b5a12bde51cba8142990d1c41ddaf2cca6883b40","modified":1487514987306},{"_id":"source/photo/index.md","hash":"1198fe9f5c6bd22ac5e5e84b73689f7ed51bcdfe","modified":1487514991563},{"_id":"themes/landscape/languages/nl.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989288},{"_id":"themes/landscape/languages/fr.yml","hash":"8213d6ed7e32db0a19377728d75e331eddc60fbb","modified":1482368989278},{"_id":"themes/landscape/languages/default.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989229},{"_id":"themes/landscape/languages/no.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989308},{"_id":"themes/landscape/languages/ru.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989243},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989321},{"_id":"source/_posts/网页中常用Jquery效果.md","hash":"1a8c1950328c82c0ba1ad366bb1c40e56388b164","modified":1487420948346},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"3ab2db0e6ae140215ffbb840ef7c04dc4b48bd21","modified":1482368989297},{"_id":"source/_posts/闭包的概念.md","hash":"16a7fc42b31658470d24b6684f6094157f0fb448","modified":1482987687797},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482368990553},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482368989525},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482368989821},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1482368990624},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1482368989880},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482368990535},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1482368989374},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482368990532},{"_id":"source/_posts/安装MongoDB.md","hash":"e4f4448865c8313c09c4e17eafa49a07a0e0800b","modified":1487916326193},{"_id":"themes/landscape/source/favicon.ico","hash":"efac112d1d26b025276e88c0731c739ffe5cc7ff","modified":1482987688519},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1482368990335},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"fb760a961b50cd1a33cc86f13d3b6551c31729e3","modified":1482987689169},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"0786db0bd7157a56ed7047531079a06a82efc378","modified":1482368990112},{"_id":"themes/landscape/layout/_partial/baidu_tongji.ejs","hash":"2cf48c23e61b056afb49f373324b2ab71a46a662","modified":1483370328317},{"_id":"themes/landscape/layout/_partial/cnzz.ejs","hash":"069d5747e51abb942c29ce8bdf814c579b657811","modified":1482382221797},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"b17cd0d3f90af98fe5f3a767a03f66d8f7f61288","modified":1483684464582},{"_id":"themes/landscape/layout/_partial/busuanzi.ejs","hash":"4667a0809f76250420ab785f5ed8bc7bf2975184","modified":1483165853304},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1482368990178},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"2fab34fcd5111cd0aaab34399e0653d3c4123572","modified":1483166171598},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"6f1aedee6a1f43ef81a59a57ba8fcfd65c50b194","modified":1482987689161},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"34f994d23df0f1ddcc31ca320464b1b240add2ed","modified":1483578993005},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1482368990495},{"_id":"themes/landscape/layout/_partial/totop.ejs","hash":"c58ce3924f21f1033e19275ecd4ed1f9249ef14f","modified":1482368990473},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1482368990498},{"_id":"themes/landscape/layout/_widget/links.ejs","hash":"85ba58ef01697ece10543e2305fbb5f997c71847","modified":1455876975000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"bd5bfd23df161e6da280dfd40a90d9c36f7b2fe2","modified":1482987688758},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"88f21391dc7d9c8424a9cb2b09cb7a2ddbf19ce2","modified":1482987688753},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"e1db6866e4dedb61c2bd505142fc47fd72c53abf","modified":1482458045845},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"6e141f30f6b530e9f4667a7250b4af1087f0d3de","modified":1482475578227},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"fcd6f9dd18e8a1e5d7379f90292eccb4ffbe5812","modified":1482458045842},{"_id":"themes/landscape/source/css/_variables.styl","hash":"3935b3994737da6139231e94d8ee556fbe0516bf","modified":1482987688373},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1482368991254},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482368991484},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1482368990674},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482368991467},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482368991512},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482368991507},{"_id":"themes/landscape/source/js/duoshuo.js","hash":"4a1baf1a4521bd3ab68fd63af50286fd65eda3f1","modified":1482368991888},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482368991600},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1482368991800},{"_id":"themes/landscape/source/js/embed.js","hash":"f9b66ab970f86b1f58c5fb8a1c04421eb41692fb","modified":1482368991924},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1482368991574},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482368991817},{"_id":"themes/landscape/source/js/script.js","hash":"2e7e57ab461e7f5f965e340b49c610a741e42369","modified":1482987688476},{"_id":"themes/landscape/source/js/totop.js","hash":"572afee44095aa4ca003286ad50ea2059637094e","modified":1482368991884},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1482368990430},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1482368990381},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1482368990374},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1482368990418},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"b5d4323373d10313fa20becbd3c658b1b710f8ed","modified":1482368991967},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1482368990448},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1482368991532},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1482368990460},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"77d51820f3c693563f632b1431c7ffdb7069829d","modified":1482368994329},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1482368991443},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1482368991428},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"0c956e22f7cd371bbf0792bbe38285413e478c71","modified":1482987688379},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1482368991340},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"d70d7ac9825e767e88887e535f379c26be6538a7","modified":1482368994318},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1482368991292},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"f3f3a1548b31c3105172d4e2bc068ae701a8cc12","modified":1482368994326},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"4d0db9a9924e45e096d6c2296a3328ed7b4c9f2f","modified":1482368994323},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1482368991322},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"49648851d950a576e3e927807b0cae18115065bb","modified":1483684655775},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"932eef34e635f5b470d4c3ac1086c72e2ae62439","modified":1482987688385},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1482368991051},{"_id":"themes/landscape/source/css/images/1453689666.jpg","hash":"7da06ca01a5a2f4afd4f830985b51cb71bcbd3cf","modified":1482987688162},{"_id":"themes/landscape/source/css/images/16440731.png","hash":"f355b3201bf6e6f2fa267344471d4c3b20b03936","modified":1482368990944},{"_id":"themes/landscape/source/css/images/1451784209.jpg","hash":"0617fa94965cd2c20c9b8d02b693f6e67e93e34c","modified":1482987688195},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1482368991090},{"_id":"themes/landscape/source/css/images/1453345771.jpg","hash":"78219596433ab8aeab511e0fd3d610e1575be22c","modified":1482987688185},{"_id":"themes/landscape/source/css/images/16440732.png","hash":"a60343195473694a3a33e9565ae2cdb9e57deae2","modified":1482368990961},{"_id":"themes/landscape/source/css/images/1478248872.jpg","hash":"d6622de5b6a336cdfeed4b3fc14e0096e140c503","modified":1482987688151},{"_id":"themes/landscape/source/css/images/clip_jr.png","hash":"d4394ff76e504f20905cb9bf27730a3383e11349","modified":1487412168533},{"_id":"themes/landscape/source/css/images/code1.png","hash":"cd61710121caf8cb14ce64fad93b875e86d82d3d","modified":1482368990977},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1482368991226},{"_id":"themes/landscape/source/css/images/code2.png","hash":"63456ede663a9441d30c5122f5a42150a963aeac","modified":1482368991014},{"_id":"themes/landscape/source/css/images/enterexit-4.png","hash":"15751d72f13a6e460f2e1071b873c6445db5f2f5","modified":1483944236893},{"_id":"themes/landscape/source/css/images/enterexit-3.png","hash":"fd1f9b5718d1dd494420fda6bcc1f76ff06d3b70","modified":1483944221894},{"_id":"themes/landscape/source/css/images/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1482368990890},{"_id":"themes/landscape/source/css/images/scope.jpg","hash":"8b89b2d9f164dc6191751367a7dedad089acea36","modified":1487486716249},{"_id":"themes/landscape/source/css/images/d302.png","hash":"b47f90ebf4154dc9d2e8416af277b066573be882","modified":1482313638401},{"_id":"themes/landscape/source/css/images/code3.png","hash":"c6bd770c1e2171e117c1edfe5e0ec5fd32a6443e","modified":1483941898599},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482368991648},{"_id":"themes/landscape/source/css/images/d301.png","hash":"0c9d16392f9ff6b389ab43f93fba8bc5290810de","modified":1482313787216},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1482368991656},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1482368991672},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1482368991733},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1482368991694},{"_id":"themes/landscape/source/css/images/test1.png","hash":"c601b5528086789e1e32ed8304f47f676eb68af4","modified":1482465643433},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1482368991144},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1482368991719},{"_id":"themes/landscape/source/css/images/clip3.png","hash":"e33f52b5886878e9dabfd4929b829648f3c5c61a","modified":1487416070587},{"_id":"themes/landscape/source/css/images/1468981737.jpg","hash":"10472c5bd378fe3ff215ff65916ec920ad6a0c80","modified":1482987688174},{"_id":"themes/landscape/source/css/images/banner2.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1482368990856},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1482368991204},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"1578c5b55d4e4472d43998ebbad0a9922472c87d","modified":1486797617158},{"_id":"themes/landscape/source/css/images/clip4.png","hash":"8524c811f2f2509c3d5032cdd64e08809d85cfb7","modified":1487416223107},{"_id":"themes/landscape/source/css/images/clip1.png","hash":"ae2820286bfb83b11d4012f399ed70d7701e4bc2","modified":1487415660782},{"_id":"themes/landscape/source/css/images/clip2.png","hash":"6021837ef27022424dccb9a59778ec565eab0b20","modified":1487415931383},{"_id":"themes/landscape/source/css/images/clip5.png","hash":"1637d75437ce3d62b76858a8f76318b8bd1b094c","modified":1487416438417},{"_id":"themes/landscape/source/css/images/clip0.png","hash":"e0e06216a8bdb3384a780eb7d40db0d4fc4cdc57","modified":1487415369224}],"Category":[{"name":"技术","_id":"cizoyjn22000124uuq1q9u4oe"},{"name":"CSS","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn2a000424uuvmwlm4dl"},{"name":"D3.js","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn4e000h24uuznaqa187"},{"name":"JavaScript","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn5a001224uurgjmj6nd"},{"name":"ES6","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn6q001y24uu851z4kvf"},{"name":"Webpack","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn6x002624uuc0wzs6xv"},{"name":"React","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn76002d24uuc8hu41nh"},{"name":"github","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7e002k24uudfgftq97"},{"name":"npm","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7x002z24uulv0pu7qk"},{"name":"生活","_id":"cizoyjn8f003e24uu5pgl9yuo"},{"name":"Jquery","parent":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9x004n24uu0p9ymvcu"}],"Data":[],"Page":[{"title":"life","date":"2016-12-19T15:14:48.000Z","_content":"####  test","source":"life/index.md","raw":"---\ntitle: life\ndate: 2016-12-19 23:14:48\n---\n####  test","updated":"2017-02-19T14:36:25.197Z","path":"life/index.html","comments":1,"layout":"page","_id":"cizoyjn3t000a24uutdlvjpes","content":"<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4>","excerpt":"","more":"<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4>"},{"title":"life","date":"2016-12-19T15:14:48.000Z","_content":"####  test","source":"life/lieft.md","raw":"---\ntitle: life\ndate: 2016-12-19 23:14:48\n---\n####  test","updated":"2017-02-19T14:36:25.192Z","path":"life/lieft.html","comments":1,"layout":"page","_id":"cizoyjn3z000c24uu91l0lzdj","content":"<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4>","excerpt":"","more":"<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4>"},{"title":"关于我","date":"2016-12-25T03:48:09.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-12-25 11:48:09\n---\n","updated":"2017-02-19T14:36:27.306Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizoyjn45000f24uusg0z44fc","content":"","excerpt":"","more":""},{"title":"photo","date":"2016-12-23T05:21:44.000Z","_content":"","source":"photo/index.md","raw":"---\ntitle: photo\ndate: 2016-12-23 13:21:44\n---\n","updated":"2017-02-19T14:36:31.563Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cizoyjn4f000j24uu1zn2ji4t","content":"","excerpt":"","more":""}],"Post":[{"title":"CSS3中的clip-path使用攻略","date":"2017-02-18T09:52:30.000Z","_content":"利用clip-path，我们可以创建圆形、椭圆和多边形等不同的形状，创造力是唯一的限制。\nclip-path之所以没有很普及，是因为其浏览器兼容问题。很多IE浏览器对齐属性不是很支持。我们看下他的浏览器兼容：\n<!-- more -->\n![](/css/images/clip_jr.png)\n\n我们看到IE是完全不支持，尽量使用webkit内核，需要加上内核前缀-webkit-\n\n好了，进入正题来创建几个图形吧！\n\n\n\n```css\n//先加载张图片\n.clip{\n      background: url(images/clip.png) no-repeat;\n      width: 500px;\n      height: 500px;\n}\n```\n#### 效果如下：\n![](/css/images/clip0.png)\n\n\n#### 一个简单的三角形创建：\n```css\n.clip-polygon {\n　-webkit-clip-path: polygon(0 100%, 50% 0, 100% 100%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip1.png)\n\n逐步分析\n很像定位属性，我们需要考虑X值和Y值。X:0和Y:0表示从元素的左上角开始，并从左上角开始移动。X:100%指的是元素右边，Y:100%指的是元素底部。\n对于上面创建的路径，实际是创建了如下的点：\nx: 0, y:100%\nx: 50%, y: 0\nx: 100%, y: 100%\n这个简单路径开始于左下角，水平移动50%，并到达顶部位置，然后又水平移动到100%的位置，垂直向下回到底部，到达第三个坐标点。三角形就出来了。\n\n#### 创建一个圆形\n需要给circle传入三个值：圆心的坐标(X值和Y值)以及半径。当定义圆的半径时，我们可以用at关键字来定义圆心坐标。\n```css\n.clip-circle {\n　-webkit-clip-path: circle(50% at 50% 50%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip2.png)\n\n#### 创建一个椭圆\n椭圆需要给ellipse提供4个值：椭圆的x轴半径、y轴半径、定位椭圆位置的x坐标和y坐标，后面两个值用at关键字和前面两个值分开\n```css\n.clip-ellipse {\n　-webkit-clip-path: ellipse(30% 20% at 50% 50%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip3.png)\n\n\n#### 创建圆角矩形\n圆角矩形需要给Inset四个值(对应“上 右 下 左”的顺序)来设置圆角半径。\n\n```css\n.clip-inset {\n  　-webkit-clip-path: inset(25% 0 25% 0 round 0 25% 0 25%);\n    -webkit-clip-path: inset(25% 0 25% 0 round 0 25% 0 25%);\n}\n```\n#### 效果如下：\n![](/css/images/clip4.png)\n\n#### 创建一个复杂图形\n使用polygon来 创建\n\n```css\n.clip-polygon {\n  -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);\n｝\n```\n#### 效果如下：\n![](/css/images/clip5.png)\n\n好了，图形创建就到这里吧，使用polygon可以创建出任意你好要的图形\n","source":"_posts/CSS3中的clip-path使用攻略.md","raw":"---\ntitle: CSS3中的clip-path使用攻略\ndate: 2017-02-18 17:52:30\ncategories: \n  - 技术\n  - CSS\ntags: [CSS3, clip-path]\n---\n利用clip-path，我们可以创建圆形、椭圆和多边形等不同的形状，创造力是唯一的限制。\nclip-path之所以没有很普及，是因为其浏览器兼容问题。很多IE浏览器对齐属性不是很支持。我们看下他的浏览器兼容：\n<!-- more -->\n![](/css/images/clip_jr.png)\n\n我们看到IE是完全不支持，尽量使用webkit内核，需要加上内核前缀-webkit-\n\n好了，进入正题来创建几个图形吧！\n\n\n\n```css\n//先加载张图片\n.clip{\n      background: url(images/clip.png) no-repeat;\n      width: 500px;\n      height: 500px;\n}\n```\n#### 效果如下：\n![](/css/images/clip0.png)\n\n\n#### 一个简单的三角形创建：\n```css\n.clip-polygon {\n　-webkit-clip-path: polygon(0 100%, 50% 0, 100% 100%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip1.png)\n\n逐步分析\n很像定位属性，我们需要考虑X值和Y值。X:0和Y:0表示从元素的左上角开始，并从左上角开始移动。X:100%指的是元素右边，Y:100%指的是元素底部。\n对于上面创建的路径，实际是创建了如下的点：\nx: 0, y:100%\nx: 50%, y: 0\nx: 100%, y: 100%\n这个简单路径开始于左下角，水平移动50%，并到达顶部位置，然后又水平移动到100%的位置，垂直向下回到底部，到达第三个坐标点。三角形就出来了。\n\n#### 创建一个圆形\n需要给circle传入三个值：圆心的坐标(X值和Y值)以及半径。当定义圆的半径时，我们可以用at关键字来定义圆心坐标。\n```css\n.clip-circle {\n　-webkit-clip-path: circle(50% at 50% 50%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip2.png)\n\n#### 创建一个椭圆\n椭圆需要给ellipse提供4个值：椭圆的x轴半径、y轴半径、定位椭圆位置的x坐标和y坐标，后面两个值用at关键字和前面两个值分开\n```css\n.clip-ellipse {\n　-webkit-clip-path: ellipse(30% 20% at 50% 50%);\n}\n```\n\n#### 效果如下：\n![](/css/images/clip3.png)\n\n\n#### 创建圆角矩形\n圆角矩形需要给Inset四个值(对应“上 右 下 左”的顺序)来设置圆角半径。\n\n```css\n.clip-inset {\n  　-webkit-clip-path: inset(25% 0 25% 0 round 0 25% 0 25%);\n    -webkit-clip-path: inset(25% 0 25% 0 round 0 25% 0 25%);\n}\n```\n#### 效果如下：\n![](/css/images/clip4.png)\n\n#### 创建一个复杂图形\n使用polygon来 创建\n\n```css\n.clip-polygon {\n  -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);\n｝\n```\n#### 效果如下：\n![](/css/images/clip5.png)\n\n好了，图形创建就到这里吧，使用polygon可以创建出任意你好要的图形\n","slug":"CSS3中的clip-path使用攻略","published":1,"updated":"2017-02-18T11:15:44.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn1o000024uuqrgdervy","content":"<p>利用clip-path，我们可以创建圆形、椭圆和多边形等不同的形状，创造力是唯一的限制。<br>clip-path之所以没有很普及，是因为其浏览器兼容问题。很多IE浏览器对齐属性不是很支持。我们看下他的浏览器兼容：<br><a id=\"more\"></a><br><img src=\"/css/images/clip_jr.png\" alt=\"\"></p>\n<p>我们看到IE是完全不支持，尽量使用webkit内核，需要加上内核前缀-webkit-</p>\n<p>好了，进入正题来创建几个图形吧！</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//先加载张图片</div><div class=\"line\">.clip&#123;</div><div class=\"line\">      background: url(images/clip.png) no-repeat;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">      height: 500px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：\"><a href=\"#效果如下：\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip0.png\" alt=\"\"></p>\n<h4 id=\"一个简单的三角形创建：\"><a href=\"#一个简单的三角形创建：\" class=\"headerlink\" title=\"一个简单的三角形创建：\"></a>一个简单的三角形创建：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-polygon</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">polygon</span>(0 100%, 50% 0, 100% 100%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-1\"><a href=\"#效果如下：-1\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip1.png\" alt=\"\"></p>\n<p>逐步分析<br>很像定位属性，我们需要考虑X值和Y值。X:0和Y:0表示从元素的左上角开始，并从左上角开始移动。X:100%指的是元素右边，Y:100%指的是元素底部。<br>对于上面创建的路径，实际是创建了如下的点：<br>x: 0, y:100%<br>x: 50%, y: 0<br>x: 100%, y: 100%<br>这个简单路径开始于左下角，水平移动50%，并到达顶部位置，然后又水平移动到100%的位置，垂直向下回到底部，到达第三个坐标点。三角形就出来了。</p>\n<h4 id=\"创建一个圆形\"><a href=\"#创建一个圆形\" class=\"headerlink\" title=\"创建一个圆形\"></a>创建一个圆形</h4><p>需要给circle传入三个值：圆心的坐标(X值和Y值)以及半径。当定义圆的半径时，我们可以用at关键字来定义圆心坐标。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-circle</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">circle</span>(50% at 50% 50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"效果如下：-2\"><a href=\"#效果如下：-2\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip2.png\" alt=\"\"></p>\n<h4 id=\"创建一个椭圆\"><a href=\"#创建一个椭圆\" class=\"headerlink\" title=\"创建一个椭圆\"></a>创建一个椭圆</h4><p>椭圆需要给ellipse提供4个值：椭圆的x轴半径、y轴半径、定位椭圆位置的x坐标和y坐标，后面两个值用at关键字和前面两个值分开<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-ellipse</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">ellipse</span>(30% 20% at 50% 50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"效果如下：-3\"><a href=\"#效果如下：-3\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip3.png\" alt=\"\"></p>\n<h4 id=\"创建圆角矩形\"><a href=\"#创建圆角矩形\" class=\"headerlink\" title=\"创建圆角矩形\"></a>创建圆角矩形</h4><p>圆角矩形需要给Inset四个值(对应“上 右 下 左”的顺序)来设置圆角半径。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-inset</span> &#123;</div><div class=\"line\">  　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">inset</span>(25% 0 25% 0 round 0 25% 0 25%);</div><div class=\"line\">    <span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">inset</span>(25% 0 25% 0 round 0 25% 0 25%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-4\"><a href=\"#效果如下：-4\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip4.png\" alt=\"\"></p>\n<h4 id=\"创建一个复杂图形\"><a href=\"#创建一个复杂图形\" class=\"headerlink\" title=\"创建一个复杂图形\"></a>创建一个复杂图形</h4><p>使用polygon来 创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clip-polygon &#123;</div><div class=\"line\">  -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);</div><div class=\"line\">｝</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-5\"><a href=\"#效果如下：-5\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip5.png\" alt=\"\"></p>\n<p>好了，图形创建就到这里吧，使用polygon可以创建出任意你好要的图形</p>\n","excerpt":"<p>利用clip-path，我们可以创建圆形、椭圆和多边形等不同的形状，创造力是唯一的限制。<br>clip-path之所以没有很普及，是因为其浏览器兼容问题。很多IE浏览器对齐属性不是很支持。我们看下他的浏览器兼容：<br>","more":"<br><img src=\"/css/images/clip_jr.png\" alt=\"\"></p>\n<p>我们看到IE是完全不支持，尽量使用webkit内核，需要加上内核前缀-webkit-</p>\n<p>好了，进入正题来创建几个图形吧！</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//先加载张图片</div><div class=\"line\">.clip&#123;</div><div class=\"line\">      background: url(images/clip.png) no-repeat;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">      height: 500px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：\"><a href=\"#效果如下：\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip0.png\" alt=\"\"></p>\n<h4 id=\"一个简单的三角形创建：\"><a href=\"#一个简单的三角形创建：\" class=\"headerlink\" title=\"一个简单的三角形创建：\"></a>一个简单的三角形创建：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-polygon</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">polygon</span>(0 100%, 50% 0, 100% 100%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-1\"><a href=\"#效果如下：-1\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip1.png\" alt=\"\"></p>\n<p>逐步分析<br>很像定位属性，我们需要考虑X值和Y值。X:0和Y:0表示从元素的左上角开始，并从左上角开始移动。X:100%指的是元素右边，Y:100%指的是元素底部。<br>对于上面创建的路径，实际是创建了如下的点：<br>x: 0, y:100%<br>x: 50%, y: 0<br>x: 100%, y: 100%<br>这个简单路径开始于左下角，水平移动50%，并到达顶部位置，然后又水平移动到100%的位置，垂直向下回到底部，到达第三个坐标点。三角形就出来了。</p>\n<h4 id=\"创建一个圆形\"><a href=\"#创建一个圆形\" class=\"headerlink\" title=\"创建一个圆形\"></a>创建一个圆形</h4><p>需要给circle传入三个值：圆心的坐标(X值和Y值)以及半径。当定义圆的半径时，我们可以用at关键字来定义圆心坐标。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-circle</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">circle</span>(50% at 50% 50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"效果如下：-2\"><a href=\"#效果如下：-2\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip2.png\" alt=\"\"></p>\n<h4 id=\"创建一个椭圆\"><a href=\"#创建一个椭圆\" class=\"headerlink\" title=\"创建一个椭圆\"></a>创建一个椭圆</h4><p>椭圆需要给ellipse提供4个值：椭圆的x轴半径、y轴半径、定位椭圆位置的x坐标和y坐标，后面两个值用at关键字和前面两个值分开<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-ellipse</span> &#123;</div><div class=\"line\">　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">ellipse</span>(30% 20% at 50% 50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"效果如下：-3\"><a href=\"#效果如下：-3\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip3.png\" alt=\"\"></p>\n<h4 id=\"创建圆角矩形\"><a href=\"#创建圆角矩形\" class=\"headerlink\" title=\"创建圆角矩形\"></a>创建圆角矩形</h4><p>圆角矩形需要给Inset四个值(对应“上 右 下 左”的顺序)来设置圆角半径。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clip-inset</span> &#123;</div><div class=\"line\">  　<span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">inset</span>(25% 0 25% 0 round 0 25% 0 25%);</div><div class=\"line\">    <span class=\"attribute\">-webkit-clip-path</span>: <span class=\"built_in\">inset</span>(25% 0 25% 0 round 0 25% 0 25%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-4\"><a href=\"#效果如下：-4\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip4.png\" alt=\"\"></p>\n<h4 id=\"创建一个复杂图形\"><a href=\"#创建一个复杂图形\" class=\"headerlink\" title=\"创建一个复杂图形\"></a>创建一个复杂图形</h4><p>使用polygon来 创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clip-polygon &#123;</div><div class=\"line\">  -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);</div><div class=\"line\">｝</div></pre></td></tr></table></figure>\n<h4 id=\"效果如下：-5\"><a href=\"#效果如下：-5\" class=\"headerlink\" title=\"效果如下：\"></a>效果如下：</h4><p><img src=\"/css/images/clip5.png\" alt=\"\"></p>\n<p>好了，图形创建就到这里吧，使用polygon可以创建出任意你好要的图形</p>"},{"title":"CSS基础知识之position","date":"2016-12-24T13:50:58.000Z","_content":"### CSS定位机制\n\n标准文档流（Normal flow）\n浮动定位（Floats）<!--more-->\n绝对定位（Absolute positioning）\n\n##### 标准文档流\n从上到下，从左到右，输出文档内容\n由块级元素和行级元素组成\n\n##### 块级元素\n从左到右撑满页面，独占一行\n触碰到页面边缘时，会自动换行\n常见的标签有：div、ul、li、di、dt、p\n\n##### 行级元素\n能在同一行内显示\n不会改变HTML文档结构\n常见的标签有：input、span、label、strong、img\n\n##### 盒子模型\n边框（border）\n外边距（margin）\n内边距（padding）\n盒子中的内容（content）\n盒子模型尺寸=边框+外边距+内边距+盒子中内容的尺寸\n\n##### 盒子3D模型\n第一层：border\n第二层：content + padding\n第三层：background-image\n第四层：background-color\n第五层：margin\n\n##### 浮动定位\n三个属性：left（左浮动）、right（右浮动）、none（不浮动）\n元素会左移、或右移、直到碰到容器为止\n虽然脱离了标准文档流，但情况有些特殊，详情见CSS基础知识之float\n\n##### 清除浮动的常用方法\nclear属性，常用clear:both;（当父包含块缩成一条时无效）\n同时设置width:100%（或固定宽度）+overflow:hidden;\n\n##### 相对定位\n相对于自身原有位置进行偏移\n仍处于标准文档流中\n随即拥有偏移属性和z-index属性\n\n##### 绝对定位\n建立了以包含块为基准的定位\n完全脱离了标准文档流\n随即拥有偏移属性和z-index属性\n\n##### 绝对定位-偏移参考基准\n未设置偏移量时，无论是否存在已定位的祖先元素，都保持在元素初始位置\n已设置偏移量时，无已定位祖先元素，以为偏移参考基准\n已设置偏移量时，有已定位祖先元素，以距其最近的已定位祖先元素为偏移参考基准\n\n##### 绝对定位-常见问题\n没有设置宽度时，元素的宽度根据内容进行调节\n左右布局时，柱子层的高度，一定要大于绝对定位元素的高度\n\n##### 固定定位（也属于绝对定位）\n\n位置固定，不会随滚动条变化\n被他遮盖的元素，可以从其下层穿过\n\n##### 固定定位-偏移参考基准\n未设置偏移量时，无已定位祖先元素，以浏览器窗口为基准定位\n未设置偏移量时，有已定位祖先元素，以祖先元素为基准定位\n已设置偏移量时，无论是否存在已定位的祖先元素，均以浏览器窗口为基准定位","source":"_posts/CSS基础知识之position.md","raw":"---\ntitle: CSS基础知识之position\ndate: 2016-12-24 21:50:58\ncategories: \n  - 技术\n  - CSS\ntags: position\n---\n### CSS定位机制\n\n标准文档流（Normal flow）\n浮动定位（Floats）<!--more-->\n绝对定位（Absolute positioning）\n\n##### 标准文档流\n从上到下，从左到右，输出文档内容\n由块级元素和行级元素组成\n\n##### 块级元素\n从左到右撑满页面，独占一行\n触碰到页面边缘时，会自动换行\n常见的标签有：div、ul、li、di、dt、p\n\n##### 行级元素\n能在同一行内显示\n不会改变HTML文档结构\n常见的标签有：input、span、label、strong、img\n\n##### 盒子模型\n边框（border）\n外边距（margin）\n内边距（padding）\n盒子中的内容（content）\n盒子模型尺寸=边框+外边距+内边距+盒子中内容的尺寸\n\n##### 盒子3D模型\n第一层：border\n第二层：content + padding\n第三层：background-image\n第四层：background-color\n第五层：margin\n\n##### 浮动定位\n三个属性：left（左浮动）、right（右浮动）、none（不浮动）\n元素会左移、或右移、直到碰到容器为止\n虽然脱离了标准文档流，但情况有些特殊，详情见CSS基础知识之float\n\n##### 清除浮动的常用方法\nclear属性，常用clear:both;（当父包含块缩成一条时无效）\n同时设置width:100%（或固定宽度）+overflow:hidden;\n\n##### 相对定位\n相对于自身原有位置进行偏移\n仍处于标准文档流中\n随即拥有偏移属性和z-index属性\n\n##### 绝对定位\n建立了以包含块为基准的定位\n完全脱离了标准文档流\n随即拥有偏移属性和z-index属性\n\n##### 绝对定位-偏移参考基准\n未设置偏移量时，无论是否存在已定位的祖先元素，都保持在元素初始位置\n已设置偏移量时，无已定位祖先元素，以为偏移参考基准\n已设置偏移量时，有已定位祖先元素，以距其最近的已定位祖先元素为偏移参考基准\n\n##### 绝对定位-常见问题\n没有设置宽度时，元素的宽度根据内容进行调节\n左右布局时，柱子层的高度，一定要大于绝对定位元素的高度\n\n##### 固定定位（也属于绝对定位）\n\n位置固定，不会随滚动条变化\n被他遮盖的元素，可以从其下层穿过\n\n##### 固定定位-偏移参考基准\n未设置偏移量时，无已定位祖先元素，以浏览器窗口为基准定位\n未设置偏移量时，有已定位祖先元素，以祖先元素为基准定位\n已设置偏移量时，无论是否存在已定位的祖先元素，均以浏览器窗口为基准定位","slug":"CSS基础知识之position","published":1,"updated":"2016-12-29T05:01:27.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn3q000924uu65wm97i2","content":"<h3 id=\"CSS定位机制\"><a href=\"#CSS定位机制\" class=\"headerlink\" title=\"CSS定位机制\"></a>CSS定位机制</h3><p>标准文档流（Normal flow）<br>浮动定位（Floats）<a id=\"more\"></a><br>绝对定位（Absolute positioning）</p>\n<h5 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h5><p>从上到下，从左到右，输出文档内容<br>由块级元素和行级元素组成</p>\n<h5 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h5><p>从左到右撑满页面，独占一行<br>触碰到页面边缘时，会自动换行<br>常见的标签有：div、ul、li、di、dt、p</p>\n<h5 id=\"行级元素\"><a href=\"#行级元素\" class=\"headerlink\" title=\"行级元素\"></a>行级元素</h5><p>能在同一行内显示<br>不会改变HTML文档结构<br>常见的标签有：input、span、label、strong、img</p>\n<h5 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h5><p>边框（border）<br>外边距（margin）<br>内边距（padding）<br>盒子中的内容（content）<br>盒子模型尺寸=边框+外边距+内边距+盒子中内容的尺寸</p>\n<h5 id=\"盒子3D模型\"><a href=\"#盒子3D模型\" class=\"headerlink\" title=\"盒子3D模型\"></a>盒子3D模型</h5><p>第一层：border<br>第二层：content + padding<br>第三层：background-image<br>第四层：background-color<br>第五层：margin</p>\n<h5 id=\"浮动定位\"><a href=\"#浮动定位\" class=\"headerlink\" title=\"浮动定位\"></a>浮动定位</h5><p>三个属性：left（左浮动）、right（右浮动）、none（不浮动）<br>元素会左移、或右移、直到碰到容器为止<br>虽然脱离了标准文档流，但情况有些特殊，详情见CSS基础知识之float</p>\n<h5 id=\"清除浮动的常用方法\"><a href=\"#清除浮动的常用方法\" class=\"headerlink\" title=\"清除浮动的常用方法\"></a>清除浮动的常用方法</h5><p>clear属性，常用clear:both;（当父包含块缩成一条时无效）<br>同时设置width:100%（或固定宽度）+overflow:hidden;</p>\n<h5 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h5><p>相对于自身原有位置进行偏移<br>仍处于标准文档流中<br>随即拥有偏移属性和z-index属性</p>\n<h5 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h5><p>建立了以包含块为基准的定位<br>完全脱离了标准文档流<br>随即拥有偏移属性和z-index属性</p>\n<h5 id=\"绝对定位-偏移参考基准\"><a href=\"#绝对定位-偏移参考基准\" class=\"headerlink\" title=\"绝对定位-偏移参考基准\"></a>绝对定位-偏移参考基准</h5><p>未设置偏移量时，无论是否存在已定位的祖先元素，都保持在元素初始位置<br>已设置偏移量时，无已定位祖先元素，以为偏移参考基准<br>已设置偏移量时，有已定位祖先元素，以距其最近的已定位祖先元素为偏移参考基准</p>\n<h5 id=\"绝对定位-常见问题\"><a href=\"#绝对定位-常见问题\" class=\"headerlink\" title=\"绝对定位-常见问题\"></a>绝对定位-常见问题</h5><p>没有设置宽度时，元素的宽度根据内容进行调节<br>左右布局时，柱子层的高度，一定要大于绝对定位元素的高度</p>\n<h5 id=\"固定定位（也属于绝对定位）\"><a href=\"#固定定位（也属于绝对定位）\" class=\"headerlink\" title=\"固定定位（也属于绝对定位）\"></a>固定定位（也属于绝对定位）</h5><p>位置固定，不会随滚动条变化<br>被他遮盖的元素，可以从其下层穿过</p>\n<h5 id=\"固定定位-偏移参考基准\"><a href=\"#固定定位-偏移参考基准\" class=\"headerlink\" title=\"固定定位-偏移参考基准\"></a>固定定位-偏移参考基准</h5><p>未设置偏移量时，无已定位祖先元素，以浏览器窗口为基准定位<br>未设置偏移量时，有已定位祖先元素，以祖先元素为基准定位<br>已设置偏移量时，无论是否存在已定位的祖先元素，均以浏览器窗口为基准定位</p>\n","excerpt":"<h3 id=\"CSS定位机制\"><a href=\"#CSS定位机制\" class=\"headerlink\" title=\"CSS定位机制\"></a>CSS定位机制</h3><p>标准文档流（Normal flow）<br>浮动定位（Floats）","more":"<br>绝对定位（Absolute positioning）</p>\n<h5 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h5><p>从上到下，从左到右，输出文档内容<br>由块级元素和行级元素组成</p>\n<h5 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h5><p>从左到右撑满页面，独占一行<br>触碰到页面边缘时，会自动换行<br>常见的标签有：div、ul、li、di、dt、p</p>\n<h5 id=\"行级元素\"><a href=\"#行级元素\" class=\"headerlink\" title=\"行级元素\"></a>行级元素</h5><p>能在同一行内显示<br>不会改变HTML文档结构<br>常见的标签有：input、span、label、strong、img</p>\n<h5 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h5><p>边框（border）<br>外边距（margin）<br>内边距（padding）<br>盒子中的内容（content）<br>盒子模型尺寸=边框+外边距+内边距+盒子中内容的尺寸</p>\n<h5 id=\"盒子3D模型\"><a href=\"#盒子3D模型\" class=\"headerlink\" title=\"盒子3D模型\"></a>盒子3D模型</h5><p>第一层：border<br>第二层：content + padding<br>第三层：background-image<br>第四层：background-color<br>第五层：margin</p>\n<h5 id=\"浮动定位\"><a href=\"#浮动定位\" class=\"headerlink\" title=\"浮动定位\"></a>浮动定位</h5><p>三个属性：left（左浮动）、right（右浮动）、none（不浮动）<br>元素会左移、或右移、直到碰到容器为止<br>虽然脱离了标准文档流，但情况有些特殊，详情见CSS基础知识之float</p>\n<h5 id=\"清除浮动的常用方法\"><a href=\"#清除浮动的常用方法\" class=\"headerlink\" title=\"清除浮动的常用方法\"></a>清除浮动的常用方法</h5><p>clear属性，常用clear:both;（当父包含块缩成一条时无效）<br>同时设置width:100%（或固定宽度）+overflow:hidden;</p>\n<h5 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h5><p>相对于自身原有位置进行偏移<br>仍处于标准文档流中<br>随即拥有偏移属性和z-index属性</p>\n<h5 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h5><p>建立了以包含块为基准的定位<br>完全脱离了标准文档流<br>随即拥有偏移属性和z-index属性</p>\n<h5 id=\"绝对定位-偏移参考基准\"><a href=\"#绝对定位-偏移参考基准\" class=\"headerlink\" title=\"绝对定位-偏移参考基准\"></a>绝对定位-偏移参考基准</h5><p>未设置偏移量时，无论是否存在已定位的祖先元素，都保持在元素初始位置<br>已设置偏移量时，无已定位祖先元素，以为偏移参考基准<br>已设置偏移量时，有已定位祖先元素，以距其最近的已定位祖先元素为偏移参考基准</p>\n<h5 id=\"绝对定位-常见问题\"><a href=\"#绝对定位-常见问题\" class=\"headerlink\" title=\"绝对定位-常见问题\"></a>绝对定位-常见问题</h5><p>没有设置宽度时，元素的宽度根据内容进行调节<br>左右布局时，柱子层的高度，一定要大于绝对定位元素的高度</p>\n<h5 id=\"固定定位（也属于绝对定位）\"><a href=\"#固定定位（也属于绝对定位）\" class=\"headerlink\" title=\"固定定位（也属于绝对定位）\"></a>固定定位（也属于绝对定位）</h5><p>位置固定，不会随滚动条变化<br>被他遮盖的元素，可以从其下层穿过</p>\n<h5 id=\"固定定位-偏移参考基准\"><a href=\"#固定定位-偏移参考基准\" class=\"headerlink\" title=\"固定定位-偏移参考基准\"></a>固定定位-偏移参考基准</h5><p>未设置偏移量时，无已定位祖先元素，以浏览器窗口为基准定位<br>未设置偏移量时，有已定位祖先元素，以祖先元素为基准定位<br>已设置偏移量时，无论是否存在已定位的祖先元素，均以浏览器窗口为基准定位</p>"},{"title":"D3-选择元素和绑定数据","date":"2017-01-09T02:06:21.000Z","_content":"\n#### 选择元素和绑定数据\n\n##### 如何选择元素\n\n在 D3 中，用于选择元素的函数有两个：<!--more-->\n\n* d3.select()：是选择所有指定元素的第一个\n* d3.selectAll()：是选择指定元素的全部\n\n这两个函数返回的结果称为选择集。\n\n例如，选择集的常见用法如下。\n\n```JavaScript\nvar body = d3.select(\"body\"); //选择文档中的body元素\nvar p1 = body.select(\"p\");      //选择body中的第一个p元素\nvar p = body.selectAll(\"p\");    //选择body中的所有p元素\nvar svg = body.select(\"svg\");   //选择body中的svg元素\nvar rects = svg.selectAll(\"rect\");  //选择svg中所有的svg元素\n\n```\n选择集和绑定数据通常是一起使用的。\n\n##### 如何绑定数据\nD3 中是通过以下两个函数来绑定数据:\n* datum()：绑定一个数据到选择集上\n* selection.datum([value])\n* data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定\n* selection.data[values[, key]]\n\n相对而言，data() 比较常用。\n假设现在有三个段落元素如下。\n\n```html\n<p>Apple</p>\n<p>Pear</p>\n<p>Banana</p>\n```\n##### datum()\n假设有一字符串 China，要将此字符串分别与三个段落元素绑定，代码如下：\n\n```JavaScript\nvar data  = ['One', 'Two', 'Third']\nvar body = d3.select('body')\nvar p = body.selectAll('p')\n\np.datum(data)\np.text(function(d, i){\n   console.log('第'+i+'个元素绑定的数据是'+d+'')\n   return '第'+i+'个元素绑定的数据是'+d+''\n})\n```\n绑定数据后，使用此数据来修改三个段落元素的内容，其结果如下：\n\n```html\n第0个元素绑定的数据是One,Two,Third\n\n第1个元素绑定的数据是One,Two,Third\n\n第2个元素绑定的数据是One,Two,Third\n```\n在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：\n\n* d 代表数据，也就是与某元素绑定的数据。\n* i 代表索引，代表数据的索引号，从 0 开始。\n例如，上述例子中：第 0 个元素 apple 绑定的数据是 China。\n\n##### data()\n有一个数组，接下来要分别将数组的各元素绑定到三个段落元素上。\n````JavaScript\nvar dataset = [\"One\",\"Two\",\"Third\"]\n```\n\n绑定之后，其对应关系的要求为：\n\n* Apple 与 I like dog 绑定\n* Pear 与 I like cat 绑定\n* Banana 与 I like snake 绑定\n\n调用 data() 绑定数据，并替换三个段落元素的字符串为被绑定的字符串，代码如下：\n\n```JavaScript\n\nvar body = d3.select(\"body\");\nvar p = body.selectAll(\"p\");\n\np.data(dataset)\n  .text(function(d, i){\n      return '第'+i+'个元素绑定的数据是'+d+''\n  });\n```\n这段代码也用到了一个无名函数 function(d, i)，其对应的情况如下：\n\n* 当 i == 0 时， d 为 第0个元素绑定的数据是One\n* 当 i == 1 时， d 为 第1个元素绑定的数据是Two\n* 当 i == 2 时， d 为 第2个元素绑定的数据是Third\n此时，三个段落元素与数组 dataset 的三个字符串是一一对应的，因此，在函数 function(d, i) 直接 return d 即可。\n\n结果自然是三个段落的文字分别变成了数组的三个字符串。\n\n```html\n第0个元素绑定的数据是One\n第1个元素绑定的数据是Two\n第2个元素绑定的数据是Third\n```\n\n##### 总结\ndatum() 对于选择集中的每一个元素绑定的值都相同\ndata() 对于选择集中的每一个元素绑定的值会与定义的data值一一对应\n\n假设要绑定的数组为[3,6,9]\n使用datum()与data()绑定的结果如下：\n![](/css/images/code3.png)","source":"_posts/D3-数据绑定.md","raw":"---\ntitle: D3-选择元素和绑定数据\ndate: 2017-01-09 10:06:21\ncategories: \n  - 技术\n  - D3.js\ntags: [datum, data]\n---\n\n#### 选择元素和绑定数据\n\n##### 如何选择元素\n\n在 D3 中，用于选择元素的函数有两个：<!--more-->\n\n* d3.select()：是选择所有指定元素的第一个\n* d3.selectAll()：是选择指定元素的全部\n\n这两个函数返回的结果称为选择集。\n\n例如，选择集的常见用法如下。\n\n```JavaScript\nvar body = d3.select(\"body\"); //选择文档中的body元素\nvar p1 = body.select(\"p\");      //选择body中的第一个p元素\nvar p = body.selectAll(\"p\");    //选择body中的所有p元素\nvar svg = body.select(\"svg\");   //选择body中的svg元素\nvar rects = svg.selectAll(\"rect\");  //选择svg中所有的svg元素\n\n```\n选择集和绑定数据通常是一起使用的。\n\n##### 如何绑定数据\nD3 中是通过以下两个函数来绑定数据:\n* datum()：绑定一个数据到选择集上\n* selection.datum([value])\n* data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定\n* selection.data[values[, key]]\n\n相对而言，data() 比较常用。\n假设现在有三个段落元素如下。\n\n```html\n<p>Apple</p>\n<p>Pear</p>\n<p>Banana</p>\n```\n##### datum()\n假设有一字符串 China，要将此字符串分别与三个段落元素绑定，代码如下：\n\n```JavaScript\nvar data  = ['One', 'Two', 'Third']\nvar body = d3.select('body')\nvar p = body.selectAll('p')\n\np.datum(data)\np.text(function(d, i){\n   console.log('第'+i+'个元素绑定的数据是'+d+'')\n   return '第'+i+'个元素绑定的数据是'+d+''\n})\n```\n绑定数据后，使用此数据来修改三个段落元素的内容，其结果如下：\n\n```html\n第0个元素绑定的数据是One,Two,Third\n\n第1个元素绑定的数据是One,Two,Third\n\n第2个元素绑定的数据是One,Two,Third\n```\n在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：\n\n* d 代表数据，也就是与某元素绑定的数据。\n* i 代表索引，代表数据的索引号，从 0 开始。\n例如，上述例子中：第 0 个元素 apple 绑定的数据是 China。\n\n##### data()\n有一个数组，接下来要分别将数组的各元素绑定到三个段落元素上。\n````JavaScript\nvar dataset = [\"One\",\"Two\",\"Third\"]\n```\n\n绑定之后，其对应关系的要求为：\n\n* Apple 与 I like dog 绑定\n* Pear 与 I like cat 绑定\n* Banana 与 I like snake 绑定\n\n调用 data() 绑定数据，并替换三个段落元素的字符串为被绑定的字符串，代码如下：\n\n```JavaScript\n\nvar body = d3.select(\"body\");\nvar p = body.selectAll(\"p\");\n\np.data(dataset)\n  .text(function(d, i){\n      return '第'+i+'个元素绑定的数据是'+d+''\n  });\n```\n这段代码也用到了一个无名函数 function(d, i)，其对应的情况如下：\n\n* 当 i == 0 时， d 为 第0个元素绑定的数据是One\n* 当 i == 1 时， d 为 第1个元素绑定的数据是Two\n* 当 i == 2 时， d 为 第2个元素绑定的数据是Third\n此时，三个段落元素与数组 dataset 的三个字符串是一一对应的，因此，在函数 function(d, i) 直接 return d 即可。\n\n结果自然是三个段落的文字分别变成了数组的三个字符串。\n\n```html\n第0个元素绑定的数据是One\n第1个元素绑定的数据是Two\n第2个元素绑定的数据是Third\n```\n\n##### 总结\ndatum() 对于选择集中的每一个元素绑定的值都相同\ndata() 对于选择集中的每一个元素绑定的值会与定义的data值一一对应\n\n假设要绑定的数组为[3,6,9]\n使用datum()与data()绑定的结果如下：\n![](/css/images/code3.png)","slug":"D3-数据绑定","published":1,"updated":"2017-01-09T06:13:02.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn3v000b24uugjmpd9g7","content":"<h4 id=\"选择元素和绑定数据\"><a href=\"#选择元素和绑定数据\" class=\"headerlink\" title=\"选择元素和绑定数据\"></a>选择元素和绑定数据</h4><h5 id=\"如何选择元素\"><a href=\"#如何选择元素\" class=\"headerlink\" title=\"如何选择元素\"></a>如何选择元素</h5><p>在 D3 中，用于选择元素的函数有两个：<a id=\"more\"></a></p>\n<ul>\n<li>d3.select()：是选择所有指定元素的第一个</li>\n<li>d3.selectAll()：是选择指定元素的全部</li>\n</ul>\n<p>这两个函数返回的结果称为选择集。</p>\n<p>例如，选择集的常见用法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">\"body\"</span>); <span class=\"comment\">//选择文档中的body元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = body.select(<span class=\"string\">\"p\"</span>);      <span class=\"comment\">//选择body中的第一个p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">\"p\"</span>);    <span class=\"comment\">//选择body中的所有p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> svg = body.select(<span class=\"string\">\"svg\"</span>);   <span class=\"comment\">//选择body中的svg元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> rects = svg.selectAll(<span class=\"string\">\"rect\"</span>);  <span class=\"comment\">//选择svg中所有的svg元素</span></div></pre></td></tr></table></figure>\n<p>选择集和绑定数据通常是一起使用的。</p>\n<h5 id=\"如何绑定数据\"><a href=\"#如何绑定数据\" class=\"headerlink\" title=\"如何绑定数据\"></a>如何绑定数据</h5><p>D3 中是通过以下两个函数来绑定数据:</p>\n<ul>\n<li>datum()：绑定一个数据到选择集上</li>\n<li>selection.datum([value])</li>\n<li>data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</li>\n<li>selection.data[values[, key]]</li>\n</ul>\n<p>相对而言，data() 比较常用。<br>假设现在有三个段落元素如下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Apple<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Pear<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Banana<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"datum\"><a href=\"#datum\" class=\"headerlink\" title=\"datum()\"></a>datum()</h5><p>假设有一字符串 China，要将此字符串分别与三个段落元素绑定，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data  = [<span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Third'</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">p.datum(data)</div><div class=\"line\">p.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span>)</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>绑定数据后，使用此数据来修改三个段落元素的内容，其结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">第0个元素绑定的数据是One,Two,Third</div><div class=\"line\"></div><div class=\"line\">第1个元素绑定的数据是One,Two,Third</div><div class=\"line\"></div><div class=\"line\">第2个元素绑定的数据是One,Two,Third</div></pre></td></tr></table></figure>\n<p>在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：</p>\n<ul>\n<li>d 代表数据，也就是与某元素绑定的数据。</li>\n<li>i 代表索引，代表数据的索引号，从 0 开始。<br>例如，上述例子中：第 0 个元素 apple 绑定的数据是 China。</li>\n</ul>\n<h5 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data()\"></a>data()</h5><p>有一个数组，接下来要分别将数组的各元素绑定到三个段落元素上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var dataset = [&quot;One&quot;,&quot;Two&quot;,&quot;Third&quot;]</div></pre></td></tr></table></figure></p>\n<p>绑定之后，其对应关系的要求为：</p>\n<ul>\n<li>Apple 与 I like dog 绑定</li>\n<li>Pear 与 I like cat 绑定</li>\n<li>Banana 与 I like snake 绑定</li>\n</ul>\n<p>调用 data() 绑定数据，并替换三个段落元素的字符串为被绑定的字符串，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">\"body\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\">p.data(dataset)</div><div class=\"line\">  .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span></div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这段代码也用到了一个无名函数 function(d, i)，其对应的情况如下：</p>\n<ul>\n<li>当 i == 0 时， d 为 第0个元素绑定的数据是One</li>\n<li>当 i == 1 时， d 为 第1个元素绑定的数据是Two</li>\n<li>当 i == 2 时， d 为 第2个元素绑定的数据是Third<br>此时，三个段落元素与数组 dataset 的三个字符串是一一对应的，因此，在函数 function(d, i) 直接 return d 即可。</li>\n</ul>\n<p>结果自然是三个段落的文字分别变成了数组的三个字符串。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">第0个元素绑定的数据是One</div><div class=\"line\">第1个元素绑定的数据是Two</div><div class=\"line\">第2个元素绑定的数据是Third</div></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>datum() 对于选择集中的每一个元素绑定的值都相同<br>data() 对于选择集中的每一个元素绑定的值会与定义的data值一一对应</p>\n<p>假设要绑定的数组为[3,6,9]<br>使用datum()与data()绑定的结果如下：<br><img src=\"/css/images/code3.png\" alt=\"\"></p>\n","excerpt":"<h4 id=\"选择元素和绑定数据\"><a href=\"#选择元素和绑定数据\" class=\"headerlink\" title=\"选择元素和绑定数据\"></a>选择元素和绑定数据</h4><h5 id=\"如何选择元素\"><a href=\"#如何选择元素\" class=\"headerlink\" title=\"如何选择元素\"></a>如何选择元素</h5><p>在 D3 中，用于选择元素的函数有两个：","more":"</p>\n<ul>\n<li>d3.select()：是选择所有指定元素的第一个</li>\n<li>d3.selectAll()：是选择指定元素的全部</li>\n</ul>\n<p>这两个函数返回的结果称为选择集。</p>\n<p>例如，选择集的常见用法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">\"body\"</span>); <span class=\"comment\">//选择文档中的body元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = body.select(<span class=\"string\">\"p\"</span>);      <span class=\"comment\">//选择body中的第一个p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">\"p\"</span>);    <span class=\"comment\">//选择body中的所有p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> svg = body.select(<span class=\"string\">\"svg\"</span>);   <span class=\"comment\">//选择body中的svg元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> rects = svg.selectAll(<span class=\"string\">\"rect\"</span>);  <span class=\"comment\">//选择svg中所有的svg元素</span></div></pre></td></tr></table></figure>\n<p>选择集和绑定数据通常是一起使用的。</p>\n<h5 id=\"如何绑定数据\"><a href=\"#如何绑定数据\" class=\"headerlink\" title=\"如何绑定数据\"></a>如何绑定数据</h5><p>D3 中是通过以下两个函数来绑定数据:</p>\n<ul>\n<li>datum()：绑定一个数据到选择集上</li>\n<li>selection.datum([value])</li>\n<li>data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</li>\n<li>selection.data[values[, key]]</li>\n</ul>\n<p>相对而言，data() 比较常用。<br>假设现在有三个段落元素如下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Apple<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Pear<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Banana<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"datum\"><a href=\"#datum\" class=\"headerlink\" title=\"datum()\"></a>datum()</h5><p>假设有一字符串 China，要将此字符串分别与三个段落元素绑定，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data  = [<span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Third'</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\"></div><div class=\"line\">p.datum(data)</div><div class=\"line\">p.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span>)</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>绑定数据后，使用此数据来修改三个段落元素的内容，其结果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">第0个元素绑定的数据是One,Two,Third</div><div class=\"line\"></div><div class=\"line\">第1个元素绑定的数据是One,Two,Third</div><div class=\"line\"></div><div class=\"line\">第2个元素绑定的数据是One,Two,Third</div></pre></td></tr></table></figure>\n<p>在上面的代码中，用到了一个无名函数 function(d, i)。当选择集需要使用被绑定的数据时，常需要这么使用。其包含两个参数，其中：</p>\n<ul>\n<li>d 代表数据，也就是与某元素绑定的数据。</li>\n<li>i 代表索引，代表数据的索引号，从 0 开始。<br>例如，上述例子中：第 0 个元素 apple 绑定的数据是 China。</li>\n</ul>\n<h5 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data()\"></a>data()</h5><p>有一个数组，接下来要分别将数组的各元素绑定到三个段落元素上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var dataset = [&quot;One&quot;,&quot;Two&quot;,&quot;Third&quot;]</div></pre></td></tr></table></figure></p>\n<p>绑定之后，其对应关系的要求为：</p>\n<ul>\n<li>Apple 与 I like dog 绑定</li>\n<li>Pear 与 I like cat 绑定</li>\n<li>Banana 与 I like snake 绑定</li>\n</ul>\n<p>调用 data() 绑定数据，并替换三个段落元素的字符串为被绑定的字符串，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">\"body\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p = body.selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\">p.data(dataset)</div><div class=\"line\">  .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'第'</span>+i+<span class=\"string\">'个元素绑定的数据是'</span>+d+<span class=\"string\">''</span></div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这段代码也用到了一个无名函数 function(d, i)，其对应的情况如下：</p>\n<ul>\n<li>当 i == 0 时， d 为 第0个元素绑定的数据是One</li>\n<li>当 i == 1 时， d 为 第1个元素绑定的数据是Two</li>\n<li>当 i == 2 时， d 为 第2个元素绑定的数据是Third<br>此时，三个段落元素与数组 dataset 的三个字符串是一一对应的，因此，在函数 function(d, i) 直接 return d 即可。</li>\n</ul>\n<p>结果自然是三个段落的文字分别变成了数组的三个字符串。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">第0个元素绑定的数据是One</div><div class=\"line\">第1个元素绑定的数据是Two</div><div class=\"line\">第2个元素绑定的数据是Third</div></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>datum() 对于选择集中的每一个元素绑定的值都相同<br>data() 对于选择集中的每一个元素绑定的值会与定义的data值一一对应</p>\n<p>假设要绑定的数组为[3,6,9]<br>使用datum()与data()绑定的结果如下：<br><img src=\"/css/images/code3.png\" alt=\"\"></p>"},{"title":"D3-理解 Update、Enter、Exit","date":"2017-01-09T06:11:32.000Z","_content":"\n<code>Update</code>、 <code>Enter</code> 、<code>Exit</code> 是 D3 中三个非常重要的概念，它处理的是当选择集和数据的数量关系不确定的情况。<!--more-->\n根据数组长度和元素数量的关系，分别把各种情况归纳如下：\n* <code>updata</code>: 数组长度 = 元素数量\n* <code>enter</code>: 数组长度 > 元素\n* <code>exit</code> 数组长度 < 元素数量\n\n##### Update 和 Enter 的使用\n当对应的元素不足时 （ 绑定数据数量 > 对应元素 ），需要添加元素（append）。\n\n现在 <code>body</code> 中有三个 p 元素，要绑定一个长度大于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>enter</code> 两部分。\n```JavaScript\nvar dataset = [ 3 , 6 , 9 , 12 , 15 ];\n\n//选择body中的p元素\nvar p = d3.select(\"body\").selectAll(\"p\");\n\n//获取update部分\nvar update = p.data(dataset);\n\n//获取enter部分\nvar enter = update.enter();\n\n//update部分的处理：更新属性值\nupdate.text(function(d){\n    return \"update \" + d;\n});\n\n//enter部分的处理：添加元素后赋予属性值\nenter.append(\"p\")\n    .text(function(d){\n        return \"enter \" + d;\n    });\n```\n结果如下图，<code>update</code> 部分和 <code>enter</code> 部分被绑定的数据很清晰地表示了出来。\n![](/css/images/enterexit-3.png)\n请大家记住：\n* update 部分的处理办法一般是：更新属性值\n* enter 部分的处理办法一般是：添加元素后，赋予属性值\n\n#### Update 和 Exit 的使用\n\n当对应的元素过多时 （ 绑定数据数量 < 对应元素 ），需要删掉多余的元素。\n\n现在 <code>body</code> 中有三个 p 元素，要绑定一个长度小于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>exit</code> 两部分。\n\n```JavaScript\nvar dataset = [ 3 ];\n\n//选择body中的p元素\nvar p = d3.select(\"body\").selectAll(\"p\");\n\n//获取update部分\nvar update = p.data(dataset);\n\n//获取exit部分\nvar exit = update.exit();\n\n//update部分的处理：更新属性值\nupdate.text(function(d){\n    return \"update \" + d;\n});\n\n//exit部分的处理：修改p元素的属性\nexit.text(function(d){\n        return \"exit\";\n    });\n\n//exit部分的处理通常是删除元素\n// exit.remove();\n```\n结果如下，请大家区分好 <code>update</code> 部分和 <code>exit</code> 部分。这里为了表明哪一部分是 exit，并没有删除掉多余的元素，但实际上 exit 部分的绝大部分操作是删除。\n![](/css/images/enterexit-4.png)\n请大家记住：\n* <code>exit</code> 部分的处理办法一般是：删除元素（remove）\n\n\n","source":"_posts/D3-理解-Update、Enter、Exit.md","raw":"---\ntitle: D3-理解 Update、Enter、Exit\ndate: 2017-01-09 14:11:32\ncategories: \n  - 技术\n  - D3.js\ntags: [Update, Enter, Exit]\n---\n\n<code>Update</code>、 <code>Enter</code> 、<code>Exit</code> 是 D3 中三个非常重要的概念，它处理的是当选择集和数据的数量关系不确定的情况。<!--more-->\n根据数组长度和元素数量的关系，分别把各种情况归纳如下：\n* <code>updata</code>: 数组长度 = 元素数量\n* <code>enter</code>: 数组长度 > 元素\n* <code>exit</code> 数组长度 < 元素数量\n\n##### Update 和 Enter 的使用\n当对应的元素不足时 （ 绑定数据数量 > 对应元素 ），需要添加元素（append）。\n\n现在 <code>body</code> 中有三个 p 元素，要绑定一个长度大于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>enter</code> 两部分。\n```JavaScript\nvar dataset = [ 3 , 6 , 9 , 12 , 15 ];\n\n//选择body中的p元素\nvar p = d3.select(\"body\").selectAll(\"p\");\n\n//获取update部分\nvar update = p.data(dataset);\n\n//获取enter部分\nvar enter = update.enter();\n\n//update部分的处理：更新属性值\nupdate.text(function(d){\n    return \"update \" + d;\n});\n\n//enter部分的处理：添加元素后赋予属性值\nenter.append(\"p\")\n    .text(function(d){\n        return \"enter \" + d;\n    });\n```\n结果如下图，<code>update</code> 部分和 <code>enter</code> 部分被绑定的数据很清晰地表示了出来。\n![](/css/images/enterexit-3.png)\n请大家记住：\n* update 部分的处理办法一般是：更新属性值\n* enter 部分的处理办法一般是：添加元素后，赋予属性值\n\n#### Update 和 Exit 的使用\n\n当对应的元素过多时 （ 绑定数据数量 < 对应元素 ），需要删掉多余的元素。\n\n现在 <code>body</code> 中有三个 p 元素，要绑定一个长度小于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>exit</code> 两部分。\n\n```JavaScript\nvar dataset = [ 3 ];\n\n//选择body中的p元素\nvar p = d3.select(\"body\").selectAll(\"p\");\n\n//获取update部分\nvar update = p.data(dataset);\n\n//获取exit部分\nvar exit = update.exit();\n\n//update部分的处理：更新属性值\nupdate.text(function(d){\n    return \"update \" + d;\n});\n\n//exit部分的处理：修改p元素的属性\nexit.text(function(d){\n        return \"exit\";\n    });\n\n//exit部分的处理通常是删除元素\n// exit.remove();\n```\n结果如下，请大家区分好 <code>update</code> 部分和 <code>exit</code> 部分。这里为了表明哪一部分是 exit，并没有删除掉多余的元素，但实际上 exit 部分的绝大部分操作是删除。\n![](/css/images/enterexit-4.png)\n请大家记住：\n* <code>exit</code> 部分的处理办法一般是：删除元素（remove）\n\n\n","slug":"D3-理解-Update、Enter、Exit","published":1,"updated":"2017-01-09T06:49:15.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn43000e24uuchuc7sgv","content":"<p><code>Update</code>、 <code>Enter</code> 、<code>Exit</code> 是 D3 中三个非常重要的概念，它处理的是当选择集和数据的数量关系不确定的情况。<a id=\"more\"></a><br>根据数组长度和元素数量的关系，分别把各种情况归纳如下：</p>\n<ul>\n<li><code>updata</code>: 数组长度 = 元素数量</li>\n<li><code>enter</code>: 数组长度 &gt; 元素</li>\n<li><code>exit</code> 数组长度 &lt; 元素数量</li>\n</ul>\n<h5 id=\"Update-和-Enter-的使用\"><a href=\"#Update-和-Enter-的使用\" class=\"headerlink\" title=\"Update 和 Enter 的使用\"></a>Update 和 Enter 的使用</h5><p>当对应的元素不足时 （ 绑定数据数量 &gt; 对应元素 ），需要添加元素（append）。</p>\n<p>现在 <code>body</code> 中有三个 p 元素，要绑定一个长度大于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>enter</code> 两部分。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">3</span> , <span class=\"number\">6</span> , <span class=\"number\">9</span> , <span class=\"number\">12</span> , <span class=\"number\">15</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//选择body中的p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取update部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = p.data(dataset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取enter部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> enter = update.enter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//update部分的处理：更新属性值</span></div><div class=\"line\">update.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"update \"</span> + d;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//enter部分的处理：添加元素后赋予属性值</span></div><div class=\"line\">enter.append(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"enter \"</span> + d;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>结果如下图，<code>update</code> 部分和 <code>enter</code> 部分被绑定的数据很清晰地表示了出来。<br><img src=\"/css/images/enterexit-3.png\" alt=\"\"><br>请大家记住：</p>\n<ul>\n<li>update 部分的处理办法一般是：更新属性值</li>\n<li>enter 部分的处理办法一般是：添加元素后，赋予属性值</li>\n</ul>\n<h4 id=\"Update-和-Exit-的使用\"><a href=\"#Update-和-Exit-的使用\" class=\"headerlink\" title=\"Update 和 Exit 的使用\"></a>Update 和 Exit 的使用</h4><p>当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ），需要删掉多余的元素。</p>\n<p>现在 <code>body</code> 中有三个 p 元素，要绑定一个长度小于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>exit</code> 两部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">3</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//选择body中的p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取update部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = p.data(dataset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取exit部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> exit = update.exit();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//update部分的处理：更新属性值</span></div><div class=\"line\">update.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"update \"</span> + d;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//exit部分的处理：修改p元素的属性</span></div><div class=\"line\">exit.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"exit\"</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//exit部分的处理通常是删除元素</span></div><div class=\"line\"><span class=\"comment\">// exit.remove();</span></div></pre></td></tr></table></figure>\n<p>结果如下，请大家区分好 <code>update</code> 部分和 <code>exit</code> 部分。这里为了表明哪一部分是 exit，并没有删除掉多余的元素，但实际上 exit 部分的绝大部分操作是删除。<br><img src=\"/css/images/enterexit-4.png\" alt=\"\"><br>请大家记住：</p>\n<ul>\n<li><code>exit</code> 部分的处理办法一般是：删除元素（remove）</li>\n</ul>\n","excerpt":"<p><code>Update</code>、 <code>Enter</code> 、<code>Exit</code> 是 D3 中三个非常重要的概念，它处理的是当选择集和数据的数量关系不确定的情况。","more":"<br>根据数组长度和元素数量的关系，分别把各种情况归纳如下：</p>\n<ul>\n<li><code>updata</code>: 数组长度 = 元素数量</li>\n<li><code>enter</code>: 数组长度 &gt; 元素</li>\n<li><code>exit</code> 数组长度 &lt; 元素数量</li>\n</ul>\n<h5 id=\"Update-和-Enter-的使用\"><a href=\"#Update-和-Enter-的使用\" class=\"headerlink\" title=\"Update 和 Enter 的使用\"></a>Update 和 Enter 的使用</h5><p>当对应的元素不足时 （ 绑定数据数量 &gt; 对应元素 ），需要添加元素（append）。</p>\n<p>现在 <code>body</code> 中有三个 p 元素，要绑定一个长度大于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>enter</code> 两部分。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">3</span> , <span class=\"number\">6</span> , <span class=\"number\">9</span> , <span class=\"number\">12</span> , <span class=\"number\">15</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//选择body中的p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取update部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = p.data(dataset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取enter部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> enter = update.enter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//update部分的处理：更新属性值</span></div><div class=\"line\">update.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"update \"</span> + d;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//enter部分的处理：添加元素后赋予属性值</span></div><div class=\"line\">enter.append(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"enter \"</span> + d;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>结果如下图，<code>update</code> 部分和 <code>enter</code> 部分被绑定的数据很清晰地表示了出来。<br><img src=\"/css/images/enterexit-3.png\" alt=\"\"><br>请大家记住：</p>\n<ul>\n<li>update 部分的处理办法一般是：更新属性值</li>\n<li>enter 部分的处理办法一般是：添加元素后，赋予属性值</li>\n</ul>\n<h4 id=\"Update-和-Exit-的使用\"><a href=\"#Update-和-Exit-的使用\" class=\"headerlink\" title=\"Update 和 Exit 的使用\"></a>Update 和 Exit 的使用</h4><p>当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ），需要删掉多余的元素。</p>\n<p>现在 <code>body</code> 中有三个 p 元素，要绑定一个长度小于 3 的数组到 p 的选择集上，然后分别处理 <code>update</code> 和 <code>exit</code> 两部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">3</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//选择body中的p元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"p\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取update部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = p.data(dataset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取exit部分</span></div><div class=\"line\"><span class=\"keyword\">var</span> exit = update.exit();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//update部分的处理：更新属性值</span></div><div class=\"line\">update.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"update \"</span> + d;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//exit部分的处理：修改p元素的属性</span></div><div class=\"line\">exit.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"exit\"</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//exit部分的处理通常是删除元素</span></div><div class=\"line\"><span class=\"comment\">// exit.remove();</span></div></pre></td></tr></table></figure>\n<p>结果如下，请大家区分好 <code>update</code> 部分和 <code>exit</code> 部分。这里为了表明哪一部分是 exit，并没有删除掉多余的元素，但实际上 exit 部分的绝大部分操作是删除。<br><img src=\"/css/images/enterexit-4.png\" alt=\"\"><br>请大家记住：</p>\n<ul>\n<li><code>exit</code> 部分的处理办法一般是：删除元素（remove）</li>\n</ul>"},{"title":"D3.js踩的那些坑","date":"2016-12-17T15:29:38.000Z","_content":"\n##### 1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。\n\n<!--more--> \n\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n \n//这里给g标签设置了width, height, x, y属性，但显示结果这些属性并不会生效\n//但如果给g标签设置了fill, font-size等属性值会被子元素继承\nsvg.append('g')\n  .attr('width', 100)\n  .attr('height', 100)\n  .attr('x', 50)\n  .attr('y', 50)\n\n```\n##### 显示结果如下\n![](/css/images/d301.png)\n\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n\t\nsvg.append('g')\n  .attr('fill', 'blue') //rect会继承g的fill属性\n  .append('rect')\n  .attr('width', 100)\n  .attr('height', 40)\n  .attr('x', 20)\n  .attr('y', 20)\n\n```\n##### 显示结果如下\n![](/css/images/d302.png)\n##### 2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height\n","source":"_posts/D3.js踩的那些坑.md","raw":"---\ntitle: D3.js踩的那些坑\ndate: 2016-12-17 23:29:38\ncategories: \n  - 技术\n  - D3.js\ntags: D3.js\n---\n\n##### 1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。\n\n<!--more--> \n\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n \n//这里给g标签设置了width, height, x, y属性，但显示结果这些属性并不会生效\n//但如果给g标签设置了fill, font-size等属性值会被子元素继承\nsvg.append('g')\n  .attr('width', 100)\n  .attr('height', 100)\n  .attr('x', 50)\n  .attr('y', 50)\n\n```\n##### 显示结果如下\n![](/css/images/d301.png)\n\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n\t\nsvg.append('g')\n  .attr('fill', 'blue') //rect会继承g的fill属性\n  .append('rect')\n  .attr('width', 100)\n  .attr('height', 40)\n  .attr('x', 20)\n  .attr('y', 20)\n\n```\n##### 显示结果如下\n![](/css/images/d302.png)\n##### 2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height\n","slug":"D3.js踩的那些坑","published":1,"updated":"2016-12-29T05:01:27.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4c000g24uuynosnbx2","content":"<h5 id=\"1-g标签本身是没有x-y-width-heigh等属性，他的x-y-w-h是随着子元素的x-y-w-h变化而变化的。\"><a href=\"#1-g标签本身是没有x-y-width-heigh等属性，他的x-y-w-h是随着子元素的x-y-w-h变化而变化的。\" class=\"headerlink\" title=\"1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。\"></a>1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。</h5><a id=\"more\"></a> \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//这里给g标签设置了width, height, x, y属性，但显示结果这些属性并不会生效</span></div><div class=\"line\"><span class=\"comment\">//但如果给g标签设置了fill, font-size等属性值会被子元素继承</span></div><div class=\"line\">svg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'x'</span>, <span class=\"number\">50</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'y'</span>, <span class=\"number\">50</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"显示结果如下\"><a href=\"#显示结果如下\" class=\"headerlink\" title=\"显示结果如下\"></a>显示结果如下</h5><p><img src=\"/css/images/d301.png\" alt=\"\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">\t</div><div class=\"line\">svg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'blue'</span>) <span class=\"comment\">//rect会继承g的fill属性</span></div><div class=\"line\">  .append(<span class=\"string\">'rect'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">40</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'x'</span>, <span class=\"number\">20</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'y'</span>, <span class=\"number\">20</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"显示结果如下-1\"><a href=\"#显示结果如下-1\" class=\"headerlink\" title=\"显示结果如下\"></a>显示结果如下</h5><p><img src=\"/css/images/d302.png\" alt=\"\"></p>\n<h5 id=\"2-在svg中添加image标签设置style的width-height在IE中不能显示，必须通过-attr设置width-height\"><a href=\"#2-在svg中添加image标签设置style的width-height在IE中不能显示，必须通过-attr设置width-height\" class=\"headerlink\" title=\"2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height\"></a>2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height</h5>","excerpt":"<h5 id=\"1-g标签本身是没有x-y-width-heigh等属性，他的x-y-w-h是随着子元素的x-y-w-h变化而变化的。\"><a href=\"#1-g标签本身是没有x-y-width-heigh等属性，他的x-y-w-h是随着子元素的x-y-w-h变化而变化的。\" class=\"headerlink\" title=\"1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。\"></a>1.g标签本身是没有x,y,width,heigh等属性，他的x,y,w,h是随着子元素的x,y,w,h变化而变化的。</h5>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//这里给g标签设置了width, height, x, y属性，但显示结果这些属性并不会生效</span></div><div class=\"line\"><span class=\"comment\">//但如果给g标签设置了fill, font-size等属性值会被子元素继承</span></div><div class=\"line\">svg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'x'</span>, <span class=\"number\">50</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'y'</span>, <span class=\"number\">50</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"显示结果如下\"><a href=\"#显示结果如下\" class=\"headerlink\" title=\"显示结果如下\"></a>显示结果如下</h5><p><img src=\"/css/images/d301.png\" alt=\"\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">\t</div><div class=\"line\">svg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'blue'</span>) <span class=\"comment\">//rect会继承g的fill属性</span></div><div class=\"line\">  .append(<span class=\"string\">'rect'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">40</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'x'</span>, <span class=\"number\">20</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'y'</span>, <span class=\"number\">20</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"显示结果如下-1\"><a href=\"#显示结果如下-1\" class=\"headerlink\" title=\"显示结果如下\"></a>显示结果如下</h5><p><img src=\"/css/images/d302.png\" alt=\"\"></p>\n<h5 id=\"2-在svg中添加image标签设置style的width-height在IE中不能显示，必须通过-attr设置width-height\"><a href=\"#2-在svg中添加image标签设置style的width-height在IE中不能显示，必须通过-attr设置width-height\" class=\"headerlink\" title=\"2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height\"></a>2.在svg中添加image标签设置style的width,height在IE中不能显示，必须通过.attr设置width,height</h5>"},{"title":"D3基础部分","date":"2017-01-08T14:29:28.000Z","toc":true,"_content":"\n\n## 一、D3简介\n\n#### D3是什么？\n\n​    D3是一个javascript的函数库，用来做数据数据可视化的。\n\n#### D3的优势\n<!-- more -->\n- 数据能够与DOM绑定在一起\n- 数据转换和绘制是独立的\n- 代码简洁\n- 大量布局\n- 基于SVG，缩放不会损失精度\n\n\n\n ## 二、WEB前端开发基础\n\n#### 浏览器\n\nD3对IE8及以下版本支持不好，建议使用高版本的浏览器。D3可运行于IE9+、firefox、Chrome、Safari、Opera等浏览器。\n\n#### SVG\n\n指可缩放矢量图形，是用于描述二维矢量图形的一种图形格式。SVG使用XML格式来定义图形，除了IE8之前的版本外，绝大部分浏览器都支持SVG，可将SVG文本直接嵌入HTML中显示。D3十分适合在SVG中绘制图形。\n\n添加一组<svg>标签：\n\n```html\n<svg width=\"300\" height=\"300\" version=\"1.1\"></svg>\n```\n\nSVG中预定义了七种形状元素，分别为：矩形<rect>、圆形<circle>、椭圆<ellipse>、线段<line>、折线<polyline>、多边形<polygon>、路径<path>。\n\n##### 1. 矩形\n\n矩形的参数有6个。\n\n- x：矩形左上角的X坐标。\n- y：矩形左上角的Y坐标。\n- width：矩形的宽度。\n- height：矩形的高度。\n- rx；对于圆角矩形，指定椭圆在X方向的半径。\n- ry：对于圆角矩形，指定椭圆在Y方向的半径。\n\n绘制一个直角矩形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <rect x=\"20\" y=\"20\" width=\"200\" height=\"200\" style=\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"></rect>\n</svg>\n```\n\n绘制一个圆角矩形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n    <rect x=\"20\" y=\"20\" rx=\"20\" ry=\"20\" width=\"200\" height=\"200\" style=\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"></rect>\n</svg>\n```\n\n代码解释：\n\n- fill：定义矩形的填充颜色（rbg,颜色名或者16进制都可以）\n\n- stroke-width：矩形边框的宽度\n\n- stroke：矩形边框的颜色                 \n\n##### 2. 圆形和椭圆形\n\n圆形的参数是3个。\n\n- cx：圆心的X坐标。\n- cy：圆心的Y坐标。\n- r：圆的半径。\n\n椭圆的参数与圆形类似，只是半径分为水平半径和垂直半径。\n\n- cx：圆心的X坐标。\n- cy：圆心的Y坐标。\n- rx：椭圆的水平半径。\n- ry：椭圆的垂直半径。\n\n绘制圆形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <circle cx=\"50\" cy=\"50\" r=\"20\" style=\"fill:yellow; stroke:black; stroke-width:4\"></circle>\n</svg>\n```\n\n绘制椭圆\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <ellipse cx=\"120\" cy=\"100\" rx=\"100\" ry=\"80\" style=\"fill:yellow; stroke:black; stroke-width:4\"></ellipse>\n</svg>\n```\n##### 3. 线段\n\n线段的参数是起点和终点的坐标。\n\n- x1：起点的X坐标。\n- y1：起点的Y坐标。\n- x2：终点的X坐标。\n- y2：终点的Y坐标。\n\n绘制线段\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <line x1=\"120\" y1=\"20\" x2=\"100\" y2=\"80\" style=\"fill:yellow; stroke:black; stroke-width:4\"></line>\n</svg>\n```\n##### 4. 多边形和折线\n\n多边形和折线的参数是一样的，都只有一个points参数，这个参数的值是一系列的点坐标。不同之处是多边形会将终点和起点连接起来，而折线是不链接。\n\n绘制多边形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <polygon points=\"100,20 20,90, 60,160 140,160 180,90\" style=\"fill:lawngreen; stroke:black; stroke-width:3\"></polygon>\n</svg>\n```\n\n绘制折线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <polyline points=\"100,20 20,90, 60,160 140,160 180,90\" style=\"fill:white; stroke:black; stroke-width:3\"></polyline>\n</svg>\n```\n##### 5. 路径\n\n<path>标签的功能最丰富，前面举的栗子都可以用路径绘制出来。与折现类似，也是通过给出一系列点坐标来绘制。在D3中绘制地图时，会经常用到此标签。其用法：给出一个坐标点，在坐标点的前面添加一个英文字母，表示如何运动到此坐标点的。\n\n###### 5.1 绘制直线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"500\" version=\"1.1\">\n      <path d=\"M100,100 H500\n               M300,100 V500\n               M100,500 H500\n               M200,200 L100,400\n               M150,300 L250,400\n               M450,200 L350,400\n               M400,300 L500,400\"\n          style=\"stroke:black; stroke-width:3\" />\n    </svg>\n```\n\n英文字母按照功能可以分为5类，下面跟着栗子分别介绍。\n\n- 移动类\n\n  M  将画笔移动到指定坐标。\n\n- 直线类\n\n  L  画直线到指定坐标。\n\n  H  画水平直线到指定坐标。\n\n  V  画垂直直线到指定坐标。\n\n猜猜画出来是什么！\n\n###### 5.2 绘制三次贝塞尔曲线 \n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"200\" version=\"1.1\">\n   <path d=\"M30,100 C100,20 190,20 270,100 S400,180 450,100\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 曲线类\n\n  C  画3次贝塞尔曲线经两个指定控制点到达终点坐标。\n\n  S  与前一条三次贝塞尔曲线相连，第一个控制点为前一条曲线第二个控制点的对称点，只需输入第二个控制点和终点，即可绘制一个三次贝塞尔曲线。\n\nC后接三个坐标，分别为两个控制点和终点；S后面接两个坐标，分别为第二个控制点和终点。S会根据之前的曲线自动生成一个控制点。\n\n###### 5.3 绘制二次贝塞尔曲线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"200\" version=\"1.1\">\n   <path d=\"M30,100 Q190,20 270,100 T450,100\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 曲线类\n\n  Q  画二次贝塞尔曲线经一个指定控制点到达终点坐标。\n\n  T  与前一条二次贝塞尔曲线相连，控制点为前一条二次贝塞尔曲线控制点的对称点，只需输入终点，即可绘制一个二次贝塞尔曲线。\n\n\n###### 5.4 绘制弧线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"400\" version=\"1.1\">\n   <path d=\"M100,200 a200,150 0 1,0 150,-150 Z\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 弧线类\n\n  A  画椭圆曲线到指定坐标。弧线是根据椭圆来绘制的，参数比较多：\n\n  A(rx（椭圆X方向的半轴大小）,ry（椭圆Y方向的半轴大小）x-axis-rotation（椭圆的X轴与水平轴顺时针方向的夹角）large-arc-flag（有两个值{1：大角度弧线 、0：小角度弧线},sweep-flag（有两个值{1：顺时针至终点、 0：逆时针至终点}）x（终点X坐标）,y（终点Y坐标）） )\n\n- 闭合类\n\n  Z  绘制一条直线连接终点和起点，用来封闭图形。\n\n其中，用了小写a标示相对坐标，当前画笔位置为（100，200），那么终点位置就为（100+150，200-150）=（250，50）。\n\n以上命令用大写字母表示坐标系中的绝对坐标，小写字母写标识相对坐标（相对于当前画笔所在点）。\n\n##### 6. 文字\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n      <text x=\"200\" y=\"50\" dx=\"-5\" dy=\"5\" rotate=\"180\" textLength=\"70\" style=\"fill:green; font-size:30px;\">这是<tspan style=\"fill:yellow\">文字</tspan></text>\n</svg>\n```\n\n- x：文字位置的X坐标\n- y：文字位置的Y坐标\n- dx：相对于当前位置在X方向上平移的距离（值为正则往右，负则往左）\n- dy：相对于当前位置在Y方向上平移的距离（值为正则往下，负则往上）\n- rotate：旋转角度（顺时针为正，逆时针为负）\n- textLength：文字的显示长度（不足则拉长，足则压缩）\n\n#####  7. 样式\n\nSVG支持使用CSS选择器给元素定义样式。\n\n- fill：填充色（rbg,颜色名或者16进制都可以）\n- stroke：边框的颜色 \n- stroke-width：边框的宽度\n- stroke-linecap：线头端点的样式，butt、round（圆角）、square（直角）。\n- stroke-dasharray：虚线的样式，例如：stroke-dasharray=\"10,10\" stroke-dasharray=\"15,15\" stroke-dasharray=\"20,10,5,5,5,15\"。\n\n##### 8. 标记\n\n标记（marker）是SVG中一个重要的概念，能帖服于<path>、<line>等元素上。标记<marker>写在<defs></defs>中，defs用于定义可重复利用的图形元素。\n\n<marker>标签的属性和意义：\n\n- viewBox：坐标系的区域。\n- refX，refY：在viewBox内的基准点，绘制时此点在直线端点上。\n- markerUnits：标记大小的基准，有两个值，即strokeWidth（线的宽度）和userSpaceOnUse（线前端的大小）。\n- markerWidth，markerHeight：标识的大小。\n- orient：绘制方向，可设定为auto（自动确认方向）和角度值。\n- id：标识的id号。\n\n这是定位的属性如下：\n\n- marker-start：路径起点处。\n- marker-mid：路径中间端点处。\n- marker-end：路径终点处。\n\n绘制带原点和箭头的直线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n\n      <defs>\n        //先定义一个圆点\n        <marker id=\"markerCircle\" markerWidth=\"8\" markerHeight=\"8\" refx=\"5\" refy=\"5\">\n          <circle cx=\"5\" cy=\"5\" r=\"3\" style=\"stroke: none; fill:#000000;\"/>\n        </marker>\n        //先定义一个箭头\n        <marker id=\"markerArrow\" markerWidth=\"13\" markerHeight=\"13\" refx=\"2\" refy=\"6\" orient=\"auto\">\n          <path d=\"M2,2 L2,11 L10,6 L2,2\" style=\"fill: #000000;\" />\n        </marker>\n      </defs>\n\n      //然后画直线\n      <line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"50\"  stroke=\"red\" stroke-width=\"1\" marker-end=\"url(#markerArrow)\"  />\n      \n      <path d=\"M100,10 L150,10 L150,60\"\n          style=\"stroke: #6666ff; stroke-width: 1px; fill: none;\n                 marker-start: url(#markerCircle);\n                 marker-mid: url(#markerCircle);\n                 marker-end: url(#markerArrow) \"\n          />\n</svg>\n```\n\n##### 9. 滤镜\n\n滤镜（filter）能使图形更具有艺术效果。对源图形使用滤镜能修改其显示结果。但是，滤镜不会改变源图形的数学参数，只是将其渲染后传给显示设备。\n\n滤镜的标签为<filter>，和标记<marker>一样，也是在<defs>中定义的。滤镜的种类很多，例如：feMorphology、feGaussianBlur、feFlood等等，还有定义光源的滤镜feDistantLight、fePointLight、feSqotLight，都是以fe开头的。\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n      //先定义一个滤镜\n      <defs>\n        <filter id=\"GaussianBlur\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n        </filter>\n      </defs>\n      //定义一个矩形\n      <rect x=\"300\" y=\"100\" width=\"150\" height=\"100\" style=\"fill:blue; filter:url(#GaussianBlur)\" />\n</svg>\n```\n\n属性说明：\n\n- in是使用滤镜的对象，此处是源图形SourceGraphic。\n- stdDeviation是高斯模糊唯一的参数，数值越大，模糊程度越高。\n\n##### 9. 渐变\n\nSVG中有线性渐变<linearGradient>和放射性渐变<radialGradient>。渐变也是定义在<defs>标签中的。\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n        //先定义一个渐变\n        <defs>\n          <linearGradient id=\"Gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stop-color=\"#F00\" />\n            <stop offset=\"100%\" stop-color=\"green\" />\n          </linearGradient>\n        </defs>\n        //定义一个矩形\n        <rect x=\"300\" y=\"100\" width=\"150\" height=\"100\" style=\"fill:url(#Gradient)\" />\n    </svg>\n```\n\nx1、y1、x2、y2定义渐变的方向，此处是水平渐变。将x1、y1、x2、y2设置为0%、0%、0%、100%则是垂直渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。\n\n## 三、安装和使用\n\nD3是一个javascript函数库，所以并不需要安装，它只有一个文件，在HTML中引用即可。\n\n#### 第一个程序\n\n```html\n<html> \n  <head> \n        <meta charset=\"utf-8\"> \n        <title>HelloWorld</title> \n  </head> \n    <body> \n        <p>用D3来更改hello world</p>\n        <span>1</span>\n        <span>2</span>\n        <script src=\"d3.js\"></script>\n        <script type=\"text/javascript\">\n        var span = d3.select('body')\n                    .selectAll('span')\n                    .text('hello world')\n\n        // 修改标签的颜色和字体大小\n        span.style('color','green')\n            .style('font-size','30px')\n        </script>\n    </body> \n</html>\n```\n\n上面的代码是先将选中的元素赋值给变量span，然后通过变量span来改变样式，这样使代码更整洁。D3能够连续不断地调用函数（链式语法）。\n\n## 四、选择元素和绑定数据\n\n#### 选择元素\n\nD3中，用于选择元素的函数有两个：\n\n- d3.select()是选择所有指定元素的第一个\n- d3.selectAll()是选择指定元素的全部\n\n```javascript\nd3.select(\"body\") //选择body元素\nd3.select(\"#box\")  //选择id为box的元素\nd3.select(\".content\") //选择类为content的元素\nd3.selectAll(\"p\")  //选择所有的p元素\nd3.selectAll(\".content\")  //选择类为content的所有元素\nd3.selectAll(\"ul li\") //选择ul中所有的li元素\n```\n\n除了CSS选择器，还可以是已经被DOM选择的元素\n\n```javascript\nvar text = document.getElementById(\"text\")\nd3.select(text)\n//但是有个问题：如果选择的元素是多个，将其作为select的参数，不能达到选择其中一个元素的效果。\n//使用dom选择类为content的元素集\nvar content = document.getElementsByClassName(\"content\")\nd3.select(content)  //不能达到选择第一个元素的效果\nd3.selectAll(content)  //正确的方法\n```\n\n使用getElementById选择的元素要用select；使用getElementsByClassName选择的元素要用selectAll。但是尽量使用CSS选择器作为参数。\n\nD3支持连续调用函数的方法（链式语法）。for example：d3.select(\"body\").selectAll(\"p\")\n\n#### 选择集\n\nd3.select和d3.selectAll返回的对象称为选择集，添加、删除、设定网页中的元素，都得使用选择集。\n\n##### 1.查看状态\n\n- selection.empty()如果选择集为空，则返回true，如果不为空，返回false\n- selection.node()返回第一个非空元素，入股偶选择集为空则返回null\n- selection.size()返回选择集中的元素个数\n\n\n```html\n<a>1</a>\n<a>2</a>\n<a>3</a>\n\n<script type=\"text/javascript\">\n  var a = d3.select('body')\n  \t\t .selectAll('a')\n  console.log(a.empty())   //false\n  console.log(a.node())    //<a>1</a>\n  console.log(a.size())    //3\n</script>\n```\n\n##### 2. 设定和获取属性\n\n- selection.attr('name','value')\n\n  设置或获取选择集的属性，name是属性名，value是属性值，如果省略value，则返回当前属性值。\n\n  ```html\n  <div id=\"addCircle\"></div>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('#addCircle')\n    .append('svg')\n    .attr('width','300')\n    .attr('height','100')\n\n    svg.append('circle')\n      .attr('class','circle')\n      .attr('cx','50')\n      .attr('cy','50')\n      .attr('r','20')\n      .attr('fill','red')\n  </script>\n  ```\n\n- slection.classed('name','value')\n\n  设定或获取选择集的CSS类，name是类名，value是一个布尔值。布尔值表示是否开启。当布尔值是true的时候，开启对应的类，元素标签添加class=\"classname\"，当布尔值为false时，标签中不会添加任何属性。\n\n  ```html\n  <div id=\"addCircle\"></div>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('#addCircle')\n    .append('svg')\n    .attr('width','300')\n    .attr('height','100')\n\n    svg.append('circle')\n      .attr('cx','50')\n      .attr('cy','50')\n      .attr('r','20')\n      .attr('fill','red')\n      .attr('class','name size content')\n      .classed('name',true)  //开启name类\n      .classed('size',false)  //关闭size类\n      .classed({'name':false,'size':true})  //也可以这样写在对象里面\n      .classed('size content',false)  //也可以用空格分开写在一起\n\n  </script>\n  ```\n\n- selection.style('name','value')\n\n  设定或获取选择集的样式，name是样式名，value是样式值\n\n  ```html\n  <h1>my name is h1</h1>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('h1')\n    .style('color','pink')\n    .style('font-size','35px')\n    .style({\"text-decoration\":\"underline\",\"cursor\":\"pointer\"})\n  </script>\n  ```\n\n- selection.property('name','value')\n\n  设定或获取选择集的属性，name是属性名，value是属性值。有部分属性，不能用att()设定和获取，最典型的就是文本输入框的value属性，此属性值不会在不标签中显示。像复选框等，都需要用property()来获取属性。总之，不能用attr()来处理属性的，都可以考虑用property()。\n\n  ```html\n  <input type=\"text\" name=\"fullname\" id=\"inputName\" />\n  <script type=\"text/javascript\">\n    var inputValue = d3.select('body')\n    .select('#inputName')\n    // .property(\"value\")  //返回值是你输入的值\n    .property('value','d3')  //给文本框赋值 d3\n  </script>\n  ```\n\n- selection.text('name','value')\n\n  设定或获取选择集的文本内容。文本内容相当于DOM的innerText，不包括元素内部的标签。\n\n  ```html\n  <p id=\"pText\">薛<span>之</span>谦</p>\n  <script type=\"text/javascript\">\n    console.log(d3.select('body').select('#pText').text())   \n  </script>\n  ```\n\n- selection.html(value)\n\n  设定或获取选择集的内部HTML内容，相当于DOM的innerHTML，包括元素内部的标签。\n\n  ```html\n  <p id=\"pText\">薛<span>之</span>谦</p>\n  <script type=\"text/javascript\">\n    console.log(d3.select('body').select('#pText').html())        \n  </script>\n  ```\n\n####  添加、插入和删除\n\n- selection.append(name)\n\n  在选择集的末尾添加一个元素，name为元素名称。\n\n- selection.insert(\"name\",\"#before\")\n\n  在选择集中的指定元素之前插入一个元素，name是被插入的元素名称，before是CSS选择器名称。\n\n- selection.remove()\n\n  删除选择集中的元素。\n\n```html\n<p id=\"car\">car</p>\n<p id=\"plane\">plane</p>\n<p id=\"ship\">ship</p>\n<script type=\"text/javascript\">\n  var body = d3.select('body')  //选择body元素\n  body.append('p').text('train')  //在body中所有元素的末尾添加一个P标签\n  body.insert('p','#car').text('bike')  //在car元素前面添加一个P标签\n  var ship = d3.select('#ship')\n  .remove()  //删除ship\n</script>\n```\n\n#### 数据绑定\n\n将数据绑定到DOM上是D3的特色。d3.select和d3.selectAll返回元素的选择集，选择集上是没有数据的。数据绑定，就是使被选择元素里面“含有”数据。相关函数有两个：\n\n- selection.datum(value)选择集中的每一个元素都绑定相同的数据value。\n- selection.data(value,key)选择集中的每一个元素分别绑定数组value的每一项。key是一个键函数，用于指定绑定数组时的对应规则。\n\n##### 1. datum()的工作过程\n\ndatum()绑定数据的方法很简单，平时可能使用得比较少，但是某些时候还是能派上大用场的。直接上代码：\n\n```html\n<p class=\"num\">one</p>\n<p class=\"num\">two</p>\n<p class=\"num\">three</p>\n<script type=\"text/javascript\">\n  var num = d3.select('body')\n              .selectAll('.num')\n  num.datum(666)\n  console.log(num)\n  console.log(num.datum())  //没有参数 就返回——data——的属性值\n</script>\n```\n\n接下来我们去打望打望控制台。\n\nSO，datum()的工作过程就是对于选择集中的每一个元素，都增加一个—data—_属性，属性值为datum(value)的value值。如果参数是undefined和null，则不会创建_—data—属性。\n\n用绑定的数据替换原本的段落：\n\n```html\n<p class=\"num1\">原创歌手</p>\n<p class=\"num1\">段子手</p>\n<p class=\"num1\">深情的</p>\n<script type=\"text/javascript\">\n  var num1 = d3.select('body')\n  .selectAll('.num1')\n\n  num1.datum(\"薛之谦\")\n    .append('span')\n    .text(function(d,i){  //d代表数据 i代表index\n    return \"——\"+d+i+\"号\"\n  })\n  console.log(num1)\n</script>\n```\n\n所以，在被绑定数据的选择集中添加元素后，新元素会继承该数据。\n\n##### 2. data()的工作过程\n\ndata()能将数组各项分别绑定到选择集的各元素上，并且能指定绑定的规则。当数组长度与元素数量不一致时，data()也能够处理。当数组长度大于元素数量时，为多余数据预留元素位置，以便将来插入新元素；当数组长度小于元素数量时，能获取多余元素的位置，以遍将来删除。\n\n```html\n<p class=\"num2\">演员</p>\n<p class=\"num2\">刚刚好</p>\n<p class=\"num2\">认真的雪</p>\n<script type=\"text/javascript\">\n  var num2 = d3.select('body')\n  .selectAll('.num2')\n  var dataset = [\"绅士\",\"初学者\",\"未完成的歌\"]\n  num2.data(dataset)\n  console.log(num2)\n</script>\n```\n\n上面的数组长度和元素数量刚刚好，下面看看不等的情况。\n\nd3中，根据数组长度和元素数量的关系，分别把各种情况归纳如下：\n\n在读入数据进行可视化的过程中，被读入的数据都要绑定到选择集的元素上，没有绑定数据的元素是没有用的。\n\n- update：数组长度=元素数量。（则绑定数据的元素即将被更新）\n- enter：数组长度>元素数量。（则部分还不存在的元素即将进入可视化）\n- exit：数组长度<元素数量。（则多余的元素即将退出可视化）\n\n![845855-20161020140040467-439041801](845855-20161020140040467-439041801.png)\n\ndata()返回一个对象，对象里包含update部分，还有两个方法：enter()返回enter部分；一个是exit()返回exit部分。 \n\n```html\n<p class=\"n\">演员</p>\n<p class=\"n\">刚刚好</p>\n<p class=\"n\">认真的雪</p>\n<script type=\"text/javascript\">\n  var n = d3.select('body')\n  .selectAll('.n')\n  var dataset = [\"《绅士》\",\"《初学者》\",\"《未完成的歌》\",\"《一半》\",\"《意外》\"]\n\n  var update = n.data(dataset)\n  update.append('span')\n    .text(function(d,i){  //d代表数据 i代表index\n    return \"——\"+d\n  })\n  console.log(update)\n  console.log(update.enter())\n  console.log(update.exit())\n</script>\n```\n\n在控制台可以看到，d3已经为多余的数组“《一半》”和\"《意外》\"预留了位置，以备将来添加元素。enter部分仲，还有一个变量update，指向update部分。因为本次绑定中，没有多余的元素，所以exit部分没有内容。\n\n##### 3. 选择集的处理\n\n- enter的处理方法\n\n如果没有足够的元素，那么就添加元素。所以，通常从服务器读取数据后，网页中是没有与之对应的元素的。因此，有一个很常见的用法：选择一个空集，然后使用enter().append()的形式来添加足够数量的元素。\n\n```html\n<script type=\"text/javascript\">\n  var dataset2 = [10,20,30,40,50,60]\n  var body = d3.select('body')\n  body.selectAll('b')  //选择了一个空集\n    .data(dataset2)  //绑定数据\n    .enter()  //返回enter部分\n    .append('p')  //添加li标签\n    .text(function(d){\n    return d\n  })\n</script>\n```\n\n- exit的处理方法\n\n如果存在多余的元素，那就删除元素。使用remove()就可以删除元素。\n\n```html\n<div id=\"boxs\">\n  <p></p>\n  <p></p>\n  <p></p>\n  <p></p>\n  <p></p>\n</div>\n<script type=\"text/javascript\">\n  var dataset2 = [10,20,30]\n  var body = d3.select('body')\n  body.select('#boxs')  \n    .selectAll('p')\n    .data(dataset2)  //绑定数据\n    .text(function(d){\n    return d\n  })\n    .exit()  //返回exit部分\n    .remove()  //删除多余的2个P标签\n</script>\n```\n\n此处省略“处理模板、过略器、选择集的顺序、each()的应用、call()的应用。\n\n#### 柱形的制作（见详细代码）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>柱形图的制作</title>\n    <script src=\"d3.js\"></script>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n      //首先绘制SVG\n      var width = 600\n      var height = 200\n      var svg = d3.select('body')\n      .append('svg')\n      .attr('width',width)  //设置svg的属性\n      .attr('height',height)\n      //然后定义3个变量\n      //定义上下左右的边距\n      var padding = {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n      //矩形所占的宽度（包括空白）\n      var rectStep = 35\n      //矩形所占的宽度（不包括空白）\n      var rectWidth = 30\n\n      //定义数据\n      var dataset = [60,40,120,88,22,150,60,55]\n      //添加矩形\n      svg.selectAll('rect')\n        .data(dataset)\n        .enter()\n        .append('rect')\n        .attr(\"x\",function(d,i){  //设置矩形的X坐标\n        return padding.left + i * rectStep\n      })\n        .attr('y',function(d,i){  //设置矩形的Y坐标\n        return height - padding.bottom - d\n      })\n        .attr('width',rectWidth)  //设置每个矩形的宽度\n        .attr('height',function(d,i){  //设置每个矩形的高度\n        return d\n      })\n        .style({\"fill\":\"yellow\",\"stroke\":\"green\",\"stroke-width\":'3'})\n\n      //给矩形添加文字\n      var text = svg.selectAll('text')\n      .data(dataset)\n      .enter()\n      .append('text')\n      .style({\"fill\":\"#000\",\"font-size\":\"18px\",\"text-anchor\":\"middle\"})\n      .attr('x',function(d,i){\n        return padding.left + i * rectStep\n      })\n      .attr('y',function(d){\n        return height - padding.bottom - d\n      })\n      .attr('dx',rectWidth/2)\n      .attr('dy','20')\n      .text(function(d){\n        return d\n      })\n\n\n    </script>\n  </body>\n\n</html>\n```\n\n\n\n## 五、比例尺和坐标轴\n\n#### 比例尺\n\n##### 1. 为什么需要比例尺？\n\n上面制作了一个柱状图，绘图时，直接使用150给矩形的高度赋值，即矩形的宽度就是250个像素。所以，如果过数值过大或者过小，就会造成太小看不到，太大没有这么大的画布来画。\n\nSO，我们需要一种计算关系，能够将：某一区域的值映射到另一区域，其大小关系不变。这就是比例尺。\n\n##### 2. 有哪些比例尺？\n\n比例尺，很像数学中的函数。例如，对于一个一元二次函数（y=2x+1），有 x 和 y 两个未知数，当 x 的值确定时，y 的值也就确定了。\n\n在数学中，x 的范围被称为**定义域**，y 的范围被称为**值域**。\n\nD3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。\n\nD3 提供了多种比例尺，下面介绍最常用的两种。\n\n- 线性比例尺\n\n线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。\n\n假设有以下数组：\n\n```javascript\nvar dataset = [1.2, 2.3, 0.9, 1.5, 3.3]\n```\n\n现有要求如下：\n\n将dataset中最小的值，映射成0；将最大的值，映射成300。\n\n```javascript\nvar min = d3.min(dataset)\nvar max = d3.max(dataset)\nvar linear = d3.scale.linear()\n               .domain([min,max])\n               .range([0,300])\nlinear(0.9)  //返回0\nlinear(2.3)  //返回175\nlinear(3.3)  //返回300\n```\n\n其中，d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现：d3.max() 求数组的最大值；d3.min() 求数组最小值\n\n注意：d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，才有这样的用法：linear(0.9)。\n\n- 序数比例尺\n\n有时候，定义域和值域不一定是连续的。例如：\n\n```javascript\nvar index = [0,1,2,3,4]\nvar color = [\"red\",\"blue\",\"green\",\"yellow\",\"black\"]\n```\n\n我们希望0对应颜色red，1对应blue.....\n\n但是，这些值都是散离的，线性比例尺不适合，需要用到序数比例尺。\n\n```javascript\nvar ordinal = d3.scale.ordinal()\n                .domain(index)\n                .range(color)\nordinal(0)  //返回red\nordinal(2)  //返回green\nordinal(4)  //返回black\n```\n\n##### 3.给柱形图添加比例尺（见详细代码）\n\n#### 坐标轴\n\n##### 1. 坐标轴由什么构成\n\n坐标轴在 SVG 中是没有现成的图形元素的，需要用其他的元素组合构成。D3 提供了坐标轴的组件，如此在 SVG 画布中绘制坐标轴变得像添加一个普通元素一样简单。最终使其变为类似以下的形式：\n\n```html\n<g>\n<!-- 第一个刻度 -->\n<g>\n<line></line>   <!-- 第一个刻度的直线 -->\n<text></text>   <!-- 第一个刻度的文字 -->\n</g>\n<!-- 第二个刻度 -->\n<g>\n<line></line>   <!-- 第二个刻度的直线 -->\n<text></text>   <!-- 第二个刻度的文字 -->\n</g> \n...\n<!-- 坐标轴的轴线 -->\n<path></path>\n</g>\n```\n\n<g>标签是用于把相关元素进行组合的容器元素。如果需要手动添加这些元素就太麻烦了，为此，D3 提供了一个组件：d3.svg.axis()。\n\n##### 2. 定义坐标轴\n\n要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。\n\n```javascript\n//数据\nvar dataset = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ];\n//定义比例尺\nvar linear = d3.scale.linear()\n      .domain([0, d3.max(dataset)])\n      .range([0, 250]);\n\nvar axis = d3.svg.axis() //D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素\n     .scale(linear)      //指定比例尺\n     .orient(\"bottom\")   //指定刻度的方向 bottom 表示在坐标轴的下方显示\n     .ticks(7);          //指定刻度的数量\n```\n\n##### 3. 在SVG中添加坐标轴\n\n定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可。代码如下：\n\n```javascript\nsvg.append(\"g\").call(axis)\n```\n\n上面有一个 **call()** 函数，其参数是前面定义的坐标轴 axis。\n\n在 D3 中，call() 的参数是一个函数。调用之后，将当前的选择集作为参数传递给此函数。也就是说，以下两段代码是相等的。\n\n```javascript\nfunction foo(selection) {\n  selection.attr(\"name1\", \"value1\")\n      .attr(\"name2\", \"value2\")\n}\nfoo(d3.selectAll(\"div\"))\n//上面的代码等于\nd3.selectAll(\"div\").call(foo)\n```\n\n所以，\n\n```javascript\nsvg.append(\"g\").call(axis)\n//等于\naxis(svg.append(g))\n```\n\n##### 4. 设置坐标轴的样式和位置\n\n```html\n<style>\n.axis path,\n.axis line{\n    fill: none;\n    stroke: black;\n    shape-rendering: crispEdges;\n}\n\n.axis text {\n    font-family: sans-serif;\n    font-size: 11px;\n}\n</style>\n```\n\n分别定义了类 axis 下的 path、line、text 元素的样式。接下来，只需要将坐标轴的类设定为 axis 即可。坐标轴的位置，可以通过 transform 属性来设定。通常在添加元素的时候就一并设定，写成如下形式：\n\n```javascript\nsvg.append(\"g\")\n  .attr(\"class\",\"axis\")\n  .attr(\"transform\",\"translate(20,130)\")\n  .call(axis)\n```\n\n","source":"_posts/D3基础.md","raw":"---\ntitle: D3基础部分\ndate: 2017-01-08 22:29:28\ncategories: \n  - 技术\n  - D3.js\ntags: [D3]\ntoc: true\n---\n\n\n## 一、D3简介\n\n#### D3是什么？\n\n​    D3是一个javascript的函数库，用来做数据数据可视化的。\n\n#### D3的优势\n<!-- more -->\n- 数据能够与DOM绑定在一起\n- 数据转换和绘制是独立的\n- 代码简洁\n- 大量布局\n- 基于SVG，缩放不会损失精度\n\n\n\n ## 二、WEB前端开发基础\n\n#### 浏览器\n\nD3对IE8及以下版本支持不好，建议使用高版本的浏览器。D3可运行于IE9+、firefox、Chrome、Safari、Opera等浏览器。\n\n#### SVG\n\n指可缩放矢量图形，是用于描述二维矢量图形的一种图形格式。SVG使用XML格式来定义图形，除了IE8之前的版本外，绝大部分浏览器都支持SVG，可将SVG文本直接嵌入HTML中显示。D3十分适合在SVG中绘制图形。\n\n添加一组<svg>标签：\n\n```html\n<svg width=\"300\" height=\"300\" version=\"1.1\"></svg>\n```\n\nSVG中预定义了七种形状元素，分别为：矩形<rect>、圆形<circle>、椭圆<ellipse>、线段<line>、折线<polyline>、多边形<polygon>、路径<path>。\n\n##### 1. 矩形\n\n矩形的参数有6个。\n\n- x：矩形左上角的X坐标。\n- y：矩形左上角的Y坐标。\n- width：矩形的宽度。\n- height：矩形的高度。\n- rx；对于圆角矩形，指定椭圆在X方向的半径。\n- ry：对于圆角矩形，指定椭圆在Y方向的半径。\n\n绘制一个直角矩形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <rect x=\"20\" y=\"20\" width=\"200\" height=\"200\" style=\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"></rect>\n</svg>\n```\n\n绘制一个圆角矩形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n    <rect x=\"20\" y=\"20\" rx=\"20\" ry=\"20\" width=\"200\" height=\"200\" style=\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"></rect>\n</svg>\n```\n\n代码解释：\n\n- fill：定义矩形的填充颜色（rbg,颜色名或者16进制都可以）\n\n- stroke-width：矩形边框的宽度\n\n- stroke：矩形边框的颜色                 \n\n##### 2. 圆形和椭圆形\n\n圆形的参数是3个。\n\n- cx：圆心的X坐标。\n- cy：圆心的Y坐标。\n- r：圆的半径。\n\n椭圆的参数与圆形类似，只是半径分为水平半径和垂直半径。\n\n- cx：圆心的X坐标。\n- cy：圆心的Y坐标。\n- rx：椭圆的水平半径。\n- ry：椭圆的垂直半径。\n\n绘制圆形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <circle cx=\"50\" cy=\"50\" r=\"20\" style=\"fill:yellow; stroke:black; stroke-width:4\"></circle>\n</svg>\n```\n\n绘制椭圆\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <ellipse cx=\"120\" cy=\"100\" rx=\"100\" ry=\"80\" style=\"fill:yellow; stroke:black; stroke-width:4\"></ellipse>\n</svg>\n```\n##### 3. 线段\n\n线段的参数是起点和终点的坐标。\n\n- x1：起点的X坐标。\n- y1：起点的Y坐标。\n- x2：终点的X坐标。\n- y2：终点的Y坐标。\n\n绘制线段\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <line x1=\"120\" y1=\"20\" x2=\"100\" y2=\"80\" style=\"fill:yellow; stroke:black; stroke-width:4\"></line>\n</svg>\n```\n##### 4. 多边形和折线\n\n多边形和折线的参数是一样的，都只有一个points参数，这个参数的值是一系列的点坐标。不同之处是多边形会将终点和起点连接起来，而折线是不链接。\n\n绘制多边形\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <polygon points=\"100,20 20,90, 60,160 140,160 180,90\" style=\"fill:lawngreen; stroke:black; stroke-width:3\"></polygon>\n</svg>\n```\n\n绘制折线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" version=\"1.1\">\n  <polyline points=\"100,20 20,90, 60,160 140,160 180,90\" style=\"fill:white; stroke:black; stroke-width:3\"></polyline>\n</svg>\n```\n##### 5. 路径\n\n<path>标签的功能最丰富，前面举的栗子都可以用路径绘制出来。与折现类似，也是通过给出一系列点坐标来绘制。在D3中绘制地图时，会经常用到此标签。其用法：给出一个坐标点，在坐标点的前面添加一个英文字母，表示如何运动到此坐标点的。\n\n###### 5.1 绘制直线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"500\" version=\"1.1\">\n      <path d=\"M100,100 H500\n               M300,100 V500\n               M100,500 H500\n               M200,200 L100,400\n               M150,300 L250,400\n               M450,200 L350,400\n               M400,300 L500,400\"\n          style=\"stroke:black; stroke-width:3\" />\n    </svg>\n```\n\n英文字母按照功能可以分为5类，下面跟着栗子分别介绍。\n\n- 移动类\n\n  M  将画笔移动到指定坐标。\n\n- 直线类\n\n  L  画直线到指定坐标。\n\n  H  画水平直线到指定坐标。\n\n  V  画垂直直线到指定坐标。\n\n猜猜画出来是什么！\n\n###### 5.2 绘制三次贝塞尔曲线 \n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"200\" version=\"1.1\">\n   <path d=\"M30,100 C100,20 190,20 270,100 S400,180 450,100\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 曲线类\n\n  C  画3次贝塞尔曲线经两个指定控制点到达终点坐标。\n\n  S  与前一条三次贝塞尔曲线相连，第一个控制点为前一条曲线第二个控制点的对称点，只需输入第二个控制点和终点，即可绘制一个三次贝塞尔曲线。\n\nC后接三个坐标，分别为两个控制点和终点；S后面接两个坐标，分别为第二个控制点和终点。S会根据之前的曲线自动生成一个控制点。\n\n###### 5.3 绘制二次贝塞尔曲线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"200\" version=\"1.1\">\n   <path d=\"M30,100 Q190,20 270,100 T450,100\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 曲线类\n\n  Q  画二次贝塞尔曲线经一个指定控制点到达终点坐标。\n\n  T  与前一条二次贝塞尔曲线相连，控制点为前一条二次贝塞尔曲线控制点的对称点，只需输入终点，即可绘制一个二次贝塞尔曲线。\n\n\n###### 5.4 绘制弧线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"400\" version=\"1.1\">\n   <path d=\"M100,200 a200,150 0 1,0 150,-150 Z\" style=\"stroke:green; fill:yellow; stroke-width:3\" />\n</svg>\n```\n\n- 弧线类\n\n  A  画椭圆曲线到指定坐标。弧线是根据椭圆来绘制的，参数比较多：\n\n  A(rx（椭圆X方向的半轴大小）,ry（椭圆Y方向的半轴大小）x-axis-rotation（椭圆的X轴与水平轴顺时针方向的夹角）large-arc-flag（有两个值{1：大角度弧线 、0：小角度弧线},sweep-flag（有两个值{1：顺时针至终点、 0：逆时针至终点}）x（终点X坐标）,y（终点Y坐标）） )\n\n- 闭合类\n\n  Z  绘制一条直线连接终点和起点，用来封闭图形。\n\n其中，用了小写a标示相对坐标，当前画笔位置为（100，200），那么终点位置就为（100+150，200-150）=（250，50）。\n\n以上命令用大写字母表示坐标系中的绝对坐标，小写字母写标识相对坐标（相对于当前画笔所在点）。\n\n##### 6. 文字\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n      <text x=\"200\" y=\"50\" dx=\"-5\" dy=\"5\" rotate=\"180\" textLength=\"70\" style=\"fill:green; font-size:30px;\">这是<tspan style=\"fill:yellow\">文字</tspan></text>\n</svg>\n```\n\n- x：文字位置的X坐标\n- y：文字位置的Y坐标\n- dx：相对于当前位置在X方向上平移的距离（值为正则往右，负则往左）\n- dy：相对于当前位置在Y方向上平移的距离（值为正则往下，负则往上）\n- rotate：旋转角度（顺时针为正，逆时针为负）\n- textLength：文字的显示长度（不足则拉长，足则压缩）\n\n#####  7. 样式\n\nSVG支持使用CSS选择器给元素定义样式。\n\n- fill：填充色（rbg,颜色名或者16进制都可以）\n- stroke：边框的颜色 \n- stroke-width：边框的宽度\n- stroke-linecap：线头端点的样式，butt、round（圆角）、square（直角）。\n- stroke-dasharray：虚线的样式，例如：stroke-dasharray=\"10,10\" stroke-dasharray=\"15,15\" stroke-dasharray=\"20,10,5,5,5,15\"。\n\n##### 8. 标记\n\n标记（marker）是SVG中一个重要的概念，能帖服于<path>、<line>等元素上。标记<marker>写在<defs></defs>中，defs用于定义可重复利用的图形元素。\n\n<marker>标签的属性和意义：\n\n- viewBox：坐标系的区域。\n- refX，refY：在viewBox内的基准点，绘制时此点在直线端点上。\n- markerUnits：标记大小的基准，有两个值，即strokeWidth（线的宽度）和userSpaceOnUse（线前端的大小）。\n- markerWidth，markerHeight：标识的大小。\n- orient：绘制方向，可设定为auto（自动确认方向）和角度值。\n- id：标识的id号。\n\n这是定位的属性如下：\n\n- marker-start：路径起点处。\n- marker-mid：路径中间端点处。\n- marker-end：路径终点处。\n\n绘制带原点和箭头的直线\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n\n      <defs>\n        //先定义一个圆点\n        <marker id=\"markerCircle\" markerWidth=\"8\" markerHeight=\"8\" refx=\"5\" refy=\"5\">\n          <circle cx=\"5\" cy=\"5\" r=\"3\" style=\"stroke: none; fill:#000000;\"/>\n        </marker>\n        //先定义一个箭头\n        <marker id=\"markerArrow\" markerWidth=\"13\" markerHeight=\"13\" refx=\"2\" refy=\"6\" orient=\"auto\">\n          <path d=\"M2,2 L2,11 L10,6 L2,2\" style=\"fill: #000000;\" />\n        </marker>\n      </defs>\n\n      //然后画直线\n      <line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"50\"  stroke=\"red\" stroke-width=\"1\" marker-end=\"url(#markerArrow)\"  />\n      \n      <path d=\"M100,10 L150,10 L150,60\"\n          style=\"stroke: #6666ff; stroke-width: 1px; fill: none;\n                 marker-start: url(#markerCircle);\n                 marker-mid: url(#markerCircle);\n                 marker-end: url(#markerArrow) \"\n          />\n</svg>\n```\n\n##### 9. 滤镜\n\n滤镜（filter）能使图形更具有艺术效果。对源图形使用滤镜能修改其显示结果。但是，滤镜不会改变源图形的数学参数，只是将其渲染后传给显示设备。\n\n滤镜的标签为<filter>，和标记<marker>一样，也是在<defs>中定义的。滤镜的种类很多，例如：feMorphology、feGaussianBlur、feFlood等等，还有定义光源的滤镜feDistantLight、fePointLight、feSqotLight，都是以fe开头的。\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n      //先定义一个滤镜\n      <defs>\n        <filter id=\"GaussianBlur\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n        </filter>\n      </defs>\n      //定义一个矩形\n      <rect x=\"300\" y=\"100\" width=\"150\" height=\"100\" style=\"fill:blue; filter:url(#GaussianBlur)\" />\n</svg>\n```\n\n属性说明：\n\n- in是使用滤镜的对象，此处是源图形SourceGraphic。\n- stdDeviation是高斯模糊唯一的参数，数值越大，模糊程度越高。\n\n##### 9. 渐变\n\nSVG中有线性渐变<linearGradient>和放射性渐变<radialGradient>。渐变也是定义在<defs>标签中的。\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"200\" version=\"1.1\">\n        //先定义一个渐变\n        <defs>\n          <linearGradient id=\"Gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stop-color=\"#F00\" />\n            <stop offset=\"100%\" stop-color=\"green\" />\n          </linearGradient>\n        </defs>\n        //定义一个矩形\n        <rect x=\"300\" y=\"100\" width=\"150\" height=\"100\" style=\"fill:url(#Gradient)\" />\n    </svg>\n```\n\nx1、y1、x2、y2定义渐变的方向，此处是水平渐变。将x1、y1、x2、y2设置为0%、0%、0%、100%则是垂直渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。\n\n## 三、安装和使用\n\nD3是一个javascript函数库，所以并不需要安装，它只有一个文件，在HTML中引用即可。\n\n#### 第一个程序\n\n```html\n<html> \n  <head> \n        <meta charset=\"utf-8\"> \n        <title>HelloWorld</title> \n  </head> \n    <body> \n        <p>用D3来更改hello world</p>\n        <span>1</span>\n        <span>2</span>\n        <script src=\"d3.js\"></script>\n        <script type=\"text/javascript\">\n        var span = d3.select('body')\n                    .selectAll('span')\n                    .text('hello world')\n\n        // 修改标签的颜色和字体大小\n        span.style('color','green')\n            .style('font-size','30px')\n        </script>\n    </body> \n</html>\n```\n\n上面的代码是先将选中的元素赋值给变量span，然后通过变量span来改变样式，这样使代码更整洁。D3能够连续不断地调用函数（链式语法）。\n\n## 四、选择元素和绑定数据\n\n#### 选择元素\n\nD3中，用于选择元素的函数有两个：\n\n- d3.select()是选择所有指定元素的第一个\n- d3.selectAll()是选择指定元素的全部\n\n```javascript\nd3.select(\"body\") //选择body元素\nd3.select(\"#box\")  //选择id为box的元素\nd3.select(\".content\") //选择类为content的元素\nd3.selectAll(\"p\")  //选择所有的p元素\nd3.selectAll(\".content\")  //选择类为content的所有元素\nd3.selectAll(\"ul li\") //选择ul中所有的li元素\n```\n\n除了CSS选择器，还可以是已经被DOM选择的元素\n\n```javascript\nvar text = document.getElementById(\"text\")\nd3.select(text)\n//但是有个问题：如果选择的元素是多个，将其作为select的参数，不能达到选择其中一个元素的效果。\n//使用dom选择类为content的元素集\nvar content = document.getElementsByClassName(\"content\")\nd3.select(content)  //不能达到选择第一个元素的效果\nd3.selectAll(content)  //正确的方法\n```\n\n使用getElementById选择的元素要用select；使用getElementsByClassName选择的元素要用selectAll。但是尽量使用CSS选择器作为参数。\n\nD3支持连续调用函数的方法（链式语法）。for example：d3.select(\"body\").selectAll(\"p\")\n\n#### 选择集\n\nd3.select和d3.selectAll返回的对象称为选择集，添加、删除、设定网页中的元素，都得使用选择集。\n\n##### 1.查看状态\n\n- selection.empty()如果选择集为空，则返回true，如果不为空，返回false\n- selection.node()返回第一个非空元素，入股偶选择集为空则返回null\n- selection.size()返回选择集中的元素个数\n\n\n```html\n<a>1</a>\n<a>2</a>\n<a>3</a>\n\n<script type=\"text/javascript\">\n  var a = d3.select('body')\n  \t\t .selectAll('a')\n  console.log(a.empty())   //false\n  console.log(a.node())    //<a>1</a>\n  console.log(a.size())    //3\n</script>\n```\n\n##### 2. 设定和获取属性\n\n- selection.attr('name','value')\n\n  设置或获取选择集的属性，name是属性名，value是属性值，如果省略value，则返回当前属性值。\n\n  ```html\n  <div id=\"addCircle\"></div>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('#addCircle')\n    .append('svg')\n    .attr('width','300')\n    .attr('height','100')\n\n    svg.append('circle')\n      .attr('class','circle')\n      .attr('cx','50')\n      .attr('cy','50')\n      .attr('r','20')\n      .attr('fill','red')\n  </script>\n  ```\n\n- slection.classed('name','value')\n\n  设定或获取选择集的CSS类，name是类名，value是一个布尔值。布尔值表示是否开启。当布尔值是true的时候，开启对应的类，元素标签添加class=\"classname\"，当布尔值为false时，标签中不会添加任何属性。\n\n  ```html\n  <div id=\"addCircle\"></div>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('#addCircle')\n    .append('svg')\n    .attr('width','300')\n    .attr('height','100')\n\n    svg.append('circle')\n      .attr('cx','50')\n      .attr('cy','50')\n      .attr('r','20')\n      .attr('fill','red')\n      .attr('class','name size content')\n      .classed('name',true)  //开启name类\n      .classed('size',false)  //关闭size类\n      .classed({'name':false,'size':true})  //也可以这样写在对象里面\n      .classed('size content',false)  //也可以用空格分开写在一起\n\n  </script>\n  ```\n\n- selection.style('name','value')\n\n  设定或获取选择集的样式，name是样式名，value是样式值\n\n  ```html\n  <h1>my name is h1</h1>\n  <script type=\"text/javascript\">\n    var svg = d3.select('body')\n    .select('h1')\n    .style('color','pink')\n    .style('font-size','35px')\n    .style({\"text-decoration\":\"underline\",\"cursor\":\"pointer\"})\n  </script>\n  ```\n\n- selection.property('name','value')\n\n  设定或获取选择集的属性，name是属性名，value是属性值。有部分属性，不能用att()设定和获取，最典型的就是文本输入框的value属性，此属性值不会在不标签中显示。像复选框等，都需要用property()来获取属性。总之，不能用attr()来处理属性的，都可以考虑用property()。\n\n  ```html\n  <input type=\"text\" name=\"fullname\" id=\"inputName\" />\n  <script type=\"text/javascript\">\n    var inputValue = d3.select('body')\n    .select('#inputName')\n    // .property(\"value\")  //返回值是你输入的值\n    .property('value','d3')  //给文本框赋值 d3\n  </script>\n  ```\n\n- selection.text('name','value')\n\n  设定或获取选择集的文本内容。文本内容相当于DOM的innerText，不包括元素内部的标签。\n\n  ```html\n  <p id=\"pText\">薛<span>之</span>谦</p>\n  <script type=\"text/javascript\">\n    console.log(d3.select('body').select('#pText').text())   \n  </script>\n  ```\n\n- selection.html(value)\n\n  设定或获取选择集的内部HTML内容，相当于DOM的innerHTML，包括元素内部的标签。\n\n  ```html\n  <p id=\"pText\">薛<span>之</span>谦</p>\n  <script type=\"text/javascript\">\n    console.log(d3.select('body').select('#pText').html())        \n  </script>\n  ```\n\n####  添加、插入和删除\n\n- selection.append(name)\n\n  在选择集的末尾添加一个元素，name为元素名称。\n\n- selection.insert(\"name\",\"#before\")\n\n  在选择集中的指定元素之前插入一个元素，name是被插入的元素名称，before是CSS选择器名称。\n\n- selection.remove()\n\n  删除选择集中的元素。\n\n```html\n<p id=\"car\">car</p>\n<p id=\"plane\">plane</p>\n<p id=\"ship\">ship</p>\n<script type=\"text/javascript\">\n  var body = d3.select('body')  //选择body元素\n  body.append('p').text('train')  //在body中所有元素的末尾添加一个P标签\n  body.insert('p','#car').text('bike')  //在car元素前面添加一个P标签\n  var ship = d3.select('#ship')\n  .remove()  //删除ship\n</script>\n```\n\n#### 数据绑定\n\n将数据绑定到DOM上是D3的特色。d3.select和d3.selectAll返回元素的选择集，选择集上是没有数据的。数据绑定，就是使被选择元素里面“含有”数据。相关函数有两个：\n\n- selection.datum(value)选择集中的每一个元素都绑定相同的数据value。\n- selection.data(value,key)选择集中的每一个元素分别绑定数组value的每一项。key是一个键函数，用于指定绑定数组时的对应规则。\n\n##### 1. datum()的工作过程\n\ndatum()绑定数据的方法很简单，平时可能使用得比较少，但是某些时候还是能派上大用场的。直接上代码：\n\n```html\n<p class=\"num\">one</p>\n<p class=\"num\">two</p>\n<p class=\"num\">three</p>\n<script type=\"text/javascript\">\n  var num = d3.select('body')\n              .selectAll('.num')\n  num.datum(666)\n  console.log(num)\n  console.log(num.datum())  //没有参数 就返回——data——的属性值\n</script>\n```\n\n接下来我们去打望打望控制台。\n\nSO，datum()的工作过程就是对于选择集中的每一个元素，都增加一个—data—_属性，属性值为datum(value)的value值。如果参数是undefined和null，则不会创建_—data—属性。\n\n用绑定的数据替换原本的段落：\n\n```html\n<p class=\"num1\">原创歌手</p>\n<p class=\"num1\">段子手</p>\n<p class=\"num1\">深情的</p>\n<script type=\"text/javascript\">\n  var num1 = d3.select('body')\n  .selectAll('.num1')\n\n  num1.datum(\"薛之谦\")\n    .append('span')\n    .text(function(d,i){  //d代表数据 i代表index\n    return \"——\"+d+i+\"号\"\n  })\n  console.log(num1)\n</script>\n```\n\n所以，在被绑定数据的选择集中添加元素后，新元素会继承该数据。\n\n##### 2. data()的工作过程\n\ndata()能将数组各项分别绑定到选择集的各元素上，并且能指定绑定的规则。当数组长度与元素数量不一致时，data()也能够处理。当数组长度大于元素数量时，为多余数据预留元素位置，以便将来插入新元素；当数组长度小于元素数量时，能获取多余元素的位置，以遍将来删除。\n\n```html\n<p class=\"num2\">演员</p>\n<p class=\"num2\">刚刚好</p>\n<p class=\"num2\">认真的雪</p>\n<script type=\"text/javascript\">\n  var num2 = d3.select('body')\n  .selectAll('.num2')\n  var dataset = [\"绅士\",\"初学者\",\"未完成的歌\"]\n  num2.data(dataset)\n  console.log(num2)\n</script>\n```\n\n上面的数组长度和元素数量刚刚好，下面看看不等的情况。\n\nd3中，根据数组长度和元素数量的关系，分别把各种情况归纳如下：\n\n在读入数据进行可视化的过程中，被读入的数据都要绑定到选择集的元素上，没有绑定数据的元素是没有用的。\n\n- update：数组长度=元素数量。（则绑定数据的元素即将被更新）\n- enter：数组长度>元素数量。（则部分还不存在的元素即将进入可视化）\n- exit：数组长度<元素数量。（则多余的元素即将退出可视化）\n\n![845855-20161020140040467-439041801](845855-20161020140040467-439041801.png)\n\ndata()返回一个对象，对象里包含update部分，还有两个方法：enter()返回enter部分；一个是exit()返回exit部分。 \n\n```html\n<p class=\"n\">演员</p>\n<p class=\"n\">刚刚好</p>\n<p class=\"n\">认真的雪</p>\n<script type=\"text/javascript\">\n  var n = d3.select('body')\n  .selectAll('.n')\n  var dataset = [\"《绅士》\",\"《初学者》\",\"《未完成的歌》\",\"《一半》\",\"《意外》\"]\n\n  var update = n.data(dataset)\n  update.append('span')\n    .text(function(d,i){  //d代表数据 i代表index\n    return \"——\"+d\n  })\n  console.log(update)\n  console.log(update.enter())\n  console.log(update.exit())\n</script>\n```\n\n在控制台可以看到，d3已经为多余的数组“《一半》”和\"《意外》\"预留了位置，以备将来添加元素。enter部分仲，还有一个变量update，指向update部分。因为本次绑定中，没有多余的元素，所以exit部分没有内容。\n\n##### 3. 选择集的处理\n\n- enter的处理方法\n\n如果没有足够的元素，那么就添加元素。所以，通常从服务器读取数据后，网页中是没有与之对应的元素的。因此，有一个很常见的用法：选择一个空集，然后使用enter().append()的形式来添加足够数量的元素。\n\n```html\n<script type=\"text/javascript\">\n  var dataset2 = [10,20,30,40,50,60]\n  var body = d3.select('body')\n  body.selectAll('b')  //选择了一个空集\n    .data(dataset2)  //绑定数据\n    .enter()  //返回enter部分\n    .append('p')  //添加li标签\n    .text(function(d){\n    return d\n  })\n</script>\n```\n\n- exit的处理方法\n\n如果存在多余的元素，那就删除元素。使用remove()就可以删除元素。\n\n```html\n<div id=\"boxs\">\n  <p></p>\n  <p></p>\n  <p></p>\n  <p></p>\n  <p></p>\n</div>\n<script type=\"text/javascript\">\n  var dataset2 = [10,20,30]\n  var body = d3.select('body')\n  body.select('#boxs')  \n    .selectAll('p')\n    .data(dataset2)  //绑定数据\n    .text(function(d){\n    return d\n  })\n    .exit()  //返回exit部分\n    .remove()  //删除多余的2个P标签\n</script>\n```\n\n此处省略“处理模板、过略器、选择集的顺序、each()的应用、call()的应用。\n\n#### 柱形的制作（见详细代码）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>柱形图的制作</title>\n    <script src=\"d3.js\"></script>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n      //首先绘制SVG\n      var width = 600\n      var height = 200\n      var svg = d3.select('body')\n      .append('svg')\n      .attr('width',width)  //设置svg的属性\n      .attr('height',height)\n      //然后定义3个变量\n      //定义上下左右的边距\n      var padding = {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n      //矩形所占的宽度（包括空白）\n      var rectStep = 35\n      //矩形所占的宽度（不包括空白）\n      var rectWidth = 30\n\n      //定义数据\n      var dataset = [60,40,120,88,22,150,60,55]\n      //添加矩形\n      svg.selectAll('rect')\n        .data(dataset)\n        .enter()\n        .append('rect')\n        .attr(\"x\",function(d,i){  //设置矩形的X坐标\n        return padding.left + i * rectStep\n      })\n        .attr('y',function(d,i){  //设置矩形的Y坐标\n        return height - padding.bottom - d\n      })\n        .attr('width',rectWidth)  //设置每个矩形的宽度\n        .attr('height',function(d,i){  //设置每个矩形的高度\n        return d\n      })\n        .style({\"fill\":\"yellow\",\"stroke\":\"green\",\"stroke-width\":'3'})\n\n      //给矩形添加文字\n      var text = svg.selectAll('text')\n      .data(dataset)\n      .enter()\n      .append('text')\n      .style({\"fill\":\"#000\",\"font-size\":\"18px\",\"text-anchor\":\"middle\"})\n      .attr('x',function(d,i){\n        return padding.left + i * rectStep\n      })\n      .attr('y',function(d){\n        return height - padding.bottom - d\n      })\n      .attr('dx',rectWidth/2)\n      .attr('dy','20')\n      .text(function(d){\n        return d\n      })\n\n\n    </script>\n  </body>\n\n</html>\n```\n\n\n\n## 五、比例尺和坐标轴\n\n#### 比例尺\n\n##### 1. 为什么需要比例尺？\n\n上面制作了一个柱状图，绘图时，直接使用150给矩形的高度赋值，即矩形的宽度就是250个像素。所以，如果过数值过大或者过小，就会造成太小看不到，太大没有这么大的画布来画。\n\nSO，我们需要一种计算关系，能够将：某一区域的值映射到另一区域，其大小关系不变。这就是比例尺。\n\n##### 2. 有哪些比例尺？\n\n比例尺，很像数学中的函数。例如，对于一个一元二次函数（y=2x+1），有 x 和 y 两个未知数，当 x 的值确定时，y 的值也就确定了。\n\n在数学中，x 的范围被称为**定义域**，y 的范围被称为**值域**。\n\nD3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。\n\nD3 提供了多种比例尺，下面介绍最常用的两种。\n\n- 线性比例尺\n\n线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。\n\n假设有以下数组：\n\n```javascript\nvar dataset = [1.2, 2.3, 0.9, 1.5, 3.3]\n```\n\n现有要求如下：\n\n将dataset中最小的值，映射成0；将最大的值，映射成300。\n\n```javascript\nvar min = d3.min(dataset)\nvar max = d3.max(dataset)\nvar linear = d3.scale.linear()\n               .domain([min,max])\n               .range([0,300])\nlinear(0.9)  //返回0\nlinear(2.3)  //返回175\nlinear(3.3)  //返回300\n```\n\n其中，d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现：d3.max() 求数组的最大值；d3.min() 求数组最小值\n\n注意：d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，才有这样的用法：linear(0.9)。\n\n- 序数比例尺\n\n有时候，定义域和值域不一定是连续的。例如：\n\n```javascript\nvar index = [0,1,2,3,4]\nvar color = [\"red\",\"blue\",\"green\",\"yellow\",\"black\"]\n```\n\n我们希望0对应颜色red，1对应blue.....\n\n但是，这些值都是散离的，线性比例尺不适合，需要用到序数比例尺。\n\n```javascript\nvar ordinal = d3.scale.ordinal()\n                .domain(index)\n                .range(color)\nordinal(0)  //返回red\nordinal(2)  //返回green\nordinal(4)  //返回black\n```\n\n##### 3.给柱形图添加比例尺（见详细代码）\n\n#### 坐标轴\n\n##### 1. 坐标轴由什么构成\n\n坐标轴在 SVG 中是没有现成的图形元素的，需要用其他的元素组合构成。D3 提供了坐标轴的组件，如此在 SVG 画布中绘制坐标轴变得像添加一个普通元素一样简单。最终使其变为类似以下的形式：\n\n```html\n<g>\n<!-- 第一个刻度 -->\n<g>\n<line></line>   <!-- 第一个刻度的直线 -->\n<text></text>   <!-- 第一个刻度的文字 -->\n</g>\n<!-- 第二个刻度 -->\n<g>\n<line></line>   <!-- 第二个刻度的直线 -->\n<text></text>   <!-- 第二个刻度的文字 -->\n</g> \n...\n<!-- 坐标轴的轴线 -->\n<path></path>\n</g>\n```\n\n<g>标签是用于把相关元素进行组合的容器元素。如果需要手动添加这些元素就太麻烦了，为此，D3 提供了一个组件：d3.svg.axis()。\n\n##### 2. 定义坐标轴\n\n要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。\n\n```javascript\n//数据\nvar dataset = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ];\n//定义比例尺\nvar linear = d3.scale.linear()\n      .domain([0, d3.max(dataset)])\n      .range([0, 250]);\n\nvar axis = d3.svg.axis() //D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素\n     .scale(linear)      //指定比例尺\n     .orient(\"bottom\")   //指定刻度的方向 bottom 表示在坐标轴的下方显示\n     .ticks(7);          //指定刻度的数量\n```\n\n##### 3. 在SVG中添加坐标轴\n\n定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可。代码如下：\n\n```javascript\nsvg.append(\"g\").call(axis)\n```\n\n上面有一个 **call()** 函数，其参数是前面定义的坐标轴 axis。\n\n在 D3 中，call() 的参数是一个函数。调用之后，将当前的选择集作为参数传递给此函数。也就是说，以下两段代码是相等的。\n\n```javascript\nfunction foo(selection) {\n  selection.attr(\"name1\", \"value1\")\n      .attr(\"name2\", \"value2\")\n}\nfoo(d3.selectAll(\"div\"))\n//上面的代码等于\nd3.selectAll(\"div\").call(foo)\n```\n\n所以，\n\n```javascript\nsvg.append(\"g\").call(axis)\n//等于\naxis(svg.append(g))\n```\n\n##### 4. 设置坐标轴的样式和位置\n\n```html\n<style>\n.axis path,\n.axis line{\n    fill: none;\n    stroke: black;\n    shape-rendering: crispEdges;\n}\n\n.axis text {\n    font-family: sans-serif;\n    font-size: 11px;\n}\n</style>\n```\n\n分别定义了类 axis 下的 path、line、text 元素的样式。接下来，只需要将坐标轴的类设定为 axis 即可。坐标轴的位置，可以通过 transform 属性来设定。通常在添加元素的时候就一并设定，写成如下形式：\n\n```javascript\nsvg.append(\"g\")\n  .attr(\"class\",\"axis\")\n  .attr(\"transform\",\"translate(20,130)\")\n  .call(axis)\n```\n\n","slug":"D3基础","published":1,"updated":"2017-02-18T10:00:06.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4h000k24uu09uy5n7w","content":"<h2 id=\"一、D3简介\"><a href=\"#一、D3简介\" class=\"headerlink\" title=\"一、D3简介\"></a>一、D3简介</h2><h4 id=\"D3是什么？\"><a href=\"#D3是什么？\" class=\"headerlink\" title=\"D3是什么？\"></a>D3是什么？</h4><p>​    D3是一个javascript的函数库，用来做数据数据可视化的。</p>\n<h4 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h4><a id=\"more\"></a>\n<ul>\n<li>数据能够与DOM绑定在一起</li>\n<li>数据转换和绘制是独立的</li>\n<li>代码简洁</li>\n<li>大量布局</li>\n<li>基于SVG，缩放不会损失精度</li>\n</ul>\n<h2 id=\"二、WEB前端开发基础\"><a href=\"#二、WEB前端开发基础\" class=\"headerlink\" title=\"二、WEB前端开发基础\"></a>二、WEB前端开发基础</h2><h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>D3对IE8及以下版本支持不好，建议使用高版本的浏览器。D3可运行于IE9+、firefox、Chrome、Safari、Opera等浏览器。</p>\n<h4 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h4><p>指可缩放矢量图形，是用于描述二维矢量图形的一种图形格式。SVG使用XML格式来定义图形，除了IE8之前的版本外，绝大部分浏览器都支持SVG，可将SVG文本直接嵌入HTML中显示。D3十分适合在SVG中绘制图形。</p>\n<p>添加一组<svg>标签：</svg></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>SVG中预定义了七种形状元素，分别为：矩形<rect></rect>、圆形<circle></circle>、椭圆<ellipse></ellipse>、线段<line></line>、折线<polyline></polyline>、多边形<polygon></polygon>、路径<path></path>。</p>\n<h5 id=\"1-矩形\"><a href=\"#1-矩形\" class=\"headerlink\" title=\"1. 矩形\"></a>1. 矩形</h5><p>矩形的参数有6个。</p>\n<ul>\n<li>x：矩形左上角的X坐标。</li>\n<li>y：矩形左上角的Y坐标。</li>\n<li>width：矩形的宽度。</li>\n<li>height：矩形的高度。</li>\n<li>rx；对于圆角矩形，指定椭圆在X方向的半径。</li>\n<li>ry：对于圆角矩形，指定椭圆在Y方向的半径。</li>\n</ul>\n<p>绘制一个直角矩形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制一个圆角矩形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">rx</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">ry</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<ul>\n<li><p>fill：定义矩形的填充颜色（rbg,颜色名或者16进制都可以）</p>\n</li>\n<li><p>stroke-width：矩形边框的宽度</p>\n</li>\n<li><p>stroke：矩形边框的颜色                 </p>\n</li>\n</ul>\n<h5 id=\"2-圆形和椭圆形\"><a href=\"#2-圆形和椭圆形\" class=\"headerlink\" title=\"2. 圆形和椭圆形\"></a>2. 圆形和椭圆形</h5><p>圆形的参数是3个。</p>\n<ul>\n<li>cx：圆心的X坐标。</li>\n<li>cy：圆心的Y坐标。</li>\n<li>r：圆的半径。</li>\n</ul>\n<p>椭圆的参数与圆形类似，只是半径分为水平半径和垂直半径。</p>\n<ul>\n<li>cx：圆心的X坐标。</li>\n<li>cy：圆心的Y坐标。</li>\n<li>rx：椭圆的水平半径。</li>\n<li>ry：椭圆的垂直半径。</li>\n</ul>\n<p>绘制圆形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制椭圆</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ellipse</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">rx</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">ry</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ellipse</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-线段\"><a href=\"#3-线段\" class=\"headerlink\" title=\"3. 线段\"></a>3. 线段</h5><p>线段的参数是起点和终点的坐标。</p>\n<ul>\n<li>x1：起点的X坐标。</li>\n<li>y1：起点的Y坐标。</li>\n<li>x2：终点的X坐标。</li>\n<li>y2：终点的Y坐标。</li>\n</ul>\n<p>绘制线段</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"4-多边形和折线\"><a href=\"#4-多边形和折线\" class=\"headerlink\" title=\"4. 多边形和折线\"></a>4. 多边形和折线</h5><p>多边形和折线的参数是一样的，都只有一个points参数，这个参数的值是一系列的点坐标。不同之处是多边形会将终点和起点连接起来，而折线是不链接。</p>\n<p>绘制多边形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"100,20 20,90, 60,160 140,160 180,90\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:lawngreen; stroke:black; stroke-width:3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制折线</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"100,20 20,90, 60,160 140,160 180,90\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:white; stroke:black; stroke-width:3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"5-路径\"><a href=\"#5-路径\" class=\"headerlink\" title=\"5. 路径\"></a>5. 路径</h5><p><path></path>标签的功能最丰富，前面举的栗子都可以用路径绘制出来。与折现类似，也是通过给出一系列点坐标来绘制。在D3中绘制地图时，会经常用到此标签。其用法：给出一个坐标点，在坐标点的前面添加一个英文字母，表示如何运动到此坐标点的。</p>\n<h6 id=\"5-1-绘制直线\"><a href=\"#5-1-绘制直线\" class=\"headerlink\" title=\"5.1 绘制直线\"></a>5.1 绘制直线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,100 H500</span></span></div><div class=\"line\">               M300,100 V500</div><div class=\"line\">               M100,500 H500</div><div class=\"line\">               M200,200 L100,400</div><div class=\"line\">               M150,300 L250,400</div><div class=\"line\">               M450,200 L350,400</div><div class=\"line\">               M400,300 L500,400\"</div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:black; stroke-width:3\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>英文字母按照功能可以分为5类，下面跟着栗子分别介绍。</p>\n<ul>\n<li><p>移动类</p>\n<p>M  将画笔移动到指定坐标。</p>\n</li>\n<li><p>直线类</p>\n<p>L  画直线到指定坐标。</p>\n<p>H  画水平直线到指定坐标。</p>\n<p>V  画垂直直线到指定坐标。</p>\n</li>\n</ul>\n<p>猜猜画出来是什么！</p>\n<h6 id=\"5-2-绘制三次贝塞尔曲线\"><a href=\"#5-2-绘制三次贝塞尔曲线\" class=\"headerlink\" title=\"5.2 绘制三次贝塞尔曲线\"></a>5.2 绘制三次贝塞尔曲线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M30,100 C100,20 190,20 270,100 S400,180 450,100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>曲线类</p>\n<p>C  画3次贝塞尔曲线经两个指定控制点到达终点坐标。</p>\n<p>S  与前一条三次贝塞尔曲线相连，第一个控制点为前一条曲线第二个控制点的对称点，只需输入第二个控制点和终点，即可绘制一个三次贝塞尔曲线。</p>\n</li>\n</ul>\n<p>C后接三个坐标，分别为两个控制点和终点；S后面接两个坐标，分别为第二个控制点和终点。S会根据之前的曲线自动生成一个控制点。</p>\n<h6 id=\"5-3-绘制二次贝塞尔曲线\"><a href=\"#5-3-绘制二次贝塞尔曲线\" class=\"headerlink\" title=\"5.3 绘制二次贝塞尔曲线\"></a>5.3 绘制二次贝塞尔曲线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M30,100 Q190,20 270,100 T450,100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>曲线类</p>\n<p>Q  画二次贝塞尔曲线经一个指定控制点到达终点坐标。</p>\n<p>T  与前一条二次贝塞尔曲线相连，控制点为前一条二次贝塞尔曲线控制点的对称点，只需输入终点，即可绘制一个二次贝塞尔曲线。</p>\n</li>\n</ul>\n<h6 id=\"5-4-绘制弧线\"><a href=\"#5-4-绘制弧线\" class=\"headerlink\" title=\"5.4 绘制弧线\"></a>5.4 绘制弧线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,200 a200,150 0 1,0 150,-150 Z\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>弧线类</p>\n<p>A  画椭圆曲线到指定坐标。弧线是根据椭圆来绘制的，参数比较多：</p>\n<p>A(rx（椭圆X方向的半轴大小）,ry（椭圆Y方向的半轴大小）x-axis-rotation（椭圆的X轴与水平轴顺时针方向的夹角）large-arc-flag（有两个值{1：大角度弧线 、0：小角度弧线},sweep-flag（有两个值{1：顺时针至终点、 0：逆时针至终点}）x（终点X坐标）,y（终点Y坐标）） )</p>\n</li>\n<li><p>闭合类</p>\n<p>Z  绘制一条直线连接终点和起点，用来封闭图形。</p>\n</li>\n</ul>\n<p>其中，用了小写a标示相对坐标，当前画笔位置为（100，200），那么终点位置就为（100+150，200-150）=（250，50）。</p>\n<p>以上命令用大写字母表示坐标系中的绝对坐标，小写字母写标识相对坐标（相对于当前画笔所在点）。</p>\n<h5 id=\"6-文字\"><a href=\"#6-文字\" class=\"headerlink\" title=\"6. 文字\"></a>6. 文字</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">x</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">dx</span>=<span class=\"string\">\"-5\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">rotate</span>=<span class=\"string\">\"180\"</span> <span class=\"attr\">textLength</span>=<span class=\"string\">\"70\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:green; font-size:30px;\"</span>&gt;</span>这是<span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow\"</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>x：文字位置的X坐标</li>\n<li>y：文字位置的Y坐标</li>\n<li>dx：相对于当前位置在X方向上平移的距离（值为正则往右，负则往左）</li>\n<li>dy：相对于当前位置在Y方向上平移的距离（值为正则往下，负则往上）</li>\n<li>rotate：旋转角度（顺时针为正，逆时针为负）</li>\n<li>textLength：文字的显示长度（不足则拉长，足则压缩）</li>\n</ul>\n<h5 id=\"7-样式\"><a href=\"#7-样式\" class=\"headerlink\" title=\"7. 样式\"></a>7. 样式</h5><p>SVG支持使用CSS选择器给元素定义样式。</p>\n<ul>\n<li>fill：填充色（rbg,颜色名或者16进制都可以）</li>\n<li>stroke：边框的颜色 </li>\n<li>stroke-width：边框的宽度</li>\n<li>stroke-linecap：线头端点的样式，butt、round（圆角）、square（直角）。</li>\n<li>stroke-dasharray：虚线的样式，例如：stroke-dasharray=”10,10” stroke-dasharray=”15,15” stroke-dasharray=”20,10,5,5,5,15”。</li>\n</ul>\n<h5 id=\"8-标记\"><a href=\"#8-标记\" class=\"headerlink\" title=\"8. 标记\"></a>8. 标记</h5><p>标记（marker）是SVG中一个重要的概念，能帖服于<path></path>、<line></line>等元素上。标记<marker>写在<defs></defs>中，defs用于定义可重复利用的图形元素。</marker></p>\n<p><marker>标签的属性和意义：</marker></p>\n<ul>\n<li>viewBox：坐标系的区域。</li>\n<li>refX，refY：在viewBox内的基准点，绘制时此点在直线端点上。</li>\n<li>markerUnits：标记大小的基准，有两个值，即strokeWidth（线的宽度）和userSpaceOnUse（线前端的大小）。</li>\n<li>markerWidth，markerHeight：标识的大小。</li>\n<li>orient：绘制方向，可设定为auto（自动确认方向）和角度值。</li>\n<li>id：标识的id号。</li>\n</ul>\n<p>这是定位的属性如下：</p>\n<ul>\n<li>marker-start：路径起点处。</li>\n<li>marker-mid：路径中间端点处。</li>\n<li>marker-end：路径终点处。</li>\n</ul>\n<p>绘制带原点和箭头的直线</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        //先定义一个圆点</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">marker</span> <span class=\"attr\">id</span>=<span class=\"string\">\"markerCircle\"</span> <span class=\"attr\">markerWidth</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">markerHeight</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">refx</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">refy</span>=<span class=\"string\">\"5\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: none; fill:#000000;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">marker</span>&gt;</span></div><div class=\"line\">        //先定义一个箭头</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">marker</span> <span class=\"attr\">id</span>=<span class=\"string\">\"markerArrow\"</span> <span class=\"attr\">markerWidth</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">markerHeight</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">refx</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">refy</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">orient</span>=<span class=\"string\">\"auto\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M2,2 L2,11 L10,6 L2,2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill: #000000;\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">marker</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      //然后画直线</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"50\"</span>  <span class=\"attr\">stroke</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">marker-end</span>=<span class=\"string\">\"url(#markerArrow)\"</span>  /&gt;</span></div><div class=\"line\">      </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,10 L150,10 L150,60\"</span></span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #6666ff; stroke-width: 1px; fill: none;</span></div><div class=\"line\">                 marker-start: url(#markerCircle);</div><div class=\"line\">                 marker-mid: url(#markerCircle);</div><div class=\"line\">                 marker-end: url(#markerArrow) \"</div><div class=\"line\">          /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"9-滤镜\"><a href=\"#9-滤镜\" class=\"headerlink\" title=\"9. 滤镜\"></a>9. 滤镜</h5><p>滤镜（filter）能使图形更具有艺术效果。对源图形使用滤镜能修改其显示结果。但是，滤镜不会改变源图形的数学参数，只是将其渲染后传给显示设备。</p>\n<p>滤镜的标签为<filter>，和标记<marker>一样，也是在<defs>中定义的。滤镜的种类很多，例如：feMorphology、feGaussianBlur、feFlood等等，还有定义光源的滤镜feDistantLight、fePointLight、feSqotLight，都是以fe开头的。</defs></marker></filter></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      //先定义一个滤镜</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"GaussianBlur\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">feGaussianBlur</span> <span class=\"attr\">in</span>=<span class=\"string\">\"SourceGraphic\"</span> <span class=\"attr\">stdDeviation</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">      //定义一个矩形</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:blue; filter:url(#GaussianBlur)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>属性说明：</p>\n<ul>\n<li>in是使用滤镜的对象，此处是源图形SourceGraphic。</li>\n<li>stdDeviation是高斯模糊唯一的参数，数值越大，模糊程度越高。</li>\n</ul>\n<h5 id=\"9-渐变\"><a href=\"#9-渐变\" class=\"headerlink\" title=\"9. 渐变\"></a>9. 渐变</h5><p>SVG中有线性渐变<lineargradient>和放射性渐变<radialgradient>。渐变也是定义在<defs>标签中的。</defs></radialgradient></lineargradient></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">        //先定义一个渐变</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">linearGradient</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Gradient\"</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"0%\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#F00\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"green\"</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">linearGradient</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        //定义一个矩形</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:url(#Gradient)\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>x1、y1、x2、y2定义渐变的方向，此处是水平渐变。将x1、y1、x2、y2设置为0%、0%、0%、100%则是垂直渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。</p>\n<h2 id=\"三、安装和使用\"><a href=\"#三、安装和使用\" class=\"headerlink\" title=\"三、安装和使用\"></a>三、安装和使用</h2><p>D3是一个javascript函数库，所以并不需要安装，它只有一个文件，在HTML中引用即可。</p>\n<h4 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>用D3来更改hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> span = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">                    .selectAll(<span class=\"string\">'span'</span>)</div><div class=\"line\">                    .text(<span class=\"string\">'hello world'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 修改标签的颜色和字体大小</span></div><div class=\"line\">        span.style(<span class=\"string\">'color'</span>,<span class=\"string\">'green'</span>)</div><div class=\"line\">            .style(<span class=\"string\">'font-size'</span>,<span class=\"string\">'30px'</span>)</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面的代码是先将选中的元素赋值给变量span，然后通过变量span来改变样式，这样使代码更整洁。D3能够连续不断地调用函数（链式语法）。</p>\n<h2 id=\"四、选择元素和绑定数据\"><a href=\"#四、选择元素和绑定数据\" class=\"headerlink\" title=\"四、选择元素和绑定数据\"></a>四、选择元素和绑定数据</h2><h4 id=\"选择元素\"><a href=\"#选择元素\" class=\"headerlink\" title=\"选择元素\"></a>选择元素</h4><p>D3中，用于选择元素的函数有两个：</p>\n<ul>\n<li>d3.select()是选择所有指定元素的第一个</li>\n<li>d3.selectAll()是选择指定元素的全部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>) <span class=\"comment\">//选择body元素</span></div><div class=\"line\">d3.select(<span class=\"string\">\"#box\"</span>)  <span class=\"comment\">//选择id为box的元素</span></div><div class=\"line\">d3.select(<span class=\"string\">\".content\"</span>) <span class=\"comment\">//选择类为content的元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"p\"</span>)  <span class=\"comment\">//选择所有的p元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\".content\"</span>)  <span class=\"comment\">//选择类为content的所有元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"ul li\"</span>) <span class=\"comment\">//选择ul中所有的li元素</span></div></pre></td></tr></table></figure>\n<p>除了CSS选择器，还可以是已经被DOM选择的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">d3.select(text)</div><div class=\"line\"><span class=\"comment\">//但是有个问题：如果选择的元素是多个，将其作为select的参数，不能达到选择其中一个元素的效果。</span></div><div class=\"line\"><span class=\"comment\">//使用dom选择类为content的元素集</span></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"content\"</span>)</div><div class=\"line\">d3.select(content)  <span class=\"comment\">//不能达到选择第一个元素的效果</span></div><div class=\"line\">d3.selectAll(content)  <span class=\"comment\">//正确的方法</span></div></pre></td></tr></table></figure>\n<p>使用getElementById选择的元素要用select；使用getElementsByClassName选择的元素要用selectAll。但是尽量使用CSS选择器作为参数。</p>\n<p>D3支持连续调用函数的方法（链式语法）。for example：d3.select(“body”).selectAll(“p”)</p>\n<h4 id=\"选择集\"><a href=\"#选择集\" class=\"headerlink\" title=\"选择集\"></a>选择集</h4><p>d3.select和d3.selectAll返回的对象称为选择集，添加、删除、设定网页中的元素，都得使用选择集。</p>\n<h5 id=\"1-查看状态\"><a href=\"#1-查看状态\" class=\"headerlink\" title=\"1.查看状态\"></a>1.查看状态</h5><ul>\n<li>selection.empty()如果选择集为空，则返回true，如果不为空，返回false</li>\n<li>selection.node()返回第一个非空元素，入股偶选择集为空则返回null</li>\n<li>selection.size()返回选择集中的元素个数</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> a = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  \t\t .selectAll(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.empty())   <span class=\"comment\">//false</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.node())    <span class=\"comment\">//&lt;a&gt;1&lt;/a&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.size())    <span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-设定和获取属性\"><a href=\"#2-设定和获取属性\" class=\"headerlink\" title=\"2. 设定和获取属性\"></a>2. 设定和获取属性</h5><ul>\n<li><p>selection.attr(‘name’,’value’)</p>\n<p>设置或获取选择集的属性，name是属性名，value是属性值，如果省略value，则返回当前属性值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addCircle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#addCircle'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>,<span class=\"string\">'300'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>,<span class=\"string\">'100'</span>)</div><div class=\"line\"></div><div class=\"line\">  svg.append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>,<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cx'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cy'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'fill'</span>,<span class=\"string\">'red'</span>)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>slection.classed(‘name’,’value’)</p>\n<p>设定或获取选择集的CSS类，name是类名，value是一个布尔值。布尔值表示是否开启。当布尔值是true的时候，开启对应的类，元素标签添加class=”classname”，当布尔值为false时，标签中不会添加任何属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addCircle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#addCircle'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>,<span class=\"string\">'300'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>,<span class=\"string\">'100'</span>)</div><div class=\"line\"></div><div class=\"line\">  svg.append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cx'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cy'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'fill'</span>,<span class=\"string\">'red'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>,<span class=\"string\">'name size content'</span>)</div><div class=\"line\">    .classed(<span class=\"string\">'name'</span>,<span class=\"literal\">true</span>)  <span class=\"comment\">//开启name类</span></div><div class=\"line\">    .classed(<span class=\"string\">'size'</span>,<span class=\"literal\">false</span>)  <span class=\"comment\">//关闭size类</span></div><div class=\"line\">    .classed(&#123;<span class=\"string\">'name'</span>:<span class=\"literal\">false</span>,<span class=\"string\">'size'</span>:<span class=\"literal\">true</span>&#125;)  <span class=\"comment\">//也可以这样写在对象里面</span></div><div class=\"line\">    .classed(<span class=\"string\">'size content'</span>,<span class=\"literal\">false</span>)  <span class=\"comment\">//也可以用空格分开写在一起</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.style(‘name’,’value’)</p>\n<p>设定或获取选择集的样式，name是样式名，value是样式值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>my name is h1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'h1'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'color'</span>,<span class=\"string\">'pink'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'font-size'</span>,<span class=\"string\">'35px'</span>)</div><div class=\"line\">  .style(&#123;<span class=\"string\">\"text-decoration\"</span>:<span class=\"string\">\"underline\"</span>,<span class=\"string\">\"cursor\"</span>:<span class=\"string\">\"pointer\"</span>&#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.property(‘name’,’value’)</p>\n<p>设定或获取选择集的属性，name是属性名，value是属性值。有部分属性，不能用att()设定和获取，最典型的就是文本输入框的value属性，此属性值不会在不标签中显示。像复选框等，都需要用property()来获取属性。总之，不能用attr()来处理属性的，都可以考虑用property()。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fullname\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inputName\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> inputValue = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#inputName'</span>)</div><div class=\"line\">  <span class=\"comment\">// .property(\"value\")  //返回值是你输入的值</span></div><div class=\"line\">  .property(<span class=\"string\">'value'</span>,<span class=\"string\">'d3'</span>)  <span class=\"comment\">//给文本框赋值 d3</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.text(‘name’,’value’)</p>\n<p>设定或获取选择集的文本内容。文本内容相当于DOM的innerText，不包括元素内部的标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pText\"</span>&gt;</span>薛<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>之<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>谦<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(d3.select(<span class=\"string\">'body'</span>).select(<span class=\"string\">'#pText'</span>).text())   </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.html(value)</p>\n<p>设定或获取选择集的内部HTML内容，相当于DOM的innerHTML，包括元素内部的标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pText\"</span>&gt;</span>薛<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>之<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>谦<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(d3.select(<span class=\"string\">'body'</span>).select(<span class=\"string\">'#pText'</span>).html())        </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"添加、插入和删除\"><a href=\"#添加、插入和删除\" class=\"headerlink\" title=\"添加、插入和删除\"></a>添加、插入和删除</h4><ul>\n<li><p>selection.append(name)</p>\n<p>在选择集的末尾添加一个元素，name为元素名称。</p>\n</li>\n<li><p>selection.insert(“name”,”#before”)</p>\n<p>在选择集中的指定元素之前插入一个元素，name是被插入的元素名称，before是CSS选择器名称。</p>\n</li>\n<li><p>selection.remove()</p>\n<p>删除选择集中的元素。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"car\"</span>&gt;</span>car<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"plane\"</span>&gt;</span>plane<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ship\"</span>&gt;</span>ship<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)  <span class=\"comment\">//选择body元素</span></div><div class=\"line\">  body.append(<span class=\"string\">'p'</span>).text(<span class=\"string\">'train'</span>)  <span class=\"comment\">//在body中所有元素的末尾添加一个P标签</span></div><div class=\"line\">  body.insert(<span class=\"string\">'p'</span>,<span class=\"string\">'#car'</span>).text(<span class=\"string\">'bike'</span>)  <span class=\"comment\">//在car元素前面添加一个P标签</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ship = d3.select(<span class=\"string\">'#ship'</span>)</div><div class=\"line\">  .remove()  <span class=\"comment\">//删除ship</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><p>将数据绑定到DOM上是D3的特色。d3.select和d3.selectAll返回元素的选择集，选择集上是没有数据的。数据绑定，就是使被选择元素里面“含有”数据。相关函数有两个：</p>\n<ul>\n<li>selection.datum(value)选择集中的每一个元素都绑定相同的数据value。</li>\n<li>selection.data(value,key)选择集中的每一个元素分别绑定数组value的每一项。key是一个键函数，用于指定绑定数组时的对应规则。</li>\n</ul>\n<h5 id=\"1-datum-的工作过程\"><a href=\"#1-datum-的工作过程\" class=\"headerlink\" title=\"1. datum()的工作过程\"></a>1. datum()的工作过程</h5><p>datum()绑定数据的方法很简单，平时可能使用得比较少，但是某些时候还是能派上大用场的。直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> num = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">              .selectAll(<span class=\"string\">'.num'</span>)</div><div class=\"line\">  num.datum(<span class=\"number\">666</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num.datum())  <span class=\"comment\">//没有参数 就返回——data——的属性值</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>接下来我们去打望打望控制台。</p>\n<p>SO，datum()的工作过程就是对于选择集中的每一个元素，都增加一个—data—<em>属性，属性值为datum(value)的value值。如果参数是undefined和null，则不会创建</em>—data—属性。</p>\n<p>用绑定的数据替换原本的段落：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>原创歌手<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>段子手<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>深情的<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> num1 = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.num1'</span>)</div><div class=\"line\"></div><div class=\"line\">  num1.datum(<span class=\"string\">\"薛之谦\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">'span'</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//d代表数据 i代表index</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"——\"</span>+d+i+<span class=\"string\">\"号\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num1)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>所以，在被绑定数据的选择集中添加元素后，新元素会继承该数据。</p>\n<h5 id=\"2-data-的工作过程\"><a href=\"#2-data-的工作过程\" class=\"headerlink\" title=\"2. data()的工作过程\"></a>2. data()的工作过程</h5><p>data()能将数组各项分别绑定到选择集的各元素上，并且能指定绑定的规则。当数组长度与元素数量不一致时，data()也能够处理。当数组长度大于元素数量时，为多余数据预留元素位置，以便将来插入新元素；当数组长度小于元素数量时，能获取多余元素的位置，以遍将来删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>演员<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>刚刚好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>认真的雪<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> num2 = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.num2'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> dataset = [<span class=\"string\">\"绅士\"</span>,<span class=\"string\">\"初学者\"</span>,<span class=\"string\">\"未完成的歌\"</span>]</div><div class=\"line\">  num2.data(dataset)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num2)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面的数组长度和元素数量刚刚好，下面看看不等的情况。</p>\n<p>d3中，根据数组长度和元素数量的关系，分别把各种情况归纳如下：</p>\n<p>在读入数据进行可视化的过程中，被读入的数据都要绑定到选择集的元素上，没有绑定数据的元素是没有用的。</p>\n<ul>\n<li>update：数组长度=元素数量。（则绑定数据的元素即将被更新）</li>\n<li>enter：数组长度&gt;元素数量。（则部分还不存在的元素即将进入可视化）</li>\n<li>exit：数组长度&lt;元素数量。（则多余的元素即将退出可视化）</li>\n</ul>\n<p><img src=\"845855-20161020140040467-439041801.png\" alt=\"845855-20161020140040467-439041801\"></p>\n<p>data()返回一个对象，对象里包含update部分，还有两个方法：enter()返回enter部分；一个是exit()返回exit部分。 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>演员<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>刚刚好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>认真的雪<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> n = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.n'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> dataset = [<span class=\"string\">\"《绅士》\"</span>,<span class=\"string\">\"《初学者》\"</span>,<span class=\"string\">\"《未完成的歌》\"</span>,<span class=\"string\">\"《一半》\"</span>,<span class=\"string\">\"《意外》\"</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> update = n.data(dataset)</div><div class=\"line\">  update.append(<span class=\"string\">'span'</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//d代表数据 i代表index</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"——\"</span>+d</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update.enter())</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update.exit())</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在控制台可以看到，d3已经为多余的数组“《一半》”和”《意外》”预留了位置，以备将来添加元素。enter部分仲，还有一个变量update，指向update部分。因为本次绑定中，没有多余的元素，所以exit部分没有内容。</p>\n<h5 id=\"3-选择集的处理\"><a href=\"#3-选择集的处理\" class=\"headerlink\" title=\"3. 选择集的处理\"></a>3. 选择集的处理</h5><ul>\n<li>enter的处理方法</li>\n</ul>\n<p>如果没有足够的元素，那么就添加元素。所以，通常从服务器读取数据后，网页中是没有与之对应的元素的。因此，有一个很常见的用法：选择一个空集，然后使用enter().append()的形式来添加足够数量的元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> dataset2 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>]</div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  body.selectAll(<span class=\"string\">'b'</span>)  <span class=\"comment\">//选择了一个空集</span></div><div class=\"line\">    .data(dataset2)  <span class=\"comment\">//绑定数据</span></div><div class=\"line\">    .enter()  <span class=\"comment\">//返回enter部分</span></div><div class=\"line\">    .append(<span class=\"string\">'p'</span>)  <span class=\"comment\">//添加li标签</span></div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d</div><div class=\"line\">  &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>exit的处理方法</li>\n</ul>\n<p>如果存在多余的元素，那就删除元素。使用remove()就可以删除元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boxs\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">var</span> dataset2 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>]</div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  body.select(<span class=\"string\">'#boxs'</span>)  </div><div class=\"line\">    .selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\">    .data(dataset2)  <span class=\"comment\">//绑定数据</span></div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .exit()  <span class=\"comment\">//返回exit部分</span></div><div class=\"line\">    .remove()  <span class=\"comment\">//删除多余的2个P标签</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>此处省略“处理模板、过略器、选择集的顺序、each()的应用、call()的应用。</p>\n<h4 id=\"柱形的制作（见详细代码）\"><a href=\"#柱形的制作（见详细代码）\" class=\"headerlink\" title=\"柱形的制作（见详细代码）\"></a>柱形的制作（见详细代码）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>柱形图的制作<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      <span class=\"comment\">//首先绘制SVG</span></div><div class=\"line\">      <span class=\"keyword\">var</span> width = <span class=\"number\">600</span></div><div class=\"line\">      <span class=\"keyword\">var</span> height = <span class=\"number\">200</span></div><div class=\"line\">      <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">      .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>,width)  <span class=\"comment\">//设置svg的属性</span></div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>,height)</div><div class=\"line\">      <span class=\"comment\">//然后定义3个变量</span></div><div class=\"line\">      <span class=\"comment\">//定义上下左右的边距</span></div><div class=\"line\">      <span class=\"keyword\">var</span> padding = &#123;</div><div class=\"line\">        <span class=\"attr\">top</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">right</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">bottom</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">left</span>: <span class=\"number\">20</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//矩形所占的宽度（包括空白）</span></div><div class=\"line\">      <span class=\"keyword\">var</span> rectStep = <span class=\"number\">35</span></div><div class=\"line\">      <span class=\"comment\">//矩形所占的宽度（不包括空白）</span></div><div class=\"line\">      <span class=\"keyword\">var</span> rectWidth = <span class=\"number\">30</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//定义数据</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataset = [<span class=\"number\">60</span>,<span class=\"number\">40</span>,<span class=\"number\">120</span>,<span class=\"number\">88</span>,<span class=\"number\">22</span>,<span class=\"number\">150</span>,<span class=\"number\">60</span>,<span class=\"number\">55</span>]</div><div class=\"line\">      <span class=\"comment\">//添加矩形</span></div><div class=\"line\">      svg.selectAll(<span class=\"string\">'rect'</span>)</div><div class=\"line\">        .data(dataset)</div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">'rect'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置矩形的X坐标</span></div><div class=\"line\">        <span class=\"keyword\">return</span> padding.left + i * rectStep</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">'y'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置矩形的Y坐标</span></div><div class=\"line\">        <span class=\"keyword\">return</span> height - padding.bottom - d</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>,rectWidth)  <span class=\"comment\">//设置每个矩形的宽度</span></div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置每个矩形的高度</span></div><div class=\"line\">        <span class=\"keyword\">return</span> d</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .style(&#123;<span class=\"string\">\"fill\"</span>:<span class=\"string\">\"yellow\"</span>,<span class=\"string\">\"stroke\"</span>:<span class=\"string\">\"green\"</span>,<span class=\"string\">\"stroke-width\"</span>:<span class=\"string\">'3'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//给矩形添加文字</span></div><div class=\"line\">      <span class=\"keyword\">var</span> text = svg.selectAll(<span class=\"string\">'text'</span>)</div><div class=\"line\">      .data(dataset)</div><div class=\"line\">      .enter()</div><div class=\"line\">      .append(<span class=\"string\">'text'</span>)</div><div class=\"line\">      .style(&#123;<span class=\"string\">\"fill\"</span>:<span class=\"string\">\"#000\"</span>,<span class=\"string\">\"font-size\"</span>:<span class=\"string\">\"18px\"</span>,<span class=\"string\">\"text-anchor\"</span>:<span class=\"string\">\"middle\"</span>&#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'x'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> padding.left + i * rectStep</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'y'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height - padding.bottom - d</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'dx'</span>,rectWidth/<span class=\"number\">2</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'dy'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">      .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> d</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"五、比例尺和坐标轴\"><a href=\"#五、比例尺和坐标轴\" class=\"headerlink\" title=\"五、比例尺和坐标轴\"></a>五、比例尺和坐标轴</h2><h4 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h4><h5 id=\"1-为什么需要比例尺？\"><a href=\"#1-为什么需要比例尺？\" class=\"headerlink\" title=\"1. 为什么需要比例尺？\"></a>1. 为什么需要比例尺？</h5><p>上面制作了一个柱状图，绘图时，直接使用150给矩形的高度赋值，即矩形的宽度就是250个像素。所以，如果过数值过大或者过小，就会造成太小看不到，太大没有这么大的画布来画。</p>\n<p>SO，我们需要一种计算关系，能够将：某一区域的值映射到另一区域，其大小关系不变。这就是比例尺。</p>\n<h5 id=\"2-有哪些比例尺？\"><a href=\"#2-有哪些比例尺？\" class=\"headerlink\" title=\"2. 有哪些比例尺？\"></a>2. 有哪些比例尺？</h5><p>比例尺，很像数学中的函数。例如，对于一个一元二次函数（y=2x+1），有 x 和 y 两个未知数，当 x 的值确定时，y 的值也就确定了。</p>\n<p>在数学中，x 的范围被称为<strong>定义域</strong>，y 的范围被称为<strong>值域</strong>。</p>\n<p>D3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。</p>\n<p>D3 提供了多种比例尺，下面介绍最常用的两种。</p>\n<ul>\n<li>线性比例尺</li>\n</ul>\n<p>线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。</p>\n<p>假设有以下数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1.5</span>, <span class=\"number\">3.3</span>]</div></pre></td></tr></table></figure>\n<p>现有要求如下：</p>\n<p>将dataset中最小的值，映射成0；将最大的值，映射成300。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> min = d3.min(dataset)</div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(dataset)</div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">               .domain([min,max])</div><div class=\"line\">               .range([<span class=\"number\">0</span>,<span class=\"number\">300</span>])</div><div class=\"line\">linear(<span class=\"number\">0.9</span>)  <span class=\"comment\">//返回0</span></div><div class=\"line\">linear(<span class=\"number\">2.3</span>)  <span class=\"comment\">//返回175</span></div><div class=\"line\">linear(<span class=\"number\">3.3</span>)  <span class=\"comment\">//返回300</span></div></pre></td></tr></table></figure>\n<p>其中，d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现：d3.max() 求数组的最大值；d3.min() 求数组最小值</p>\n<p>注意：d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，才有这样的用法：linear(0.9)。</p>\n<ul>\n<li>序数比例尺</li>\n</ul>\n<p>有时候，定义域和值域不一定是连续的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> index = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> color = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>,<span class=\"string\">\"green\"</span>,<span class=\"string\">\"yellow\"</span>,<span class=\"string\">\"black\"</span>]</div></pre></td></tr></table></figure>\n<p>我们希望0对应颜色red，1对应blue…..</p>\n<p>但是，这些值都是散离的，线性比例尺不适合，需要用到序数比例尺。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ordinal = d3.scale.ordinal()</div><div class=\"line\">                .domain(index)</div><div class=\"line\">                .range(color)</div><div class=\"line\">ordinal(<span class=\"number\">0</span>)  <span class=\"comment\">//返回red</span></div><div class=\"line\">ordinal(<span class=\"number\">2</span>)  <span class=\"comment\">//返回green</span></div><div class=\"line\">ordinal(<span class=\"number\">4</span>)  <span class=\"comment\">//返回black</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-给柱形图添加比例尺（见详细代码）\"><a href=\"#3-给柱形图添加比例尺（见详细代码）\" class=\"headerlink\" title=\"3.给柱形图添加比例尺（见详细代码）\"></a>3.给柱形图添加比例尺（见详细代码）</h5><h4 id=\"坐标轴\"><a href=\"#坐标轴\" class=\"headerlink\" title=\"坐标轴\"></a>坐标轴</h4><h5 id=\"1-坐标轴由什么构成\"><a href=\"#1-坐标轴由什么构成\" class=\"headerlink\" title=\"1. 坐标轴由什么构成\"></a>1. 坐标轴由什么构成</h5><p>坐标轴在 SVG 中是没有现成的图形元素的，需要用其他的元素组合构成。D3 提供了坐标轴的组件，如此在 SVG 画布中绘制坐标轴变得像添加一个普通元素一样简单。最终使其变为类似以下的形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 第一个刻度 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第一个刻度的直线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第一个刻度的文字 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 第二个刻度 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第二个刻度的直线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第二个刻度的文字 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span> </div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">&lt;!-- 坐标轴的轴线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><g>标签是用于把相关元素进行组合的容器元素。如果需要手动添加这些元素就太麻烦了，为此，D3 提供了一个组件：d3.svg.axis()。</g></p>\n<h5 id=\"2-定义坐标轴\"><a href=\"#2-定义坐标轴\" class=\"headerlink\" title=\"2. 定义坐标轴\"></a>2. 定义坐标轴</h5><p>要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">2.5</span> , <span class=\"number\">2.1</span> , <span class=\"number\">1.7</span> , <span class=\"number\">1.3</span> , <span class=\"number\">0.9</span> ];</div><div class=\"line\"><span class=\"comment\">//定义比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">      .domain([<span class=\"number\">0</span>, d3.max(dataset)])</div><div class=\"line\">      .range([<span class=\"number\">0</span>, <span class=\"number\">250</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> axis = d3.svg.axis() <span class=\"comment\">//D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素</span></div><div class=\"line\">     .scale(linear)      <span class=\"comment\">//指定比例尺</span></div><div class=\"line\">     .orient(<span class=\"string\">\"bottom\"</span>)   <span class=\"comment\">//指定刻度的方向 bottom 表示在坐标轴的下方显示</span></div><div class=\"line\">     .ticks(<span class=\"number\">7</span>);          <span class=\"comment\">//指定刻度的数量</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-在SVG中添加坐标轴\"><a href=\"#3-在SVG中添加坐标轴\" class=\"headerlink\" title=\"3. 在SVG中添加坐标轴\"></a>3. 在SVG中添加坐标轴</h5><p>定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>).call(axis)</div></pre></td></tr></table></figure>\n<p>上面有一个 <strong>call()</strong> 函数，其参数是前面定义的坐标轴 axis。</p>\n<p>在 D3 中，call() 的参数是一个函数。调用之后，将当前的选择集作为参数传递给此函数。也就是说，以下两段代码是相等的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">selection</span>) </span>&#123;</div><div class=\"line\">  selection.attr(<span class=\"string\">\"name1\"</span>, <span class=\"string\">\"value1\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"name2\"</span>, <span class=\"string\">\"value2\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">foo(d3.selectAll(<span class=\"string\">\"div\"</span>))</div><div class=\"line\"><span class=\"comment\">//上面的代码等于</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).call(foo)</div></pre></td></tr></table></figure>\n<p>所以，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>).call(axis)</div><div class=\"line\"><span class=\"comment\">//等于</span></div><div class=\"line\">axis(svg.append(g))</div></pre></td></tr></table></figure>\n<h5 id=\"4-设置坐标轴的样式和位置\"><a href=\"#4-设置坐标轴的样式和位置\" class=\"headerlink\" title=\"4. 设置坐标轴的样式和位置\"></a>4. 设置坐标轴的样式和位置</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">path</span>,</div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">line</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">fill</span>: none;</div><div class=\"line\">    <span class=\"attribute\">stroke</span>: black;</div><div class=\"line\">    <span class=\"attribute\">shape-rendering</span>: crispEdges;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">text</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: sans-serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">11px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>分别定义了类 axis 下的 path、line、text 元素的样式。接下来，只需要将坐标轴的类设定为 axis 即可。坐标轴的位置，可以通过 transform 属性来设定。通常在添加元素的时候就一并设定，写成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"class\"</span>,<span class=\"string\">\"axis\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(20,130)\"</span>)</div><div class=\"line\">  .call(axis)</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"一、D3简介\"><a href=\"#一、D3简介\" class=\"headerlink\" title=\"一、D3简介\"></a>一、D3简介</h2><h4 id=\"D3是什么？\"><a href=\"#D3是什么？\" class=\"headerlink\" title=\"D3是什么？\"></a>D3是什么？</h4><p>​    D3是一个javascript的函数库，用来做数据数据可视化的。</p>\n<h4 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h4>","more":"<ul>\n<li>数据能够与DOM绑定在一起</li>\n<li>数据转换和绘制是独立的</li>\n<li>代码简洁</li>\n<li>大量布局</li>\n<li>基于SVG，缩放不会损失精度</li>\n</ul>\n<h2 id=\"二、WEB前端开发基础\"><a href=\"#二、WEB前端开发基础\" class=\"headerlink\" title=\"二、WEB前端开发基础\"></a>二、WEB前端开发基础</h2><h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>D3对IE8及以下版本支持不好，建议使用高版本的浏览器。D3可运行于IE9+、firefox、Chrome、Safari、Opera等浏览器。</p>\n<h4 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h4><p>指可缩放矢量图形，是用于描述二维矢量图形的一种图形格式。SVG使用XML格式来定义图形，除了IE8之前的版本外，绝大部分浏览器都支持SVG，可将SVG文本直接嵌入HTML中显示。D3十分适合在SVG中绘制图形。</p>\n<p>添加一组<svg>标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>SVG中预定义了七种形状元素，分别为：矩形<rect>、圆形<circle>、椭圆<ellipse>、线段<line>、折线<polyline>、多边形<polygon>、路径<path>。</p>\n<h5 id=\"1-矩形\"><a href=\"#1-矩形\" class=\"headerlink\" title=\"1. 矩形\"></a>1. 矩形</h5><p>矩形的参数有6个。</p>\n<ul>\n<li>x：矩形左上角的X坐标。</li>\n<li>y：矩形左上角的Y坐标。</li>\n<li>width：矩形的宽度。</li>\n<li>height：矩形的高度。</li>\n<li>rx；对于圆角矩形，指定椭圆在X方向的半径。</li>\n<li>ry：对于圆角矩形，指定椭圆在Y方向的半径。</li>\n</ul>\n<p>绘制一个直角矩形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制一个圆角矩形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">rx</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">ry</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:steelblue; stroke:blue; stroke-width:4; opacity:0.5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<ul>\n<li><p>fill：定义矩形的填充颜色（rbg,颜色名或者16进制都可以）</p>\n</li>\n<li><p>stroke-width：矩形边框的宽度</p>\n</li>\n<li><p>stroke：矩形边框的颜色                 </p>\n</li>\n</ul>\n<h5 id=\"2-圆形和椭圆形\"><a href=\"#2-圆形和椭圆形\" class=\"headerlink\" title=\"2. 圆形和椭圆形\"></a>2. 圆形和椭圆形</h5><p>圆形的参数是3个。</p>\n<ul>\n<li>cx：圆心的X坐标。</li>\n<li>cy：圆心的Y坐标。</li>\n<li>r：圆的半径。</li>\n</ul>\n<p>椭圆的参数与圆形类似，只是半径分为水平半径和垂直半径。</p>\n<ul>\n<li>cx：圆心的X坐标。</li>\n<li>cy：圆心的Y坐标。</li>\n<li>rx：椭圆的水平半径。</li>\n<li>ry：椭圆的垂直半径。</li>\n</ul>\n<p>绘制圆形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">circle</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制椭圆</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ellipse</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">rx</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">ry</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ellipse</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-线段\"><a href=\"#3-线段\" class=\"headerlink\" title=\"3. 线段\"></a>3. 线段</h5><p>线段的参数是起点和终点的坐标。</p>\n<ul>\n<li>x1：起点的X坐标。</li>\n<li>y1：起点的Y坐标。</li>\n<li>x2：终点的X坐标。</li>\n<li>y2：终点的Y坐标。</li>\n</ul>\n<p>绘制线段</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow; stroke:black; stroke-width:4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"4-多边形和折线\"><a href=\"#4-多边形和折线\" class=\"headerlink\" title=\"4. 多边形和折线\"></a>4. 多边形和折线</h5><p>多边形和折线的参数是一样的，都只有一个points参数，这个参数的值是一系列的点坐标。不同之处是多边形会将终点和起点连接起来，而折线是不链接。</p>\n<p>绘制多边形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">\"100,20 20,90, 60,160 140,160 180,90\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:lawngreen; stroke:black; stroke-width:3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polygon</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>绘制折线</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"100,20 20,90, 60,160 140,160 180,90\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:white; stroke:black; stroke-width:3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"5-路径\"><a href=\"#5-路径\" class=\"headerlink\" title=\"5. 路径\"></a>5. 路径</h5><p><path>标签的功能最丰富，前面举的栗子都可以用路径绘制出来。与折现类似，也是通过给出一系列点坐标来绘制。在D3中绘制地图时，会经常用到此标签。其用法：给出一个坐标点，在坐标点的前面添加一个英文字母，表示如何运动到此坐标点的。</p>\n<h6 id=\"5-1-绘制直线\"><a href=\"#5-1-绘制直线\" class=\"headerlink\" title=\"5.1 绘制直线\"></a>5.1 绘制直线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,100 H500</div><div class=\"line\">               M300,100 V500</div><div class=\"line\">               M100,500 H500</div><div class=\"line\">               M200,200 L100,400</div><div class=\"line\">               M150,300 L250,400</div><div class=\"line\">               M450,200 L350,400</div><div class=\"line\">               M400,300 L500,400\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:black; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>英文字母按照功能可以分为5类，下面跟着栗子分别介绍。</p>\n<ul>\n<li><p>移动类</p>\n<p>M  将画笔移动到指定坐标。</p>\n</li>\n<li><p>直线类</p>\n<p>L  画直线到指定坐标。</p>\n<p>H  画水平直线到指定坐标。</p>\n<p>V  画垂直直线到指定坐标。</p>\n</li>\n</ul>\n<p>猜猜画出来是什么！</p>\n<h6 id=\"5-2-绘制三次贝塞尔曲线\"><a href=\"#5-2-绘制三次贝塞尔曲线\" class=\"headerlink\" title=\"5.2 绘制三次贝塞尔曲线\"></a>5.2 绘制三次贝塞尔曲线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M30,100 C100,20 190,20 270,100 S400,180 450,100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>曲线类</p>\n<p>C  画3次贝塞尔曲线经两个指定控制点到达终点坐标。</p>\n<p>S  与前一条三次贝塞尔曲线相连，第一个控制点为前一条曲线第二个控制点的对称点，只需输入第二个控制点和终点，即可绘制一个三次贝塞尔曲线。</p>\n</li>\n</ul>\n<p>C后接三个坐标，分别为两个控制点和终点；S后面接两个坐标，分别为第二个控制点和终点。S会根据之前的曲线自动生成一个控制点。</p>\n<h6 id=\"5-3-绘制二次贝塞尔曲线\"><a href=\"#5-3-绘制二次贝塞尔曲线\" class=\"headerlink\" title=\"5.3 绘制二次贝塞尔曲线\"></a>5.3 绘制二次贝塞尔曲线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M30,100 Q190,20 270,100 T450,100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>曲线类</p>\n<p>Q  画二次贝塞尔曲线经一个指定控制点到达终点坐标。</p>\n<p>T  与前一条二次贝塞尔曲线相连，控制点为前一条二次贝塞尔曲线控制点的对称点，只需输入终点，即可绘制一个二次贝塞尔曲线。</p>\n</li>\n</ul>\n<h6 id=\"5-4-绘制弧线\"><a href=\"#5-4-绘制弧线\" class=\"headerlink\" title=\"5.4 绘制弧线\"></a>5.4 绘制弧线</h6><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,200 a200,150 0 1,0 150,-150 Z\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke:green; fill:yellow; stroke-width:3\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>弧线类</p>\n<p>A  画椭圆曲线到指定坐标。弧线是根据椭圆来绘制的，参数比较多：</p>\n<p>A(rx（椭圆X方向的半轴大小）,ry（椭圆Y方向的半轴大小）x-axis-rotation（椭圆的X轴与水平轴顺时针方向的夹角）large-arc-flag（有两个值{1：大角度弧线 、0：小角度弧线},sweep-flag（有两个值{1：顺时针至终点、 0：逆时针至终点}）x（终点X坐标）,y（终点Y坐标）） )</p>\n</li>\n<li><p>闭合类</p>\n<p>Z  绘制一条直线连接终点和起点，用来封闭图形。</p>\n</li>\n</ul>\n<p>其中，用了小写a标示相对坐标，当前画笔位置为（100，200），那么终点位置就为（100+150，200-150）=（250，50）。</p>\n<p>以上命令用大写字母表示坐标系中的绝对坐标，小写字母写标识相对坐标（相对于当前画笔所在点）。</p>\n<h5 id=\"6-文字\"><a href=\"#6-文字\" class=\"headerlink\" title=\"6. 文字\"></a>6. 文字</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">x</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">dx</span>=<span class=\"string\">\"-5\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">rotate</span>=<span class=\"string\">\"180\"</span> <span class=\"attr\">textLength</span>=<span class=\"string\">\"70\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:green; font-size:30px;\"</span>&gt;</span>这是<span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:yellow\"</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>x：文字位置的X坐标</li>\n<li>y：文字位置的Y坐标</li>\n<li>dx：相对于当前位置在X方向上平移的距离（值为正则往右，负则往左）</li>\n<li>dy：相对于当前位置在Y方向上平移的距离（值为正则往下，负则往上）</li>\n<li>rotate：旋转角度（顺时针为正，逆时针为负）</li>\n<li>textLength：文字的显示长度（不足则拉长，足则压缩）</li>\n</ul>\n<h5 id=\"7-样式\"><a href=\"#7-样式\" class=\"headerlink\" title=\"7. 样式\"></a>7. 样式</h5><p>SVG支持使用CSS选择器给元素定义样式。</p>\n<ul>\n<li>fill：填充色（rbg,颜色名或者16进制都可以）</li>\n<li>stroke：边框的颜色 </li>\n<li>stroke-width：边框的宽度</li>\n<li>stroke-linecap：线头端点的样式，butt、round（圆角）、square（直角）。</li>\n<li>stroke-dasharray：虚线的样式，例如：stroke-dasharray=”10,10” stroke-dasharray=”15,15” stroke-dasharray=”20,10,5,5,5,15”。</li>\n</ul>\n<h5 id=\"8-标记\"><a href=\"#8-标记\" class=\"headerlink\" title=\"8. 标记\"></a>8. 标记</h5><p>标记（marker）是SVG中一个重要的概念，能帖服于<path>、<line>等元素上。标记<marker>写在<defs></defs>中，defs用于定义可重复利用的图形元素。</p>\n<p><marker>标签的属性和意义：</p>\n<ul>\n<li>viewBox：坐标系的区域。</li>\n<li>refX，refY：在viewBox内的基准点，绘制时此点在直线端点上。</li>\n<li>markerUnits：标记大小的基准，有两个值，即strokeWidth（线的宽度）和userSpaceOnUse（线前端的大小）。</li>\n<li>markerWidth，markerHeight：标识的大小。</li>\n<li>orient：绘制方向，可设定为auto（自动确认方向）和角度值。</li>\n<li>id：标识的id号。</li>\n</ul>\n<p>这是定位的属性如下：</p>\n<ul>\n<li>marker-start：路径起点处。</li>\n<li>marker-mid：路径中间端点处。</li>\n<li>marker-end：路径终点处。</li>\n</ul>\n<p>绘制带原点和箭头的直线</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        //先定义一个圆点</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">marker</span> <span class=\"attr\">id</span>=<span class=\"string\">\"markerCircle\"</span> <span class=\"attr\">markerWidth</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">markerHeight</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">refx</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">refy</span>=<span class=\"string\">\"5\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: none; fill:#000000;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">marker</span>&gt;</span></div><div class=\"line\">        //先定义一个箭头</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">marker</span> <span class=\"attr\">id</span>=<span class=\"string\">\"markerArrow\"</span> <span class=\"attr\">markerWidth</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">markerHeight</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">refx</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">refy</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">orient</span>=<span class=\"string\">\"auto\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M2,2 L2,11 L10,6 L2,2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill: #000000;\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">marker</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      //然后画直线</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"50\"</span>  <span class=\"attr\">stroke</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">marker-end</span>=<span class=\"string\">\"url(#markerArrow)\"</span>  /&gt;</span></div><div class=\"line\">      </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M100,10 L150,10 L150,60\"</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #6666ff; stroke-width: 1px; fill: none;</div><div class=\"line\">                 marker-start: url(#markerCircle);</div><div class=\"line\">                 marker-mid: url(#markerCircle);</div><div class=\"line\">                 marker-end: url(#markerArrow) \"</span></div><div class=\"line\">          /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"9-滤镜\"><a href=\"#9-滤镜\" class=\"headerlink\" title=\"9. 滤镜\"></a>9. 滤镜</h5><p>滤镜（filter）能使图形更具有艺术效果。对源图形使用滤镜能修改其显示结果。但是，滤镜不会改变源图形的数学参数，只是将其渲染后传给显示设备。</p>\n<p>滤镜的标签为<filter>，和标记<marker>一样，也是在<defs>中定义的。滤镜的种类很多，例如：feMorphology、feGaussianBlur、feFlood等等，还有定义光源的滤镜feDistantLight、fePointLight、feSqotLight，都是以fe开头的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">      //先定义一个滤镜</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"GaussianBlur\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">feGaussianBlur</span> <span class=\"attr\">in</span>=<span class=\"string\">\"SourceGraphic\"</span> <span class=\"attr\">stdDeviation</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">      //定义一个矩形</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:blue; filter:url(#GaussianBlur)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>属性说明：</p>\n<ul>\n<li>in是使用滤镜的对象，此处是源图形SourceGraphic。</li>\n<li>stdDeviation是高斯模糊唯一的参数，数值越大，模糊程度越高。</li>\n</ul>\n<h5 id=\"9-渐变\"><a href=\"#9-渐变\" class=\"headerlink\" title=\"9. 渐变\"></a>9. 渐变</h5><p>SVG中有线性渐变<linearGradient>和放射性渐变<radialGradient>。渐变也是定义在<defs>标签中的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.1\"</span>&gt;</span></div><div class=\"line\">        //先定义一个渐变</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">linearGradient</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Gradient\"</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"0%\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#F00\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"green\"</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">linearGradient</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\">        //定义一个矩形</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:url(#Gradient)\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>x1、y1、x2、y2定义渐变的方向，此处是水平渐变。将x1、y1、x2、y2设置为0%、0%、0%、100%则是垂直渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。</p>\n<h2 id=\"三、安装和使用\"><a href=\"#三、安装和使用\" class=\"headerlink\" title=\"三、安装和使用\"></a>三、安装和使用</h2><p>D3是一个javascript函数库，所以并不需要安装，它只有一个文件，在HTML中引用即可。</p>\n<h4 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HelloWorld<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>用D3来更改hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">        <span class=\"keyword\">var</span> span = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">                    .selectAll(<span class=\"string\">'span'</span>)</div><div class=\"line\">                    .text(<span class=\"string\">'hello world'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 修改标签的颜色和字体大小</span></div><div class=\"line\">        span.style(<span class=\"string\">'color'</span>,<span class=\"string\">'green'</span>)</div><div class=\"line\">            .style(<span class=\"string\">'font-size'</span>,<span class=\"string\">'30px'</span>)</div><div class=\"line\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面的代码是先将选中的元素赋值给变量span，然后通过变量span来改变样式，这样使代码更整洁。D3能够连续不断地调用函数（链式语法）。</p>\n<h2 id=\"四、选择元素和绑定数据\"><a href=\"#四、选择元素和绑定数据\" class=\"headerlink\" title=\"四、选择元素和绑定数据\"></a>四、选择元素和绑定数据</h2><h4 id=\"选择元素\"><a href=\"#选择元素\" class=\"headerlink\" title=\"选择元素\"></a>选择元素</h4><p>D3中，用于选择元素的函数有两个：</p>\n<ul>\n<li>d3.select()是选择所有指定元素的第一个</li>\n<li>d3.selectAll()是选择指定元素的全部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>) <span class=\"comment\">//选择body元素</span></div><div class=\"line\">d3.select(<span class=\"string\">\"#box\"</span>)  <span class=\"comment\">//选择id为box的元素</span></div><div class=\"line\">d3.select(<span class=\"string\">\".content\"</span>) <span class=\"comment\">//选择类为content的元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"p\"</span>)  <span class=\"comment\">//选择所有的p元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\".content\"</span>)  <span class=\"comment\">//选择类为content的所有元素</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"ul li\"</span>) <span class=\"comment\">//选择ul中所有的li元素</span></div></pre></td></tr></table></figure>\n<p>除了CSS选择器，还可以是已经被DOM选择的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">d3.select(text)</div><div class=\"line\"><span class=\"comment\">//但是有个问题：如果选择的元素是多个，将其作为select的参数，不能达到选择其中一个元素的效果。</span></div><div class=\"line\"><span class=\"comment\">//使用dom选择类为content的元素集</span></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"content\"</span>)</div><div class=\"line\">d3.select(content)  <span class=\"comment\">//不能达到选择第一个元素的效果</span></div><div class=\"line\">d3.selectAll(content)  <span class=\"comment\">//正确的方法</span></div></pre></td></tr></table></figure>\n<p>使用getElementById选择的元素要用select；使用getElementsByClassName选择的元素要用selectAll。但是尽量使用CSS选择器作为参数。</p>\n<p>D3支持连续调用函数的方法（链式语法）。for example：d3.select(“body”).selectAll(“p”)</p>\n<h4 id=\"选择集\"><a href=\"#选择集\" class=\"headerlink\" title=\"选择集\"></a>选择集</h4><p>d3.select和d3.selectAll返回的对象称为选择集，添加、删除、设定网页中的元素，都得使用选择集。</p>\n<h5 id=\"1-查看状态\"><a href=\"#1-查看状态\" class=\"headerlink\" title=\"1.查看状态\"></a>1.查看状态</h5><ul>\n<li>selection.empty()如果选择集为空，则返回true，如果不为空，返回false</li>\n<li>selection.node()返回第一个非空元素，入股偶选择集为空则返回null</li>\n<li>selection.size()返回选择集中的元素个数</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> a = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  \t\t .selectAll(<span class=\"string\">'a'</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.empty())   <span class=\"comment\">//false</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.node())    <span class=\"comment\">//&lt;a&gt;1&lt;/a&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.size())    <span class=\"comment\">//3</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-设定和获取属性\"><a href=\"#2-设定和获取属性\" class=\"headerlink\" title=\"2. 设定和获取属性\"></a>2. 设定和获取属性</h5><ul>\n<li><p>selection.attr(‘name’,’value’)</p>\n<p>设置或获取选择集的属性，name是属性名，value是属性值，如果省略value，则返回当前属性值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addCircle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#addCircle'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>,<span class=\"string\">'300'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>,<span class=\"string\">'100'</span>)</div><div class=\"line\"></div><div class=\"line\">  svg.append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>,<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cx'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cy'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'fill'</span>,<span class=\"string\">'red'</span>)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>slection.classed(‘name’,’value’)</p>\n<p>设定或获取选择集的CSS类，name是类名，value是一个布尔值。布尔值表示是否开启。当布尔值是true的时候，开启对应的类，元素标签添加class=”classname”，当布尔值为false时，标签中不会添加任何属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addCircle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#addCircle'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>,<span class=\"string\">'300'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>,<span class=\"string\">'100'</span>)</div><div class=\"line\"></div><div class=\"line\">  svg.append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cx'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'cy'</span>,<span class=\"string\">'50'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'fill'</span>,<span class=\"string\">'red'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>,<span class=\"string\">'name size content'</span>)</div><div class=\"line\">    .classed(<span class=\"string\">'name'</span>,<span class=\"literal\">true</span>)  <span class=\"comment\">//开启name类</span></div><div class=\"line\">    .classed(<span class=\"string\">'size'</span>,<span class=\"literal\">false</span>)  <span class=\"comment\">//关闭size类</span></div><div class=\"line\">    .classed(&#123;<span class=\"string\">'name'</span>:<span class=\"literal\">false</span>,<span class=\"string\">'size'</span>:<span class=\"literal\">true</span>&#125;)  <span class=\"comment\">//也可以这样写在对象里面</span></div><div class=\"line\">    .classed(<span class=\"string\">'size content'</span>,<span class=\"literal\">false</span>)  <span class=\"comment\">//也可以用空格分开写在一起</span></div><div class=\"line\"></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.style(‘name’,’value’)</p>\n<p>设定或获取选择集的样式，name是样式名，value是样式值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>my name is h1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'h1'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'color'</span>,<span class=\"string\">'pink'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'font-size'</span>,<span class=\"string\">'35px'</span>)</div><div class=\"line\">  .style(&#123;<span class=\"string\">\"text-decoration\"</span>:<span class=\"string\">\"underline\"</span>,<span class=\"string\">\"cursor\"</span>:<span class=\"string\">\"pointer\"</span>&#125;)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.property(‘name’,’value’)</p>\n<p>设定或获取选择集的属性，name是属性名，value是属性值。有部分属性，不能用att()设定和获取，最典型的就是文本输入框的value属性，此属性值不会在不标签中显示。像复选框等，都需要用property()来获取属性。总之，不能用attr()来处理属性的，都可以考虑用property()。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fullname\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inputName\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> inputValue = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .select(<span class=\"string\">'#inputName'</span>)</div><div class=\"line\">  <span class=\"comment\">// .property(\"value\")  //返回值是你输入的值</span></div><div class=\"line\">  .property(<span class=\"string\">'value'</span>,<span class=\"string\">'d3'</span>)  <span class=\"comment\">//给文本框赋值 d3</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.text(‘name’,’value’)</p>\n<p>设定或获取选择集的文本内容。文本内容相当于DOM的innerText，不包括元素内部的标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pText\"</span>&gt;</span>薛<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>之<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>谦<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(d3.select(<span class=\"string\">'body'</span>).select(<span class=\"string\">'#pText'</span>).text())   </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>selection.html(value)</p>\n<p>设定或获取选择集的内部HTML内容，相当于DOM的innerHTML，包括元素内部的标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pText\"</span>&gt;</span>薛<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>之<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>谦<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(d3.select(<span class=\"string\">'body'</span>).select(<span class=\"string\">'#pText'</span>).html())        </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"添加、插入和删除\"><a href=\"#添加、插入和删除\" class=\"headerlink\" title=\"添加、插入和删除\"></a>添加、插入和删除</h4><ul>\n<li><p>selection.append(name)</p>\n<p>在选择集的末尾添加一个元素，name为元素名称。</p>\n</li>\n<li><p>selection.insert(“name”,”#before”)</p>\n<p>在选择集中的指定元素之前插入一个元素，name是被插入的元素名称，before是CSS选择器名称。</p>\n</li>\n<li><p>selection.remove()</p>\n<p>删除选择集中的元素。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"car\"</span>&gt;</span>car<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"plane\"</span>&gt;</span>plane<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ship\"</span>&gt;</span>ship<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)  <span class=\"comment\">//选择body元素</span></div><div class=\"line\">  body.append(<span class=\"string\">'p'</span>).text(<span class=\"string\">'train'</span>)  <span class=\"comment\">//在body中所有元素的末尾添加一个P标签</span></div><div class=\"line\">  body.insert(<span class=\"string\">'p'</span>,<span class=\"string\">'#car'</span>).text(<span class=\"string\">'bike'</span>)  <span class=\"comment\">//在car元素前面添加一个P标签</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ship = d3.select(<span class=\"string\">'#ship'</span>)</div><div class=\"line\">  .remove()  <span class=\"comment\">//删除ship</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h4><p>将数据绑定到DOM上是D3的特色。d3.select和d3.selectAll返回元素的选择集，选择集上是没有数据的。数据绑定，就是使被选择元素里面“含有”数据。相关函数有两个：</p>\n<ul>\n<li>selection.datum(value)选择集中的每一个元素都绑定相同的数据value。</li>\n<li>selection.data(value,key)选择集中的每一个元素分别绑定数组value的每一项。key是一个键函数，用于指定绑定数组时的对应规则。</li>\n</ul>\n<h5 id=\"1-datum-的工作过程\"><a href=\"#1-datum-的工作过程\" class=\"headerlink\" title=\"1. datum()的工作过程\"></a>1. datum()的工作过程</h5><p>datum()绑定数据的方法很简单，平时可能使用得比较少，但是某些时候还是能派上大用场的。直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num\"</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> num = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">              .selectAll(<span class=\"string\">'.num'</span>)</div><div class=\"line\">  num.datum(<span class=\"number\">666</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num.datum())  <span class=\"comment\">//没有参数 就返回——data——的属性值</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>接下来我们去打望打望控制台。</p>\n<p>SO，datum()的工作过程就是对于选择集中的每一个元素，都增加一个—data—<em>属性，属性值为datum(value)的value值。如果参数是undefined和null，则不会创建</em>—data—属性。</p>\n<p>用绑定的数据替换原本的段落：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>原创歌手<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>段子手<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num1\"</span>&gt;</span>深情的<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> num1 = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.num1'</span>)</div><div class=\"line\"></div><div class=\"line\">  num1.datum(<span class=\"string\">\"薛之谦\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">'span'</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//d代表数据 i代表index</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"——\"</span>+d+i+<span class=\"string\">\"号\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num1)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>所以，在被绑定数据的选择集中添加元素后，新元素会继承该数据。</p>\n<h5 id=\"2-data-的工作过程\"><a href=\"#2-data-的工作过程\" class=\"headerlink\" title=\"2. data()的工作过程\"></a>2. data()的工作过程</h5><p>data()能将数组各项分别绑定到选择集的各元素上，并且能指定绑定的规则。当数组长度与元素数量不一致时，data()也能够处理。当数组长度大于元素数量时，为多余数据预留元素位置，以便将来插入新元素；当数组长度小于元素数量时，能获取多余元素的位置，以遍将来删除。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>演员<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>刚刚好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"num2\"</span>&gt;</span>认真的雪<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> num2 = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.num2'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> dataset = [<span class=\"string\">\"绅士\"</span>,<span class=\"string\">\"初学者\"</span>,<span class=\"string\">\"未完成的歌\"</span>]</div><div class=\"line\">  num2.data(dataset)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(num2)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面的数组长度和元素数量刚刚好，下面看看不等的情况。</p>\n<p>d3中，根据数组长度和元素数量的关系，分别把各种情况归纳如下：</p>\n<p>在读入数据进行可视化的过程中，被读入的数据都要绑定到选择集的元素上，没有绑定数据的元素是没有用的。</p>\n<ul>\n<li>update：数组长度=元素数量。（则绑定数据的元素即将被更新）</li>\n<li>enter：数组长度&gt;元素数量。（则部分还不存在的元素即将进入可视化）</li>\n<li>exit：数组长度&lt;元素数量。（则多余的元素即将退出可视化）</li>\n</ul>\n<p><img src=\"845855-20161020140040467-439041801.png\" alt=\"845855-20161020140040467-439041801\"></p>\n<p>data()返回一个对象，对象里包含update部分，还有两个方法：enter()返回enter部分；一个是exit()返回exit部分。 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>演员<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>刚刚好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"n\"</span>&gt;</span>认真的雪<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> n = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .selectAll(<span class=\"string\">'.n'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> dataset = [<span class=\"string\">\"《绅士》\"</span>,<span class=\"string\">\"《初学者》\"</span>,<span class=\"string\">\"《未完成的歌》\"</span>,<span class=\"string\">\"《一半》\"</span>,<span class=\"string\">\"《意外》\"</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> update = n.data(dataset)</div><div class=\"line\">  update.append(<span class=\"string\">'span'</span>)</div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//d代表数据 i代表index</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"——\"</span>+d</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update.enter())</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(update.exit())</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在控制台可以看到，d3已经为多余的数组“《一半》”和”《意外》”预留了位置，以备将来添加元素。enter部分仲，还有一个变量update，指向update部分。因为本次绑定中，没有多余的元素，所以exit部分没有内容。</p>\n<h5 id=\"3-选择集的处理\"><a href=\"#3-选择集的处理\" class=\"headerlink\" title=\"3. 选择集的处理\"></a>3. 选择集的处理</h5><ul>\n<li>enter的处理方法</li>\n</ul>\n<p>如果没有足够的元素，那么就添加元素。所以，通常从服务器读取数据后，网页中是没有与之对应的元素的。因此，有一个很常见的用法：选择一个空集，然后使用enter().append()的形式来添加足够数量的元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> dataset2 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>]</div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  body.selectAll(<span class=\"string\">'b'</span>)  <span class=\"comment\">//选择了一个空集</span></div><div class=\"line\">    .data(dataset2)  <span class=\"comment\">//绑定数据</span></div><div class=\"line\">    .enter()  <span class=\"comment\">//返回enter部分</span></div><div class=\"line\">    .append(<span class=\"string\">'p'</span>)  <span class=\"comment\">//添加li标签</span></div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d</div><div class=\"line\">  &#125;)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>exit的处理方法</li>\n</ul>\n<p>如果存在多余的元素，那就删除元素。使用remove()就可以删除元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boxs\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">var</span> dataset2 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>]</div><div class=\"line\">  <span class=\"keyword\">var</span> body = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  body.select(<span class=\"string\">'#boxs'</span>)  </div><div class=\"line\">    .selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\">    .data(dataset2)  <span class=\"comment\">//绑定数据</span></div><div class=\"line\">    .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .exit()  <span class=\"comment\">//返回exit部分</span></div><div class=\"line\">    .remove()  <span class=\"comment\">//删除多余的2个P标签</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>此处省略“处理模板、过略器、选择集的顺序、each()的应用、call()的应用。</p>\n<h4 id=\"柱形的制作（见详细代码）\"><a href=\"#柱形的制作（见详细代码）\" class=\"headerlink\" title=\"柱形的制作（见详细代码）\"></a>柱形的制作（见详细代码）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>柱形图的制作<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">      <span class=\"comment\">//首先绘制SVG</span></div><div class=\"line\">      <span class=\"keyword\">var</span> width = <span class=\"number\">600</span></div><div class=\"line\">      <span class=\"keyword\">var</span> height = <span class=\"number\">200</span></div><div class=\"line\">      <span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">      .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>,width)  <span class=\"comment\">//设置svg的属性</span></div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>,height)</div><div class=\"line\">      <span class=\"comment\">//然后定义3个变量</span></div><div class=\"line\">      <span class=\"comment\">//定义上下左右的边距</span></div><div class=\"line\">      <span class=\"keyword\">var</span> padding = &#123;</div><div class=\"line\">        <span class=\"attr\">top</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">right</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">bottom</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">left</span>: <span class=\"number\">20</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//矩形所占的宽度（包括空白）</span></div><div class=\"line\">      <span class=\"keyword\">var</span> rectStep = <span class=\"number\">35</span></div><div class=\"line\">      <span class=\"comment\">//矩形所占的宽度（不包括空白）</span></div><div class=\"line\">      <span class=\"keyword\">var</span> rectWidth = <span class=\"number\">30</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//定义数据</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataset = [<span class=\"number\">60</span>,<span class=\"number\">40</span>,<span class=\"number\">120</span>,<span class=\"number\">88</span>,<span class=\"number\">22</span>,<span class=\"number\">150</span>,<span class=\"number\">60</span>,<span class=\"number\">55</span>]</div><div class=\"line\">      <span class=\"comment\">//添加矩形</span></div><div class=\"line\">      svg.selectAll(<span class=\"string\">'rect'</span>)</div><div class=\"line\">        .data(dataset)</div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">'rect'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置矩形的X坐标</span></div><div class=\"line\">        <span class=\"keyword\">return</span> padding.left + i * rectStep</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">'y'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置矩形的Y坐标</span></div><div class=\"line\">        <span class=\"keyword\">return</span> height - padding.bottom - d</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>,rectWidth)  <span class=\"comment\">//设置每个矩形的宽度</span></div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;  <span class=\"comment\">//设置每个矩形的高度</span></div><div class=\"line\">        <span class=\"keyword\">return</span> d</div><div class=\"line\">      &#125;)</div><div class=\"line\">        .style(&#123;<span class=\"string\">\"fill\"</span>:<span class=\"string\">\"yellow\"</span>,<span class=\"string\">\"stroke\"</span>:<span class=\"string\">\"green\"</span>,<span class=\"string\">\"stroke-width\"</span>:<span class=\"string\">'3'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//给矩形添加文字</span></div><div class=\"line\">      <span class=\"keyword\">var</span> text = svg.selectAll(<span class=\"string\">'text'</span>)</div><div class=\"line\">      .data(dataset)</div><div class=\"line\">      .enter()</div><div class=\"line\">      .append(<span class=\"string\">'text'</span>)</div><div class=\"line\">      .style(&#123;<span class=\"string\">\"fill\"</span>:<span class=\"string\">\"#000\"</span>,<span class=\"string\">\"font-size\"</span>:<span class=\"string\">\"18px\"</span>,<span class=\"string\">\"text-anchor\"</span>:<span class=\"string\">\"middle\"</span>&#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'x'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> padding.left + i * rectStep</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'y'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> height - padding.bottom - d</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">'dx'</span>,rectWidth/<span class=\"number\">2</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'dy'</span>,<span class=\"string\">'20'</span>)</div><div class=\"line\">      .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> d</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"五、比例尺和坐标轴\"><a href=\"#五、比例尺和坐标轴\" class=\"headerlink\" title=\"五、比例尺和坐标轴\"></a>五、比例尺和坐标轴</h2><h4 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h4><h5 id=\"1-为什么需要比例尺？\"><a href=\"#1-为什么需要比例尺？\" class=\"headerlink\" title=\"1. 为什么需要比例尺？\"></a>1. 为什么需要比例尺？</h5><p>上面制作了一个柱状图，绘图时，直接使用150给矩形的高度赋值，即矩形的宽度就是250个像素。所以，如果过数值过大或者过小，就会造成太小看不到，太大没有这么大的画布来画。</p>\n<p>SO，我们需要一种计算关系，能够将：某一区域的值映射到另一区域，其大小关系不变。这就是比例尺。</p>\n<h5 id=\"2-有哪些比例尺？\"><a href=\"#2-有哪些比例尺？\" class=\"headerlink\" title=\"2. 有哪些比例尺？\"></a>2. 有哪些比例尺？</h5><p>比例尺，很像数学中的函数。例如，对于一个一元二次函数（y=2x+1），有 x 和 y 两个未知数，当 x 的值确定时，y 的值也就确定了。</p>\n<p>在数学中，x 的范围被称为<strong>定义域</strong>，y 的范围被称为<strong>值域</strong>。</p>\n<p>D3 中的比例尺，也有定义域和值域，分别被称为 domain 和 range。开发者需要指定 domain 和 range 的范围，如此即可得到一个计算关系。</p>\n<p>D3 提供了多种比例尺，下面介绍最常用的两种。</p>\n<ul>\n<li>线性比例尺</li>\n</ul>\n<p>线性比例尺，能将一个连续的区间，映射到另一区间。要解决柱形图宽度的问题，就需要线性比例尺。</p>\n<p>假设有以下数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1.5</span>, <span class=\"number\">3.3</span>]</div></pre></td></tr></table></figure>\n<p>现有要求如下：</p>\n<p>将dataset中最小的值，映射成0；将最大的值，映射成300。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> min = d3.min(dataset)</div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(dataset)</div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">               .domain([min,max])</div><div class=\"line\">               .range([<span class=\"number\">0</span>,<span class=\"number\">300</span>])</div><div class=\"line\">linear(<span class=\"number\">0.9</span>)  <span class=\"comment\">//返回0</span></div><div class=\"line\">linear(<span class=\"number\">2.3</span>)  <span class=\"comment\">//返回175</span></div><div class=\"line\">linear(<span class=\"number\">3.3</span>)  <span class=\"comment\">//返回300</span></div></pre></td></tr></table></figure>\n<p>其中，d3.scale.linear() 返回一个线性比例尺。domain() 和 range() 分别设定比例尺的定义域和值域。在这里还用到了两个函数，它们经常与比例尺一起出现：d3.max() 求数组的最大值；d3.min() 求数组最小值</p>\n<p>注意：d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，才有这样的用法：linear(0.9)。</p>\n<ul>\n<li>序数比例尺</li>\n</ul>\n<p>有时候，定义域和值域不一定是连续的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> index = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> color = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>,<span class=\"string\">\"green\"</span>,<span class=\"string\">\"yellow\"</span>,<span class=\"string\">\"black\"</span>]</div></pre></td></tr></table></figure>\n<p>我们希望0对应颜色red，1对应blue…..</p>\n<p>但是，这些值都是散离的，线性比例尺不适合，需要用到序数比例尺。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ordinal = d3.scale.ordinal()</div><div class=\"line\">                .domain(index)</div><div class=\"line\">                .range(color)</div><div class=\"line\">ordinal(<span class=\"number\">0</span>)  <span class=\"comment\">//返回red</span></div><div class=\"line\">ordinal(<span class=\"number\">2</span>)  <span class=\"comment\">//返回green</span></div><div class=\"line\">ordinal(<span class=\"number\">4</span>)  <span class=\"comment\">//返回black</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-给柱形图添加比例尺（见详细代码）\"><a href=\"#3-给柱形图添加比例尺（见详细代码）\" class=\"headerlink\" title=\"3.给柱形图添加比例尺（见详细代码）\"></a>3.给柱形图添加比例尺（见详细代码）</h5><h4 id=\"坐标轴\"><a href=\"#坐标轴\" class=\"headerlink\" title=\"坐标轴\"></a>坐标轴</h4><h5 id=\"1-坐标轴由什么构成\"><a href=\"#1-坐标轴由什么构成\" class=\"headerlink\" title=\"1. 坐标轴由什么构成\"></a>1. 坐标轴由什么构成</h5><p>坐标轴在 SVG 中是没有现成的图形元素的，需要用其他的元素组合构成。D3 提供了坐标轴的组件，如此在 SVG 画布中绘制坐标轴变得像添加一个普通元素一样简单。最终使其变为类似以下的形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 第一个刻度 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第一个刻度的直线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第一个刻度的文字 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 第二个刻度 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">line</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第二个刻度的直线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>   <span class=\"comment\">&lt;!-- 第二个刻度的文字 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span> </div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">&lt;!-- 坐标轴的轴线 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><g>标签是用于把相关元素进行组合的容器元素。如果需要手动添加这些元素就太麻烦了，为此，D3 提供了一个组件：d3.svg.axis()。</p>\n<h5 id=\"2-定义坐标轴\"><a href=\"#2-定义坐标轴\" class=\"headerlink\" title=\"2. 定义坐标轴\"></a>2. 定义坐标轴</h5><p>要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> dataset = [ <span class=\"number\">2.5</span> , <span class=\"number\">2.1</span> , <span class=\"number\">1.7</span> , <span class=\"number\">1.3</span> , <span class=\"number\">0.9</span> ];</div><div class=\"line\"><span class=\"comment\">//定义比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">      .domain([<span class=\"number\">0</span>, d3.max(dataset)])</div><div class=\"line\">      .range([<span class=\"number\">0</span>, <span class=\"number\">250</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> axis = d3.svg.axis() <span class=\"comment\">//D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素</span></div><div class=\"line\">     .scale(linear)      <span class=\"comment\">//指定比例尺</span></div><div class=\"line\">     .orient(<span class=\"string\">\"bottom\"</span>)   <span class=\"comment\">//指定刻度的方向 bottom 表示在坐标轴的下方显示</span></div><div class=\"line\">     .ticks(<span class=\"number\">7</span>);          <span class=\"comment\">//指定刻度的数量</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-在SVG中添加坐标轴\"><a href=\"#3-在SVG中添加坐标轴\" class=\"headerlink\" title=\"3. 在SVG中添加坐标轴\"></a>3. 在SVG中添加坐标轴</h5><p>定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>).call(axis)</div></pre></td></tr></table></figure>\n<p>上面有一个 <strong>call()</strong> 函数，其参数是前面定义的坐标轴 axis。</p>\n<p>在 D3 中，call() 的参数是一个函数。调用之后，将当前的选择集作为参数传递给此函数。也就是说，以下两段代码是相等的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">selection</span>) </span>&#123;</div><div class=\"line\">  selection.attr(<span class=\"string\">\"name1\"</span>, <span class=\"string\">\"value1\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"name2\"</span>, <span class=\"string\">\"value2\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">foo(d3.selectAll(<span class=\"string\">\"div\"</span>))</div><div class=\"line\"><span class=\"comment\">//上面的代码等于</span></div><div class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).call(foo)</div></pre></td></tr></table></figure>\n<p>所以，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>).call(axis)</div><div class=\"line\"><span class=\"comment\">//等于</span></div><div class=\"line\">axis(svg.append(g))</div></pre></td></tr></table></figure>\n<h5 id=\"4-设置坐标轴的样式和位置\"><a href=\"#4-设置坐标轴的样式和位置\" class=\"headerlink\" title=\"4. 设置坐标轴的样式和位置\"></a>4. 设置坐标轴的样式和位置</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">path</span>,</div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">line</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">fill</span>: none;</div><div class=\"line\">    <span class=\"attribute\">stroke</span>: black;</div><div class=\"line\">    <span class=\"attribute\">shape-rendering</span>: crispEdges;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.axis</span> <span class=\"selector-tag\">text</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: sans-serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">11px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>分别定义了类 axis 下的 path、line、text 元素的样式。接下来，只需要将坐标轴的类设定为 axis 即可。坐标轴的位置，可以通过 transform 属性来设定。通常在添加元素的时候就一并设定，写成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">svg.append(<span class=\"string\">\"g\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"class\"</span>,<span class=\"string\">\"axis\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(20,130)\"</span>)</div><div class=\"line\">  .call(axis)</div></pre></td></tr></table></figure>"},{"title":"D3.js常用API","date":"2016-12-17T15:29:35.000Z","_content":"\n 数组长度与元素不一致时处理方式\n 选择集处理   enter()/exit()\n <!--more--> \n enter() 没有足够的元素与数组长度匹配时自动添加剩余的元素个数 ，结合append()使用\n 数组长度大于元素个数使用enter()结合append()自动补齐\n \n\n```javascript\nvar dataset = [10,20,30,40]\nvar p = d3.select('#enter')  //选择第一个ID为enter的元素\n        .selectAll('p')   //选择enter的元素下的所有p元素\n        .data(dataset)    \n        .enter()\n        .append('p')\n        .html(function(d,i){\n            return ''+d+' enter'    //设置p元素中的内容\n    })\n        //这里的样式及类名只会给后面新增的p元素添加\n        .style('color','red')   //设置字体颜色\n        .attr('class', 'test')  //添加一个名为test的类\n        .classed('classed', true) //添加一个名为classed的类\n ```       \n\n\n exit()存在多余的数据，没有数据与之对应，结合remove()删除多余的元素\n 数组长度小于元素个数使用exit()结合remove()删除多余元素\n```javascript\nvar div    =  d3.select('#exit').selectAll('p')\n        .data(dataset)\n        .exit()\n        .remove()\n        .html(function(d,i){\n            return d\n        })\n```\n\n### 比例尺\n在绘制图的过程中会遇到数值过大或过小，例如：   \n对以下两组数组，绝不可能用 2.5 个像素来代表矩形的宽度，那样根本看不见；\n也不可能用 2500 个像素来代表矩形的宽度，画布也没有那么长。  \n```javascript   \nvar data1 = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ]\nvar data2 = [ 2500, 2100, 1700, 1300, 900 ]\n//当遇到这种情况可使用线性比例尺\nvar data= [1.2, 2.3, 0.9, 1.5, 3.3];\nvar min = d3.min(data)   //获取数组中的最小值\nvar max = d3.max(data)   //获取数组中的最大值\n\nvar linear = d3.scale.linear()  //构建一个线性比例尺\n        .domain([min, max])   //设置比例尺的定义域\n        .range([0, 300])   //指定比例尺的输出范围\n\nlinear(0.9);    //返回 0\nlinear(2.3);    //返回 175\nlinear(3.3);    //返回 300\n```\n\n### 项目案例\n\n```javascript\nvar width = 500\nvar height = 600\n//选择body添加一个w:500,h:500,class:main的svg\nvar svg = d3.select(body).append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('class', 'main')\nvar radiusAll = [1203, 802,792,735,10]\n//每次返回5个半径数据相差大小不定，取数组中的最大值，最小值为0 设置定义域\nvar max = d3.max(radiusAll);\n//比例尺的输出范围，最大为width/2-100\nvar maxRange = cfg.w/2 -100\nvar linear = d3.scale.linear()\n        .domain([0, max]) //设置比例尺度的定义域\n        .range([0, maxRange]); //比例尺的输出范围\n//使用比例尺\nvar falg = 2\nvar radiusData  = []\nfor(var i = 0,len = radiusAll.length; i<len; i++){\n//获取半径，最高峰值1.5倍大于最大宽度限制\n  radiusData.push(radiusAll[i])\n  radarRadius = linear(radiusAll[i])\n  if(radarRadius>width/2){\n    radarRadius = cfg.w/2 -100\n  }\n  if(radarRadius<20){\n    radarRadius = 20\n  }\n  svg.selectAll(\".circle\")\n    .data(radiusData)\n    .enter()\n    .append('svg:circle')\n    .attr(\"cx\", width/2)\n    .attr(\"cy\", height/2)\n    .attr('r', radarRadius )\n    .style(\"stroke\", function(j, i){\n        return cfg.color[falg]})\n    .style(\"stroke-width\", \"3px\")\n    .style(\"fill-opacity\", 0) \n    .attr('id', 'id_'+i+'')\n\n    falg++\n    radarRadius = 0\n    radiusData.length = 0\n}\n```\n\n\n\n\n","source":"_posts/D3.js常用API.md","raw":"---\ntitle: D3.js常用API\ndate: 2016-12-17 23:29:35\ncategories: \n  - 技术\n  - D3.js\ntags: D3.js\n\n---\n\n 数组长度与元素不一致时处理方式\n 选择集处理   enter()/exit()\n <!--more--> \n enter() 没有足够的元素与数组长度匹配时自动添加剩余的元素个数 ，结合append()使用\n 数组长度大于元素个数使用enter()结合append()自动补齐\n \n\n```javascript\nvar dataset = [10,20,30,40]\nvar p = d3.select('#enter')  //选择第一个ID为enter的元素\n        .selectAll('p')   //选择enter的元素下的所有p元素\n        .data(dataset)    \n        .enter()\n        .append('p')\n        .html(function(d,i){\n            return ''+d+' enter'    //设置p元素中的内容\n    })\n        //这里的样式及类名只会给后面新增的p元素添加\n        .style('color','red')   //设置字体颜色\n        .attr('class', 'test')  //添加一个名为test的类\n        .classed('classed', true) //添加一个名为classed的类\n ```       \n\n\n exit()存在多余的数据，没有数据与之对应，结合remove()删除多余的元素\n 数组长度小于元素个数使用exit()结合remove()删除多余元素\n```javascript\nvar div    =  d3.select('#exit').selectAll('p')\n        .data(dataset)\n        .exit()\n        .remove()\n        .html(function(d,i){\n            return d\n        })\n```\n\n### 比例尺\n在绘制图的过程中会遇到数值过大或过小，例如：   \n对以下两组数组，绝不可能用 2.5 个像素来代表矩形的宽度，那样根本看不见；\n也不可能用 2500 个像素来代表矩形的宽度，画布也没有那么长。  \n```javascript   \nvar data1 = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ]\nvar data2 = [ 2500, 2100, 1700, 1300, 900 ]\n//当遇到这种情况可使用线性比例尺\nvar data= [1.2, 2.3, 0.9, 1.5, 3.3];\nvar min = d3.min(data)   //获取数组中的最小值\nvar max = d3.max(data)   //获取数组中的最大值\n\nvar linear = d3.scale.linear()  //构建一个线性比例尺\n        .domain([min, max])   //设置比例尺的定义域\n        .range([0, 300])   //指定比例尺的输出范围\n\nlinear(0.9);    //返回 0\nlinear(2.3);    //返回 175\nlinear(3.3);    //返回 300\n```\n\n### 项目案例\n\n```javascript\nvar width = 500\nvar height = 600\n//选择body添加一个w:500,h:500,class:main的svg\nvar svg = d3.select(body).append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('class', 'main')\nvar radiusAll = [1203, 802,792,735,10]\n//每次返回5个半径数据相差大小不定，取数组中的最大值，最小值为0 设置定义域\nvar max = d3.max(radiusAll);\n//比例尺的输出范围，最大为width/2-100\nvar maxRange = cfg.w/2 -100\nvar linear = d3.scale.linear()\n        .domain([0, max]) //设置比例尺度的定义域\n        .range([0, maxRange]); //比例尺的输出范围\n//使用比例尺\nvar falg = 2\nvar radiusData  = []\nfor(var i = 0,len = radiusAll.length; i<len; i++){\n//获取半径，最高峰值1.5倍大于最大宽度限制\n  radiusData.push(radiusAll[i])\n  radarRadius = linear(radiusAll[i])\n  if(radarRadius>width/2){\n    radarRadius = cfg.w/2 -100\n  }\n  if(radarRadius<20){\n    radarRadius = 20\n  }\n  svg.selectAll(\".circle\")\n    .data(radiusData)\n    .enter()\n    .append('svg:circle')\n    .attr(\"cx\", width/2)\n    .attr(\"cy\", height/2)\n    .attr('r', radarRadius )\n    .style(\"stroke\", function(j, i){\n        return cfg.color[falg]})\n    .style(\"stroke-width\", \"3px\")\n    .style(\"fill-opacity\", 0) \n    .attr('id', 'id_'+i+'')\n\n    falg++\n    radarRadius = 0\n    radiusData.length = 0\n}\n```\n\n\n\n\n","slug":"D3.js常用API","published":1,"updated":"2016-12-29T05:01:27.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4l000o24uu955s9800","content":"<p> 数组长度与元素不一致时处理方式<br> 选择集处理   enter()/exit()<br> <a id=\"more\"></a><br> enter() 没有足够的元素与数组长度匹配时自动添加剩余的元素个数 ，结合append()使用<br> 数组长度大于元素个数使用enter()结合append()自动补齐</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">'#enter'</span>)  <span class=\"comment\">//选择第一个ID为enter的元素</span></div><div class=\"line\">        .selectAll(<span class=\"string\">'p'</span>)   <span class=\"comment\">//选择enter的元素下的所有p元素</span></div><div class=\"line\">        .data(dataset)    </div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">'p'</span>)</div><div class=\"line\">        .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>+d+<span class=\"string\">' enter'</span>    <span class=\"comment\">//设置p元素中的内容</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">        <span class=\"comment\">//这里的样式及类名只会给后面新增的p元素添加</span></div><div class=\"line\">        .style(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>)   <span class=\"comment\">//设置字体颜色</span></div><div class=\"line\">        .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'test'</span>)  <span class=\"comment\">//添加一个名为test的类</span></div><div class=\"line\">        .classed(<span class=\"string\">'classed'</span>, <span class=\"literal\">true</span>) <span class=\"comment\">//添加一个名为classed的类</span></div><div class=\"line\"> <span class=\"string\">``</span><span class=\"string\">`       </span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> exit()存在多余的数据，没有数据与之对应，结合remove()删除多余的元素</div><div class=\"line\"> 数组长度小于元素个数使用exit()结合remove()删除多余元素</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> div    =  d3.select(<span class=\"string\">'#exit'</span>).selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\">        .data(dataset)</div><div class=\"line\">        .exit()</div><div class=\"line\">        .remove()</div><div class=\"line\">        .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> d</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h3><p>在绘制图的过程中会遇到数值过大或过小，例如：<br>对以下两组数组，绝不可能用 2.5 个像素来代表矩形的宽度，那样根本看不见；<br>也不可能用 2500 个像素来代表矩形的宽度，画布也没有那么长。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data1 = [ <span class=\"number\">2.5</span> , <span class=\"number\">2.1</span> , <span class=\"number\">1.7</span> , <span class=\"number\">1.3</span> , <span class=\"number\">0.9</span> ]</div><div class=\"line\"><span class=\"keyword\">var</span> data2 = [ <span class=\"number\">2500</span>, <span class=\"number\">2100</span>, <span class=\"number\">1700</span>, <span class=\"number\">1300</span>, <span class=\"number\">900</span> ]</div><div class=\"line\"><span class=\"comment\">//当遇到这种情况可使用线性比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> data= [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1.5</span>, <span class=\"number\">3.3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> min = d3.min(data)   <span class=\"comment\">//获取数组中的最小值</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(data)   <span class=\"comment\">//获取数组中的最大值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()  <span class=\"comment\">//构建一个线性比例尺</span></div><div class=\"line\">        .domain([min, max])   <span class=\"comment\">//设置比例尺的定义域</span></div><div class=\"line\">        .range([<span class=\"number\">0</span>, <span class=\"number\">300</span>])   <span class=\"comment\">//指定比例尺的输出范围</span></div><div class=\"line\"></div><div class=\"line\">linear(<span class=\"number\">0.9</span>);    <span class=\"comment\">//返回 0</span></div><div class=\"line\">linear(<span class=\"number\">2.3</span>);    <span class=\"comment\">//返回 175</span></div><div class=\"line\">linear(<span class=\"number\">3.3</span>);    <span class=\"comment\">//返回 300</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"项目案例\"><a href=\"#项目案例\" class=\"headerlink\" title=\"项目案例\"></a>项目案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">500</span></div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">600</span></div><div class=\"line\"><span class=\"comment\">//选择body添加一个w:500,h:500,class:main的svg</span></div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(body).append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, width)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, height)</div><div class=\"line\">        .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'main'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> radiusAll = [<span class=\"number\">1203</span>, <span class=\"number\">802</span>,<span class=\"number\">792</span>,<span class=\"number\">735</span>,<span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"comment\">//每次返回5个半径数据相差大小不定，取数组中的最大值，最小值为0 设置定义域</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(radiusAll);</div><div class=\"line\"><span class=\"comment\">//比例尺的输出范围，最大为width/2-100</span></div><div class=\"line\"><span class=\"keyword\">var</span> maxRange = cfg.w/<span class=\"number\">2</span> <span class=\"number\">-100</span></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">        .domain([<span class=\"number\">0</span>, max]) <span class=\"comment\">//设置比例尺度的定义域</span></div><div class=\"line\">        .range([<span class=\"number\">0</span>, maxRange]); <span class=\"comment\">//比例尺的输出范围</span></div><div class=\"line\"><span class=\"comment\">//使用比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> falg = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> radiusData  = []</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = radiusAll.length; i&lt;len; i++)&#123;</div><div class=\"line\"><span class=\"comment\">//获取半径，最高峰值1.5倍大于最大宽度限制</span></div><div class=\"line\">  radiusData.push(radiusAll[i])</div><div class=\"line\">  radarRadius = linear(radiusAll[i])</div><div class=\"line\">  <span class=\"keyword\">if</span>(radarRadius&gt;width/<span class=\"number\">2</span>)&#123;</div><div class=\"line\">    radarRadius = cfg.w/<span class=\"number\">2</span> <span class=\"number\">-100</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(radarRadius&lt;<span class=\"number\">20</span>)&#123;</div><div class=\"line\">    radarRadius = <span class=\"number\">20</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  svg.selectAll(<span class=\"string\">\".circle\"</span>)</div><div class=\"line\">    .data(radiusData)</div><div class=\"line\">    .enter()</div><div class=\"line\">    .append(<span class=\"string\">'svg:circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"cx\"</span>, width/<span class=\"number\">2</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"cy\"</span>, height/<span class=\"number\">2</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>, radarRadius )</div><div class=\"line\">    .style(<span class=\"string\">\"stroke\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j, i</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cfg.color[falg]&#125;)</div><div class=\"line\">    .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"3px\"</span>)</div><div class=\"line\">    .style(<span class=\"string\">\"fill-opacity\"</span>, <span class=\"number\">0</span>) </div><div class=\"line\">    .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'id_'</span>+i+<span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    falg++</div><div class=\"line\">    radarRadius = <span class=\"number\">0</span></div><div class=\"line\">    radiusData.length = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p> 数组长度与元素不一致时处理方式<br> 选择集处理   enter()/exit()<br>","more":"<br> enter() 没有足够的元素与数组长度匹配时自动添加剩余的元素个数 ，结合append()使用<br> 数组长度大于元素个数使用enter()结合append()自动补齐</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataset = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> p = d3.select(<span class=\"string\">'#enter'</span>)  <span class=\"comment\">//选择第一个ID为enter的元素</span></div><div class=\"line\">        .selectAll(<span class=\"string\">'p'</span>)   <span class=\"comment\">//选择enter的元素下的所有p元素</span></div><div class=\"line\">        .data(dataset)    </div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">'p'</span>)</div><div class=\"line\">        .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>+d+<span class=\"string\">' enter'</span>    <span class=\"comment\">//设置p元素中的内容</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">        <span class=\"comment\">//这里的样式及类名只会给后面新增的p元素添加</span></div><div class=\"line\">        .style(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>)   <span class=\"comment\">//设置字体颜色</span></div><div class=\"line\">        .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'test'</span>)  <span class=\"comment\">//添加一个名为test的类</span></div><div class=\"line\">        .classed(<span class=\"string\">'classed'</span>, <span class=\"literal\">true</span>) <span class=\"comment\">//添加一个名为classed的类</span></div><div class=\"line\"> <span class=\"string\">``</span><span class=\"string\">`       </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> exit()存在多余的数据，没有数据与之对应，结合remove()删除多余的元素</div><div class=\"line\"> 数组长度小于元素个数使用exit()结合remove()删除多余元素</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> div    =  d3.select(<span class=\"string\">'#exit'</span>).selectAll(<span class=\"string\">'p'</span>)</div><div class=\"line\">        .data(dataset)</div><div class=\"line\">        .exit()</div><div class=\"line\">        .remove()</div><div class=\"line\">        .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> d</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h3><p>在绘制图的过程中会遇到数值过大或过小，例如：<br>对以下两组数组，绝不可能用 2.5 个像素来代表矩形的宽度，那样根本看不见；<br>也不可能用 2500 个像素来代表矩形的宽度，画布也没有那么长。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data1 = [ <span class=\"number\">2.5</span> , <span class=\"number\">2.1</span> , <span class=\"number\">1.7</span> , <span class=\"number\">1.3</span> , <span class=\"number\">0.9</span> ]</div><div class=\"line\"><span class=\"keyword\">var</span> data2 = [ <span class=\"number\">2500</span>, <span class=\"number\">2100</span>, <span class=\"number\">1700</span>, <span class=\"number\">1300</span>, <span class=\"number\">900</span> ]</div><div class=\"line\"><span class=\"comment\">//当遇到这种情况可使用线性比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> data= [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1.5</span>, <span class=\"number\">3.3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> min = d3.min(data)   <span class=\"comment\">//获取数组中的最小值</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(data)   <span class=\"comment\">//获取数组中的最大值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()  <span class=\"comment\">//构建一个线性比例尺</span></div><div class=\"line\">        .domain([min, max])   <span class=\"comment\">//设置比例尺的定义域</span></div><div class=\"line\">        .range([<span class=\"number\">0</span>, <span class=\"number\">300</span>])   <span class=\"comment\">//指定比例尺的输出范围</span></div><div class=\"line\"></div><div class=\"line\">linear(<span class=\"number\">0.9</span>);    <span class=\"comment\">//返回 0</span></div><div class=\"line\">linear(<span class=\"number\">2.3</span>);    <span class=\"comment\">//返回 175</span></div><div class=\"line\">linear(<span class=\"number\">3.3</span>);    <span class=\"comment\">//返回 300</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"项目案例\"><a href=\"#项目案例\" class=\"headerlink\" title=\"项目案例\"></a>项目案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">500</span></div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">600</span></div><div class=\"line\"><span class=\"comment\">//选择body添加一个w:500,h:500,class:main的svg</span></div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(body).append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, width)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, height)</div><div class=\"line\">        .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'main'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> radiusAll = [<span class=\"number\">1203</span>, <span class=\"number\">802</span>,<span class=\"number\">792</span>,<span class=\"number\">735</span>,<span class=\"number\">10</span>]</div><div class=\"line\"><span class=\"comment\">//每次返回5个半径数据相差大小不定，取数组中的最大值，最小值为0 设置定义域</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = d3.max(radiusAll);</div><div class=\"line\"><span class=\"comment\">//比例尺的输出范围，最大为width/2-100</span></div><div class=\"line\"><span class=\"keyword\">var</span> maxRange = cfg.w/<span class=\"number\">2</span> <span class=\"number\">-100</span></div><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">        .domain([<span class=\"number\">0</span>, max]) <span class=\"comment\">//设置比例尺度的定义域</span></div><div class=\"line\">        .range([<span class=\"number\">0</span>, maxRange]); <span class=\"comment\">//比例尺的输出范围</span></div><div class=\"line\"><span class=\"comment\">//使用比例尺</span></div><div class=\"line\"><span class=\"keyword\">var</span> falg = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> radiusData  = []</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = radiusAll.length; i&lt;len; i++)&#123;</div><div class=\"line\"><span class=\"comment\">//获取半径，最高峰值1.5倍大于最大宽度限制</span></div><div class=\"line\">  radiusData.push(radiusAll[i])</div><div class=\"line\">  radarRadius = linear(radiusAll[i])</div><div class=\"line\">  <span class=\"keyword\">if</span>(radarRadius&gt;width/<span class=\"number\">2</span>)&#123;</div><div class=\"line\">    radarRadius = cfg.w/<span class=\"number\">2</span> <span class=\"number\">-100</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(radarRadius&lt;<span class=\"number\">20</span>)&#123;</div><div class=\"line\">    radarRadius = <span class=\"number\">20</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  svg.selectAll(<span class=\"string\">\".circle\"</span>)</div><div class=\"line\">    .data(radiusData)</div><div class=\"line\">    .enter()</div><div class=\"line\">    .append(<span class=\"string\">'svg:circle'</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"cx\"</span>, width/<span class=\"number\">2</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"cy\"</span>, height/<span class=\"number\">2</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'r'</span>, radarRadius )</div><div class=\"line\">    .style(<span class=\"string\">\"stroke\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j, i</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cfg.color[falg]&#125;)</div><div class=\"line\">    .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"3px\"</span>)</div><div class=\"line\">    .style(<span class=\"string\">\"fill-opacity\"</span>, <span class=\"number\">0</span>) </div><div class=\"line\">    .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'id_'</span>+i+<span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    falg++</div><div class=\"line\">    radarRadius = <span class=\"number\">0</span></div><div class=\"line\">    radiusData.length = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"D3.js地图绘制","date":"2016-12-26T13:29:38.000Z","_content":"\n使用D3.js供绘制一个重庆地图；地图添加立体效果；地图上标注点；添加提示框；地图钻取。\n\n<!--more--> \n\n#### css代码\n```css\n#mapWrap{\n  position: relative;\n  width: 900px;\n\n}\n.tooltip{\n  position: absolute;\n  color: #fff;\n  background: #040931;\n  border: 1px solid #fff;\n  padding: 10px;\n  border-radius: 5px;\n  display: none;\n}\n.back{\n  position: absolute;\n  right: 10px;\n  color: #fff;\n  color: #fff;\n  padding: 10px;\n  display: none;\n}\n\n```\n##### html代码\n\n```html\n<div id=\"mapWrap\">\n  <div class=\"tooltip\"></div>\n  <div class=\"back\"></div>\n</div>\n<script src=\"js/lib/sea.js\"></script>\n<script>\nseajs.use(['./js/map2'], function(map){\n  map.init()\n})\n</script>\n```\n\n```javascript\ndefine(function(require) {\n\n  require('./lib/d3')\n  require('./lib/util')\n\n  var data = [\n    {\n    \"name\": \"丰都县\",\n    \"geoCoord\": [107.74845, 30.182199999999998]\n    },{\n    \"name\": \"云阳县\",\n    \"geoCoord\": [108.83034075456257, 31.009656231968137]\n    },{\n    \"name\": \"酉阳县\",\n    \"geoCoord\": [108.81187677218037, 28.867136105860993]\n    },{\n    \"name\": \"万州区\",\n    \"geoCoord\": [108.38606641491705, 30.701455057077226]\n    }\n  ]  \n  //配置项\n  var width = 0\n  var height = 0\n  var classname = ''\n  var container = ''\n  var cfg = {}\n\n  var _self = ''\n  var mapData = []\n  var tooltip = d3.select('.tooltip')\n  var mapPath = 'data/map/chongqing.json'\n\n  var map = {\n\n    drawMap: function(){\n      mapData = data\n      _self = this\n      width = 900\n      height = 600\n      classname = 'mapWrap'\n      container = '#mapWrap',\n\n      cfg = {\n        padding: {\n          top: 40,\n          bottom: 40\n        },\n        mapStyle: {\n          fill: '#001e5a',\n          stroke: '#2fb9f8',\n          strokeWidth: 1,\n          transform: \"perspective(1200px) rotateX(60deg) scale(1.2, 1.4) translateZ(0px)\",\n          transformOrigin: \"50% 50% 0px\"\n        },\n        hoverable: {\n          fill: '#04184b'\n        },\n        filter: {\n          fill: '#023ac0'\n        }\n      }\n\n      _self.mapJson(mapPath, mapData)    \n    }, \n\n    mapJson: function(mapPath, mapData){\n\n    var _self = this\n\n    d3.select('.'+classname+'').remove()\n    var mapSvg = d3.select(container)\n    .append(\"svg\")\n    .attr('class', classname)\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .style('padding-top', cfg.padding.top)\n    .style('padding-bottom', cfg.padding.bottom)\n    //.style('transform', cfg.mapStyle.transform)\n    //.style('transform-origin', cfg.mapStyle.transformOrigin)\n\n    d3.json(mapPath, function(error, root){\n\n      //控制地图缩放的大小\n      var features = root.features\n      var scale = Util.getZoomScale(features, width, height),\n      center = Util.getCenters(features);\n\n      var projection = d3.geo.mercator()\n      .scale(scale * 50)\n      .center(center)\n      .translate([width / 2, (height/2 )])\n\n      var path = d3.geo.path().projection(projection);\n\n      var wholeMap = mapSvg.append('g')\n      .classed('mainG', true)\n\n      // _self.getCenters(features)\n      //绘制地图\n      var mainMap = wholeMap.selectAll(\".mainMap\")\n        .data(features)\n        .enter().append(\"path\")\n        .attr(\"fill\",cfg.mapStyle.fill)\n        .attr(\"stroke\",cfg.mapStyle.stroke)  \n        .attr(\"stroke-width\",cfg.mapStyle.strokeWidth)\n        .attr(\"d\", path )\n        .on('mouseover', function(d){\n        var posi = path.centroid(d)\n        d3.select(this)\n        .attr(\"fill\", cfg.hoverable.fill)  \n        .style('cursor', 'pointer')\n        tooltip\n        .style('left', ''+(posi[0]-60)+'px')\n        .style('top', ''+(posi[1]-60)+'px')\n        .style('display', 'block')  \n        .html(d.properties.MC)\n        })\n        .on(\"mouseout\", function(d){\n        d3.select(this)\n        .attr(\"fill\", cfg.mapStyle.fill)  \n        tooltip.style('display', 'none')\n        })\n        .on(\"click\",function(d){\n        tooltip.style('display', 'none')\n        var id = d.properties.ZZJGDM\n        mapPath = 'data/map/fenju/' + id + '.json'\n        mapData = []\n        console.log(mapPath)\n        _self.mapJson(mapPath, mapData)\n        d3.select('.back').style('display', 'block')\n\n    })\n\n    //标注点\n    _self.markPoint(projection, mapData, \".mapWrap\")\n\n    //添加滤镜效果（投影）\n    _self.filter(mapSvg,features,path)\n    })\n    },\n\n    /**\n    * 地图打点\n    *\n    * @param {function} projection 计算点位置的一个算法\n    * @param {Object} lacationData 点的经纬度数据\n    */\n    markPoint: function(projection,lacationData,pId){\n      //标注点\n      var markPoint = d3.select(pId)\n      .insert('g', '.mapWrap')\n      .attr('class', 'markPoint')\n      .attr('width', width)\n      .attr('height', height)\n      //添加点\n      markPoint.selectAll('.circle')\n      .data(lacationData)\n      .enter()\n      .append('circle')\n      .attr('fill', '#efe')\n      .attr('r', 10)\n      .attr(\"cx\", function(d){\n      var coor = projection(d.geoCoord)\n      return coor[0]\n      })\n      .attr(\"cy\",function(d){\n      var coor = projection(d.geoCoord)\n      return coor[1]\n      })\n    },\n\n    /**\n    * 给地图添加滤镜效果\n    *\n    * @param {Object} mapSvg 存放地图的svg容器\n    * @param {Object} features 地图各区域块的数据\n    * @param {function} path 取得或设置地理投影,D3的一个方法函数\n    */\n    filter: function(mapSvg,features,path){\n      var filter = mapSvg.append(\"defs\").append(\"filter\")\n      .attr(\"id\", \"gaussinaBlur\")\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('width', '200%')\n      .attr('height', '200%')\n\n      filter.append(\"feGaussianBlur\")\n      .attr(\"result\", \"blurOut\")\n      .attr(\"in\", \"offOut\")\n      .attr(\"stdDeviation\", \"8\")\n\n      //底部添加一个地图并加阴影效果\n      mapSvg.insert('g', '.mainG')\n      .classed(\"filterG2\", true)\n      .selectAll(\"path\")\n      .data(features)  \n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"transform\",\"translate(0,24)\")\n      .attr(\"filter\",\"url(#gaussinaBlur)\")\n      .attr(\"fill\", cfg.filter.fill)  \n      .attr(\"opacity\",0.4)\n\n      var filterG = mapSvg.insert('g', '.mainG')\n      .classed(\"filterG\", true)\n      .selectAll(\"path\")\n      .data(features)  \n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"transform\",\"translate(0,12)\")\n      .attr(\"fill\",\"#0232af\")\n      .attr(\"stroke\",\"#011a53\")  \n      .attr(\"stroke-width\",2)  \t\t\n\n    },\n\n    //获取地图中心点\n    getCenters: function(features) {\n      var longitudeMin = 100000;\n      var latitudeMin = 100000;\n      var longitudeMax = 0;\n      var latitudeMax = 0;\n      features.forEach(function(e) {\n      var a = d3.geo.bounds(e);\n      if (a[0][0] < longitudeMin) {\n      longitudeMin = a[0][0];\n      }\n      if (a[0][1] < latitudeMin) {\n      latitudeMin = a[0][1];\n      }\n      if (a[1][0] > longitudeMax) {\n      longitudeMax = a[1][0];\n      }\n      if (a[1][1] > latitudeMax) {\n      latitudeMax = a[1][1];\n      }\n      });\n      var a = (longitudeMax + longitudeMin) / 2;\n      var b = (latitudeMax + latitudeMin) / 2;\n      return [a, b];\n    },\n    bindEvent: function(){\n      var _self = this\n      d3.select('.back').on('click', function(e){\n      d3.select('.back').style('display', 'none')\n      mapPath = 'data/map/chongqing.json'\n      var dataUrl = 'data/data.json'\n      _self.mapJson(mapPath, mapData)\n      })\n    },\n\n    init: function(){\n      this.drawMap()\n      this.bindEvent()\n    }\n\n  }\n  return map\n\n})\n\n```\n","source":"_posts/D3.js地图绘制.md","raw":"\ntitle: D3.js地图绘制\ndate: 2016-12-26 21:29:38\ncategories: \n  - 技术\n  - D3.js\ntags: 地图\n---\n\n使用D3.js供绘制一个重庆地图；地图添加立体效果；地图上标注点；添加提示框；地图钻取。\n\n<!--more--> \n\n#### css代码\n```css\n#mapWrap{\n  position: relative;\n  width: 900px;\n\n}\n.tooltip{\n  position: absolute;\n  color: #fff;\n  background: #040931;\n  border: 1px solid #fff;\n  padding: 10px;\n  border-radius: 5px;\n  display: none;\n}\n.back{\n  position: absolute;\n  right: 10px;\n  color: #fff;\n  color: #fff;\n  padding: 10px;\n  display: none;\n}\n\n```\n##### html代码\n\n```html\n<div id=\"mapWrap\">\n  <div class=\"tooltip\"></div>\n  <div class=\"back\"></div>\n</div>\n<script src=\"js/lib/sea.js\"></script>\n<script>\nseajs.use(['./js/map2'], function(map){\n  map.init()\n})\n</script>\n```\n\n```javascript\ndefine(function(require) {\n\n  require('./lib/d3')\n  require('./lib/util')\n\n  var data = [\n    {\n    \"name\": \"丰都县\",\n    \"geoCoord\": [107.74845, 30.182199999999998]\n    },{\n    \"name\": \"云阳县\",\n    \"geoCoord\": [108.83034075456257, 31.009656231968137]\n    },{\n    \"name\": \"酉阳县\",\n    \"geoCoord\": [108.81187677218037, 28.867136105860993]\n    },{\n    \"name\": \"万州区\",\n    \"geoCoord\": [108.38606641491705, 30.701455057077226]\n    }\n  ]  \n  //配置项\n  var width = 0\n  var height = 0\n  var classname = ''\n  var container = ''\n  var cfg = {}\n\n  var _self = ''\n  var mapData = []\n  var tooltip = d3.select('.tooltip')\n  var mapPath = 'data/map/chongqing.json'\n\n  var map = {\n\n    drawMap: function(){\n      mapData = data\n      _self = this\n      width = 900\n      height = 600\n      classname = 'mapWrap'\n      container = '#mapWrap',\n\n      cfg = {\n        padding: {\n          top: 40,\n          bottom: 40\n        },\n        mapStyle: {\n          fill: '#001e5a',\n          stroke: '#2fb9f8',\n          strokeWidth: 1,\n          transform: \"perspective(1200px) rotateX(60deg) scale(1.2, 1.4) translateZ(0px)\",\n          transformOrigin: \"50% 50% 0px\"\n        },\n        hoverable: {\n          fill: '#04184b'\n        },\n        filter: {\n          fill: '#023ac0'\n        }\n      }\n\n      _self.mapJson(mapPath, mapData)    \n    }, \n\n    mapJson: function(mapPath, mapData){\n\n    var _self = this\n\n    d3.select('.'+classname+'').remove()\n    var mapSvg = d3.select(container)\n    .append(\"svg\")\n    .attr('class', classname)\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .style('padding-top', cfg.padding.top)\n    .style('padding-bottom', cfg.padding.bottom)\n    //.style('transform', cfg.mapStyle.transform)\n    //.style('transform-origin', cfg.mapStyle.transformOrigin)\n\n    d3.json(mapPath, function(error, root){\n\n      //控制地图缩放的大小\n      var features = root.features\n      var scale = Util.getZoomScale(features, width, height),\n      center = Util.getCenters(features);\n\n      var projection = d3.geo.mercator()\n      .scale(scale * 50)\n      .center(center)\n      .translate([width / 2, (height/2 )])\n\n      var path = d3.geo.path().projection(projection);\n\n      var wholeMap = mapSvg.append('g')\n      .classed('mainG', true)\n\n      // _self.getCenters(features)\n      //绘制地图\n      var mainMap = wholeMap.selectAll(\".mainMap\")\n        .data(features)\n        .enter().append(\"path\")\n        .attr(\"fill\",cfg.mapStyle.fill)\n        .attr(\"stroke\",cfg.mapStyle.stroke)  \n        .attr(\"stroke-width\",cfg.mapStyle.strokeWidth)\n        .attr(\"d\", path )\n        .on('mouseover', function(d){\n        var posi = path.centroid(d)\n        d3.select(this)\n        .attr(\"fill\", cfg.hoverable.fill)  \n        .style('cursor', 'pointer')\n        tooltip\n        .style('left', ''+(posi[0]-60)+'px')\n        .style('top', ''+(posi[1]-60)+'px')\n        .style('display', 'block')  \n        .html(d.properties.MC)\n        })\n        .on(\"mouseout\", function(d){\n        d3.select(this)\n        .attr(\"fill\", cfg.mapStyle.fill)  \n        tooltip.style('display', 'none')\n        })\n        .on(\"click\",function(d){\n        tooltip.style('display', 'none')\n        var id = d.properties.ZZJGDM\n        mapPath = 'data/map/fenju/' + id + '.json'\n        mapData = []\n        console.log(mapPath)\n        _self.mapJson(mapPath, mapData)\n        d3.select('.back').style('display', 'block')\n\n    })\n\n    //标注点\n    _self.markPoint(projection, mapData, \".mapWrap\")\n\n    //添加滤镜效果（投影）\n    _self.filter(mapSvg,features,path)\n    })\n    },\n\n    /**\n    * 地图打点\n    *\n    * @param {function} projection 计算点位置的一个算法\n    * @param {Object} lacationData 点的经纬度数据\n    */\n    markPoint: function(projection,lacationData,pId){\n      //标注点\n      var markPoint = d3.select(pId)\n      .insert('g', '.mapWrap')\n      .attr('class', 'markPoint')\n      .attr('width', width)\n      .attr('height', height)\n      //添加点\n      markPoint.selectAll('.circle')\n      .data(lacationData)\n      .enter()\n      .append('circle')\n      .attr('fill', '#efe')\n      .attr('r', 10)\n      .attr(\"cx\", function(d){\n      var coor = projection(d.geoCoord)\n      return coor[0]\n      })\n      .attr(\"cy\",function(d){\n      var coor = projection(d.geoCoord)\n      return coor[1]\n      })\n    },\n\n    /**\n    * 给地图添加滤镜效果\n    *\n    * @param {Object} mapSvg 存放地图的svg容器\n    * @param {Object} features 地图各区域块的数据\n    * @param {function} path 取得或设置地理投影,D3的一个方法函数\n    */\n    filter: function(mapSvg,features,path){\n      var filter = mapSvg.append(\"defs\").append(\"filter\")\n      .attr(\"id\", \"gaussinaBlur\")\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('width', '200%')\n      .attr('height', '200%')\n\n      filter.append(\"feGaussianBlur\")\n      .attr(\"result\", \"blurOut\")\n      .attr(\"in\", \"offOut\")\n      .attr(\"stdDeviation\", \"8\")\n\n      //底部添加一个地图并加阴影效果\n      mapSvg.insert('g', '.mainG')\n      .classed(\"filterG2\", true)\n      .selectAll(\"path\")\n      .data(features)  \n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"transform\",\"translate(0,24)\")\n      .attr(\"filter\",\"url(#gaussinaBlur)\")\n      .attr(\"fill\", cfg.filter.fill)  \n      .attr(\"opacity\",0.4)\n\n      var filterG = mapSvg.insert('g', '.mainG')\n      .classed(\"filterG\", true)\n      .selectAll(\"path\")\n      .data(features)  \n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"transform\",\"translate(0,12)\")\n      .attr(\"fill\",\"#0232af\")\n      .attr(\"stroke\",\"#011a53\")  \n      .attr(\"stroke-width\",2)  \t\t\n\n    },\n\n    //获取地图中心点\n    getCenters: function(features) {\n      var longitudeMin = 100000;\n      var latitudeMin = 100000;\n      var longitudeMax = 0;\n      var latitudeMax = 0;\n      features.forEach(function(e) {\n      var a = d3.geo.bounds(e);\n      if (a[0][0] < longitudeMin) {\n      longitudeMin = a[0][0];\n      }\n      if (a[0][1] < latitudeMin) {\n      latitudeMin = a[0][1];\n      }\n      if (a[1][0] > longitudeMax) {\n      longitudeMax = a[1][0];\n      }\n      if (a[1][1] > latitudeMax) {\n      latitudeMax = a[1][1];\n      }\n      });\n      var a = (longitudeMax + longitudeMin) / 2;\n      var b = (latitudeMax + latitudeMin) / 2;\n      return [a, b];\n    },\n    bindEvent: function(){\n      var _self = this\n      d3.select('.back').on('click', function(e){\n      d3.select('.back').style('display', 'none')\n      mapPath = 'data/map/chongqing.json'\n      var dataUrl = 'data/data.json'\n      _self.mapJson(mapPath, mapData)\n      })\n    },\n\n    init: function(){\n      this.drawMap()\n      this.bindEvent()\n    }\n\n  }\n  return map\n\n})\n\n```\n","slug":"D3.js地图绘制","published":1,"updated":"2017-01-09T06:57:49.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4s000q24uu7xrqkp6v","content":"<p>使用D3.js供绘制一个重庆地图；地图添加立体效果；地图上标注点；添加提示框；地图钻取。</p>\n<a id=\"more\"></a> \n<h4 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#mapWrap</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.tooltip</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#040931</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.back</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mapWrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tooltip\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"back\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/lib/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">seajs.use([<span class=\"string\">'./js/map2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>)</span>&#123;</div><div class=\"line\">  map.init()</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./lib/d3'</span>)</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./lib/util'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> data = [</div><div class=\"line\">    &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"丰都县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">107.74845</span>, <span class=\"number\">30.182199999999998</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"云阳县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.83034075456257</span>, <span class=\"number\">31.009656231968137</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"酉阳县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.81187677218037</span>, <span class=\"number\">28.867136105860993</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"万州区\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.38606641491705</span>, <span class=\"number\">30.701455057077226</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]  </div><div class=\"line\">  <span class=\"comment\">//配置项</span></div><div class=\"line\">  <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> classname = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> container = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> cfg = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _self = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mapData = []</div><div class=\"line\">  <span class=\"keyword\">var</span> tooltip = d3.select(<span class=\"string\">'.tooltip'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> mapPath = <span class=\"string\">'data/map/chongqing.json'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> map = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">drawMap</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      mapData = data</div><div class=\"line\">      _self = <span class=\"keyword\">this</span></div><div class=\"line\">      width = <span class=\"number\">900</span></div><div class=\"line\">      height = <span class=\"number\">600</span></div><div class=\"line\">      classname = <span class=\"string\">'mapWrap'</span></div><div class=\"line\">      container = <span class=\"string\">'#mapWrap'</span>,</div><div class=\"line\"></div><div class=\"line\">      cfg = &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">top</span>: <span class=\"number\">40</span>,</div><div class=\"line\">          <span class=\"attr\">bottom</span>: <span class=\"number\">40</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">mapStyle</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#001e5a'</span>,</div><div class=\"line\">          <span class=\"attr\">stroke</span>: <span class=\"string\">'#2fb9f8'</span>,</div><div class=\"line\">          <span class=\"attr\">strokeWidth</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          <span class=\"attr\">transform</span>: <span class=\"string\">\"perspective(1200px) rotateX(60deg) scale(1.2, 1.4) translateZ(0px)\"</span>,</div><div class=\"line\">          <span class=\"attr\">transformOrigin</span>: <span class=\"string\">\"50% 50% 0px\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hoverable</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#04184b'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">filter</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#023ac0'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      _self.mapJson(mapPath, mapData)    </div><div class=\"line\">    &#125;, </div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">mapJson</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapPath, mapData</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">    d3.select(<span class=\"string\">'.'</span>+classname+<span class=\"string\">''</span>).remove()</div><div class=\"line\">    <span class=\"keyword\">var</span> mapSvg = d3.select(container)</div><div class=\"line\">    .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>, classname)</div><div class=\"line\">    .attr(<span class=\"string\">\"width\"</span>, width)</div><div class=\"line\">    .attr(<span class=\"string\">\"height\"</span>, height)</div><div class=\"line\">    .style(<span class=\"string\">'padding-top'</span>, cfg.padding.top)</div><div class=\"line\">    .style(<span class=\"string\">'padding-bottom'</span>, cfg.padding.bottom)</div><div class=\"line\">    <span class=\"comment\">//.style('transform', cfg.mapStyle.transform)</span></div><div class=\"line\">    <span class=\"comment\">//.style('transform-origin', cfg.mapStyle.transformOrigin)</span></div><div class=\"line\"></div><div class=\"line\">    d3.json(mapPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, root</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//控制地图缩放的大小</span></div><div class=\"line\">      <span class=\"keyword\">var</span> features = root.features</div><div class=\"line\">      <span class=\"keyword\">var</span> scale = Util.getZoomScale(features, width, height),</div><div class=\"line\">      center = Util.getCenters(features);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> projection = d3.geo.mercator()</div><div class=\"line\">      .scale(scale * <span class=\"number\">50</span>)</div><div class=\"line\">      .center(center)</div><div class=\"line\">      .translate([width / <span class=\"number\">2</span>, (height/<span class=\"number\">2</span> )])</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> path = d3.geo.path().projection(projection);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> wholeMap = mapSvg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">'mainG'</span>, <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// _self.getCenters(features)</span></div><div class=\"line\">      <span class=\"comment\">//绘制地图</span></div><div class=\"line\">      <span class=\"keyword\">var</span> mainMap = wholeMap.selectAll(<span class=\"string\">\".mainMap\"</span>)</div><div class=\"line\">        .data(features)</div><div class=\"line\">        .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>,cfg.mapStyle.fill)</div><div class=\"line\">        .attr(<span class=\"string\">\"stroke\"</span>,cfg.mapStyle.stroke)  </div><div class=\"line\">        .attr(<span class=\"string\">\"stroke-width\"</span>,cfg.mapStyle.strokeWidth)</div><div class=\"line\">        .attr(<span class=\"string\">\"d\"</span>, path )</div><div class=\"line\">        .on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> posi = path.centroid(d)</div><div class=\"line\">        d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>, cfg.hoverable.fill)  </div><div class=\"line\">        .style(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>)</div><div class=\"line\">        tooltip</div><div class=\"line\">        .style(<span class=\"string\">'left'</span>, <span class=\"string\">''</span>+(posi[<span class=\"number\">0</span>]<span class=\"number\">-60</span>)+<span class=\"string\">'px'</span>)</div><div class=\"line\">        .style(<span class=\"string\">'top'</span>, <span class=\"string\">''</span>+(posi[<span class=\"number\">1</span>]<span class=\"number\">-60</span>)+<span class=\"string\">'px'</span>)</div><div class=\"line\">        .style(<span class=\"string\">'display'</span>, <span class=\"string\">'block'</span>)  </div><div class=\"line\">        .html(d.properties.MC)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .on(<span class=\"string\">\"mouseout\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>, cfg.mapStyle.fill)  </div><div class=\"line\">        tooltip.style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        tooltip.style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">        <span class=\"keyword\">var</span> id = d.properties.ZZJGDM</div><div class=\"line\">        mapPath = <span class=\"string\">'data/map/fenju/'</span> + id + <span class=\"string\">'.json'</span></div><div class=\"line\">        mapData = []</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(mapPath)</div><div class=\"line\">        _self.mapJson(mapPath, mapData)</div><div class=\"line\">        d3.select(<span class=\"string\">'.back'</span>).style(<span class=\"string\">'display'</span>, <span class=\"string\">'block'</span>)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//标注点</span></div><div class=\"line\">    _self.markPoint(projection, mapData, <span class=\"string\">\".mapWrap\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//添加滤镜效果（投影）</span></div><div class=\"line\">    _self.filter(mapSvg,features,path)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 地图打点</div><div class=\"line\">    *</div><div class=\"line\">    * @param &#123;function&#125; projection 计算点位置的一个算法</div><div class=\"line\">    * @param &#123;Object&#125; lacationData 点的经纬度数据</div><div class=\"line\">    */</div><div class=\"line\">    markPoint: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">projection,lacationData,pId</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//标注点</span></div><div class=\"line\">      <span class=\"keyword\">var</span> markPoint = d3.select(pId)</div><div class=\"line\">      .insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mapWrap'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'markPoint'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>, width)</div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>, height)</div><div class=\"line\">      <span class=\"comment\">//添加点</span></div><div class=\"line\">      markPoint.selectAll(<span class=\"string\">'.circle'</span>)</div><div class=\"line\">      .data(lacationData)</div><div class=\"line\">      .enter()</div><div class=\"line\">      .append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'#efe'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'r'</span>, <span class=\"number\">10</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> coor = projection(d.geoCoord)</div><div class=\"line\">      <span class=\"keyword\">return</span> coor[<span class=\"number\">0</span>]</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">\"cy\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> coor = projection(d.geoCoord)</div><div class=\"line\">      <span class=\"keyword\">return</span> coor[<span class=\"number\">1</span>]</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 给地图添加滤镜效果</div><div class=\"line\">    *</div><div class=\"line\">    * @param &#123;Object&#125; mapSvg 存放地图的svg容器</div><div class=\"line\">    * @param &#123;Object&#125; features 地图各区域块的数据</div><div class=\"line\">    * @param &#123;function&#125; path 取得或设置地理投影,D3的一个方法函数</div><div class=\"line\">    */</div><div class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapSvg,features,path</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> filter = mapSvg.append(<span class=\"string\">\"defs\"</span>).append(<span class=\"string\">\"filter\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"gaussinaBlur\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'x'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'y'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>, <span class=\"string\">'200%'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>, <span class=\"string\">'200%'</span>)</div><div class=\"line\"></div><div class=\"line\">      filter.append(<span class=\"string\">\"feGaussianBlur\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"result\"</span>, <span class=\"string\">\"blurOut\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"in\"</span>, <span class=\"string\">\"offOut\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"stdDeviation\"</span>, <span class=\"string\">\"8\"</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//底部添加一个地图并加阴影效果</span></div><div class=\"line\">      mapSvg.insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mainG'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">\"filterG2\"</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">      .selectAll(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .data(features)  </div><div class=\"line\">      .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"d\"</span>, path)</div><div class=\"line\">      .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(0,24)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"filter\"</span>,<span class=\"string\">\"url(#gaussinaBlur)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"fill\"</span>, cfg.filter.fill)  </div><div class=\"line\">      .attr(<span class=\"string\">\"opacity\"</span>,<span class=\"number\">0.4</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> filterG = mapSvg.insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mainG'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">\"filterG\"</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">      .selectAll(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .data(features)  </div><div class=\"line\">      .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"d\"</span>, path)</div><div class=\"line\">      .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(0,12)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"#0232af\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"stroke\"</span>,<span class=\"string\">\"#011a53\"</span>)  </div><div class=\"line\">      .attr(<span class=\"string\">\"stroke-width\"</span>,<span class=\"number\">2</span>)  \t\t</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取地图中心点</span></div><div class=\"line\">    getCenters: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">features</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> longitudeMin = <span class=\"number\">100000</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> latitudeMin = <span class=\"number\">100000</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> longitudeMax = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> latitudeMax = <span class=\"number\">0</span>;</div><div class=\"line\">      features.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = d3.geo.bounds(e);</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt; longitudeMin) &#123;</div><div class=\"line\">      longitudeMin = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] &lt; latitudeMin) &#123;</div><div class=\"line\">      latitudeMin = a[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] &gt; longitudeMax) &#123;</div><div class=\"line\">      longitudeMax = a[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &gt; latitudeMax) &#123;</div><div class=\"line\">      latitudeMax = a[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">var</span> a = (longitudeMax + longitudeMin) / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> b = (latitudeMax + latitudeMin) / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> [a, b];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span></div><div class=\"line\">      d3.select(<span class=\"string\">'.back'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">      d3.select(<span class=\"string\">'.back'</span>).style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">      mapPath = <span class=\"string\">'data/map/chongqing.json'</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataUrl = <span class=\"string\">'data/data.json'</span></div><div class=\"line\">      _self.mapJson(mapPath, mapData)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.drawMap()</div><div class=\"line\">      <span class=\"keyword\">this</span>.bindEvent()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> map</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"<p>使用D3.js供绘制一个重庆地图；地图添加立体效果；地图上标注点；添加提示框；地图钻取。</p>","more":"<h4 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#mapWrap</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.tooltip</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#040931</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.back</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mapWrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tooltip\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"back\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/lib/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">seajs.use([<span class=\"string\">'./js/map2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>)</span>&#123;</div><div class=\"line\">  map.init()</div><div class=\"line\">&#125;)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./lib/d3'</span>)</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./lib/util'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> data = [</div><div class=\"line\">    &#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"丰都县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">107.74845</span>, <span class=\"number\">30.182199999999998</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"云阳县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.83034075456257</span>, <span class=\"number\">31.009656231968137</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"酉阳县\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.81187677218037</span>, <span class=\"number\">28.867136105860993</span>]</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"万州区\"</span>,</div><div class=\"line\">    <span class=\"string\">\"geoCoord\"</span>: [<span class=\"number\">108.38606641491705</span>, <span class=\"number\">30.701455057077226</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]  </div><div class=\"line\">  <span class=\"comment\">//配置项</span></div><div class=\"line\">  <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> classname = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> container = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> cfg = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _self = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mapData = []</div><div class=\"line\">  <span class=\"keyword\">var</span> tooltip = d3.select(<span class=\"string\">'.tooltip'</span>)</div><div class=\"line\">  <span class=\"keyword\">var</span> mapPath = <span class=\"string\">'data/map/chongqing.json'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> map = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">drawMap</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      mapData = data</div><div class=\"line\">      _self = <span class=\"keyword\">this</span></div><div class=\"line\">      width = <span class=\"number\">900</span></div><div class=\"line\">      height = <span class=\"number\">600</span></div><div class=\"line\">      classname = <span class=\"string\">'mapWrap'</span></div><div class=\"line\">      container = <span class=\"string\">'#mapWrap'</span>,</div><div class=\"line\"></div><div class=\"line\">      cfg = &#123;</div><div class=\"line\">        <span class=\"attr\">padding</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">top</span>: <span class=\"number\">40</span>,</div><div class=\"line\">          <span class=\"attr\">bottom</span>: <span class=\"number\">40</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">mapStyle</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#001e5a'</span>,</div><div class=\"line\">          <span class=\"attr\">stroke</span>: <span class=\"string\">'#2fb9f8'</span>,</div><div class=\"line\">          <span class=\"attr\">strokeWidth</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          <span class=\"attr\">transform</span>: <span class=\"string\">\"perspective(1200px) rotateX(60deg) scale(1.2, 1.4) translateZ(0px)\"</span>,</div><div class=\"line\">          <span class=\"attr\">transformOrigin</span>: <span class=\"string\">\"50% 50% 0px\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hoverable</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#04184b'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">filter</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">fill</span>: <span class=\"string\">'#023ac0'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      _self.mapJson(mapPath, mapData)    </div><div class=\"line\">    &#125;, </div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">mapJson</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapPath, mapData</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">    d3.select(<span class=\"string\">'.'</span>+classname+<span class=\"string\">''</span>).remove()</div><div class=\"line\">    <span class=\"keyword\">var</span> mapSvg = d3.select(container)</div><div class=\"line\">    .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">    .attr(<span class=\"string\">'class'</span>, classname)</div><div class=\"line\">    .attr(<span class=\"string\">\"width\"</span>, width)</div><div class=\"line\">    .attr(<span class=\"string\">\"height\"</span>, height)</div><div class=\"line\">    .style(<span class=\"string\">'padding-top'</span>, cfg.padding.top)</div><div class=\"line\">    .style(<span class=\"string\">'padding-bottom'</span>, cfg.padding.bottom)</div><div class=\"line\">    <span class=\"comment\">//.style('transform', cfg.mapStyle.transform)</span></div><div class=\"line\">    <span class=\"comment\">//.style('transform-origin', cfg.mapStyle.transformOrigin)</span></div><div class=\"line\"></div><div class=\"line\">    d3.json(mapPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, root</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//控制地图缩放的大小</span></div><div class=\"line\">      <span class=\"keyword\">var</span> features = root.features</div><div class=\"line\">      <span class=\"keyword\">var</span> scale = Util.getZoomScale(features, width, height),</div><div class=\"line\">      center = Util.getCenters(features);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> projection = d3.geo.mercator()</div><div class=\"line\">      .scale(scale * <span class=\"number\">50</span>)</div><div class=\"line\">      .center(center)</div><div class=\"line\">      .translate([width / <span class=\"number\">2</span>, (height/<span class=\"number\">2</span> )])</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> path = d3.geo.path().projection(projection);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> wholeMap = mapSvg.append(<span class=\"string\">'g'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">'mainG'</span>, <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// _self.getCenters(features)</span></div><div class=\"line\">      <span class=\"comment\">//绘制地图</span></div><div class=\"line\">      <span class=\"keyword\">var</span> mainMap = wholeMap.selectAll(<span class=\"string\">\".mainMap\"</span>)</div><div class=\"line\">        .data(features)</div><div class=\"line\">        .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>,cfg.mapStyle.fill)</div><div class=\"line\">        .attr(<span class=\"string\">\"stroke\"</span>,cfg.mapStyle.stroke)  </div><div class=\"line\">        .attr(<span class=\"string\">\"stroke-width\"</span>,cfg.mapStyle.strokeWidth)</div><div class=\"line\">        .attr(<span class=\"string\">\"d\"</span>, path )</div><div class=\"line\">        .on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> posi = path.centroid(d)</div><div class=\"line\">        d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>, cfg.hoverable.fill)  </div><div class=\"line\">        .style(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>)</div><div class=\"line\">        tooltip</div><div class=\"line\">        .style(<span class=\"string\">'left'</span>, <span class=\"string\">''</span>+(posi[<span class=\"number\">0</span>]<span class=\"number\">-60</span>)+<span class=\"string\">'px'</span>)</div><div class=\"line\">        .style(<span class=\"string\">'top'</span>, <span class=\"string\">''</span>+(posi[<span class=\"number\">1</span>]<span class=\"number\">-60</span>)+<span class=\"string\">'px'</span>)</div><div class=\"line\">        .style(<span class=\"string\">'display'</span>, <span class=\"string\">'block'</span>)  </div><div class=\"line\">        .html(d.properties.MC)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .on(<span class=\"string\">\"mouseout\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"fill\"</span>, cfg.mapStyle.fill)  </div><div class=\"line\">        tooltip.style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">        tooltip.style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">        <span class=\"keyword\">var</span> id = d.properties.ZZJGDM</div><div class=\"line\">        mapPath = <span class=\"string\">'data/map/fenju/'</span> + id + <span class=\"string\">'.json'</span></div><div class=\"line\">        mapData = []</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(mapPath)</div><div class=\"line\">        _self.mapJson(mapPath, mapData)</div><div class=\"line\">        d3.select(<span class=\"string\">'.back'</span>).style(<span class=\"string\">'display'</span>, <span class=\"string\">'block'</span>)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//标注点</span></div><div class=\"line\">    _self.markPoint(projection, mapData, <span class=\"string\">\".mapWrap\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//添加滤镜效果（投影）</span></div><div class=\"line\">    _self.filter(mapSvg,features,path)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 地图打点</div><div class=\"line\">    *</div><div class=\"line\">    * @param &#123;function&#125; projection 计算点位置的一个算法</div><div class=\"line\">    * @param &#123;Object&#125; lacationData 点的经纬度数据</div><div class=\"line\">    */</span></div><div class=\"line\">    markPoint: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">projection,lacationData,pId</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//标注点</span></div><div class=\"line\">      <span class=\"keyword\">var</span> markPoint = d3.select(pId)</div><div class=\"line\">      .insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mapWrap'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'markPoint'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>, width)</div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>, height)</div><div class=\"line\">      <span class=\"comment\">//添加点</span></div><div class=\"line\">      markPoint.selectAll(<span class=\"string\">'.circle'</span>)</div><div class=\"line\">      .data(lacationData)</div><div class=\"line\">      .enter()</div><div class=\"line\">      .append(<span class=\"string\">'circle'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'#efe'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'r'</span>, <span class=\"number\">10</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> coor = projection(d.geoCoord)</div><div class=\"line\">      <span class=\"keyword\">return</span> coor[<span class=\"number\">0</span>]</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .attr(<span class=\"string\">\"cy\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> coor = projection(d.geoCoord)</div><div class=\"line\">      <span class=\"keyword\">return</span> coor[<span class=\"number\">1</span>]</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 给地图添加滤镜效果</div><div class=\"line\">    *</div><div class=\"line\">    * @param &#123;Object&#125; mapSvg 存放地图的svg容器</div><div class=\"line\">    * @param &#123;Object&#125; features 地图各区域块的数据</div><div class=\"line\">    * @param &#123;function&#125; path 取得或设置地理投影,D3的一个方法函数</div><div class=\"line\">    */</span></div><div class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapSvg,features,path</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> filter = mapSvg.append(<span class=\"string\">\"defs\"</span>).append(<span class=\"string\">\"filter\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"gaussinaBlur\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'x'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'y'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'width'</span>, <span class=\"string\">'200%'</span>)</div><div class=\"line\">      .attr(<span class=\"string\">'height'</span>, <span class=\"string\">'200%'</span>)</div><div class=\"line\"></div><div class=\"line\">      filter.append(<span class=\"string\">\"feGaussianBlur\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"result\"</span>, <span class=\"string\">\"blurOut\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"in\"</span>, <span class=\"string\">\"offOut\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"stdDeviation\"</span>, <span class=\"string\">\"8\"</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//底部添加一个地图并加阴影效果</span></div><div class=\"line\">      mapSvg.insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mainG'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">\"filterG2\"</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">      .selectAll(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .data(features)  </div><div class=\"line\">      .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"d\"</span>, path)</div><div class=\"line\">      .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(0,24)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"filter\"</span>,<span class=\"string\">\"url(#gaussinaBlur)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"fill\"</span>, cfg.filter.fill)  </div><div class=\"line\">      .attr(<span class=\"string\">\"opacity\"</span>,<span class=\"number\">0.4</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> filterG = mapSvg.insert(<span class=\"string\">'g'</span>, <span class=\"string\">'.mainG'</span>)</div><div class=\"line\">      .classed(<span class=\"string\">\"filterG\"</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">      .selectAll(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .data(features)  </div><div class=\"line\">      .enter().append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"d\"</span>, path)</div><div class=\"line\">      .attr(<span class=\"string\">\"transform\"</span>,<span class=\"string\">\"translate(0,12)\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"#0232af\"</span>)</div><div class=\"line\">      .attr(<span class=\"string\">\"stroke\"</span>,<span class=\"string\">\"#011a53\"</span>)  </div><div class=\"line\">      .attr(<span class=\"string\">\"stroke-width\"</span>,<span class=\"number\">2</span>)  \t\t</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取地图中心点</span></div><div class=\"line\">    getCenters: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">features</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> longitudeMin = <span class=\"number\">100000</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> latitudeMin = <span class=\"number\">100000</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> longitudeMax = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> latitudeMax = <span class=\"number\">0</span>;</div><div class=\"line\">      features.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = d3.geo.bounds(e);</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt; longitudeMin) &#123;</div><div class=\"line\">      longitudeMin = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] &lt; latitudeMin) &#123;</div><div class=\"line\">      latitudeMin = a[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] &gt; longitudeMax) &#123;</div><div class=\"line\">      longitudeMax = a[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &gt; latitudeMax) &#123;</div><div class=\"line\">      latitudeMax = a[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">var</span> a = (longitudeMax + longitudeMin) / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> b = (latitudeMax + latitudeMin) / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> [a, b];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span></div><div class=\"line\">      d3.select(<span class=\"string\">'.back'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">      d3.select(<span class=\"string\">'.back'</span>).style(<span class=\"string\">'display'</span>, <span class=\"string\">'none'</span>)</div><div class=\"line\">      mapPath = <span class=\"string\">'data/map/chongqing.json'</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataUrl = <span class=\"string\">'data/data.json'</span></div><div class=\"line\">      _self.mapJson(mapPath, mapData)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.drawMap()</div><div class=\"line\">      <span class=\"keyword\">this</span>.bindEvent()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> map</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"D3.js实现文本的换行","date":"2016-12-17T15:29:40.000Z","_content":"\n 在SVG中添加文本是使用text元素。但这个元素不能够自动换行，超出的部分就显示不出来了，怎么办呢？下面通过这篇文章来给大家详细介绍下实现的过程。\n\n<!--more--> \n##### 现有一字符串：\n\n```javascript\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\n```\n##### 在 body 里添加一个 svg 元素，大小如下：\n\n```javascript\nvar width = 300;\nvar height = 300;\nvar svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\",width)\n  .attr(\"height\",height);\n```\n\n显示结果如下： \n\n![](/css/images/code1.png)\n\n可以看到，虽然 text 元素标签的内容有整个字符串，但是由于 <code>svg</code> 的宽度只有 300，显示不了这么长的字符串，因此多余的部分看不到。\n怎么办？自然是要换行。\n二、在 <code>text</code> 中添加 <code>tspan</code> 子元素\n<code>SVG</code>中的文本不支持自动换行，需要手动实现。其中一种方法就是使用 <code>tspan</code> 标签。\n<code>tspan</code> 是写在 <code>text</code> 中的，作为其子元素存在。设置文本属性的时候，有一个 <code>dy</code> 属性，表示 y 轴的相对位移，dy 的值通常用 10px、1em 这样的值，其中 em 是以行为单位的。\n这样，我们就可以在 <code>text</code> 中添加多个 <code>tspan</code>，每个代表一行。每一个 <code>tspan</code>属性都赋予一个 1em 值（即一行）。如此，文本就会一行一行地显示了。\n\n##### svg代码为：\n\n```javascript\n<text x=\"30\" y=\"100\" font-size=\"30\" font-family=\"simsun\">\n    <tspan x=\"30\" dy=\"1em\">夜来幽梦忽还乡</tspan>\n    <tspan x=\"30\" dy=\"1em\">小轩窗</tspan>\n    <tspan x=\"30\" dy=\"1em\">正梳妆</tspan>\n</text>\n```\n要注意，<code>tspan</code> 中的 <code>x</code> 属性是必要的，表示下一行也从 x = 30 处开始显示。\n\n##### D3 的代码怎么写\n对于第一节的字符串，先在 svg 中添加一个 text 元素，但是不设定其内容。\n\n```javascript\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\nvar text = svg.append(\"text\")\n    .attr(\"x\",30)\n    .attr(\"y\",100)\n    .attr(\"font-size\",30)\n    .attr(\"font-family\",\"simsun\");\n\n// 使用 JavaScript 字符串的 split 将 str 分段：\nvar strs = str.split(\"，\") ;\n```\n用逗号作为分隔符，分为几段。输出结果为一个数组，数组中的各项是各子字符串。则 strs 的值为：\n\n[\"云中谁寄锦书来\", \"雁字回时\", \"月满西楼\"]\n\n好，接下来是重点，在 text 元素上绑定数据，并添加与 strs 长度相同的 tspan 元素。然后，为其 x 和 dy 属性赋值，再指定字符串内容即可。\n代码如下：\n```javascript\ntext.selectAll(\"tspan\")\n  .data(strs)\n  .enter()\n  .append(\"tspan\")\n  .attr(\"x\",text.attr(\"x\"))\n  .attr(\"dy\",\"1em\")\n  .text(function(d){\n    return d;\n  });\n```\n##### 显示结果如下：\n![](/css/images/code2.png)\n\n##### 完整的示例代码：\n```html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>文字换行</title>\n</head>\n<body>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<script>\nvar width = 300;\nvar height = 300;\nvar svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\",width)\n  .attr(\"height\",height);\n\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\n\nvar text = svg.append(\"text\")\n  .attr(\"x\",30)\n  .attr(\"y\",100)\n  .attr(\"font-size\",30)\n  .attr(\"font-family\",\"simsun\");\n\nvar strs = str.split(\"，\") ;\nconsole.log(strs);\n\ntext.selectAll(\"tspan\")\n.data(strs)\n.enter()\n.append(\"tspan\")\n.attr(\"x\",text.attr(\"x\"))\n.attr(\"dy\",\"1em\")\n.text(function(d){\n  return d;\n});\n</script>\n</body>\n</html>\n```","source":"_posts/D3.js实现文本的换行.md","raw":"---\ntitle: D3.js实现文本的换行\ndate: 2016-12-17 23:29:40\ncategories: \n  - 技术\n  - D3.js\ntags: D3.js\n---\n\n 在SVG中添加文本是使用text元素。但这个元素不能够自动换行，超出的部分就显示不出来了，怎么办呢？下面通过这篇文章来给大家详细介绍下实现的过程。\n\n<!--more--> \n##### 现有一字符串：\n\n```javascript\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\n```\n##### 在 body 里添加一个 svg 元素，大小如下：\n\n```javascript\nvar width = 300;\nvar height = 300;\nvar svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\",width)\n  .attr(\"height\",height);\n```\n\n显示结果如下： \n\n![](/css/images/code1.png)\n\n可以看到，虽然 text 元素标签的内容有整个字符串，但是由于 <code>svg</code> 的宽度只有 300，显示不了这么长的字符串，因此多余的部分看不到。\n怎么办？自然是要换行。\n二、在 <code>text</code> 中添加 <code>tspan</code> 子元素\n<code>SVG</code>中的文本不支持自动换行，需要手动实现。其中一种方法就是使用 <code>tspan</code> 标签。\n<code>tspan</code> 是写在 <code>text</code> 中的，作为其子元素存在。设置文本属性的时候，有一个 <code>dy</code> 属性，表示 y 轴的相对位移，dy 的值通常用 10px、1em 这样的值，其中 em 是以行为单位的。\n这样，我们就可以在 <code>text</code> 中添加多个 <code>tspan</code>，每个代表一行。每一个 <code>tspan</code>属性都赋予一个 1em 值（即一行）。如此，文本就会一行一行地显示了。\n\n##### svg代码为：\n\n```javascript\n<text x=\"30\" y=\"100\" font-size=\"30\" font-family=\"simsun\">\n    <tspan x=\"30\" dy=\"1em\">夜来幽梦忽还乡</tspan>\n    <tspan x=\"30\" dy=\"1em\">小轩窗</tspan>\n    <tspan x=\"30\" dy=\"1em\">正梳妆</tspan>\n</text>\n```\n要注意，<code>tspan</code> 中的 <code>x</code> 属性是必要的，表示下一行也从 x = 30 处开始显示。\n\n##### D3 的代码怎么写\n对于第一节的字符串，先在 svg 中添加一个 text 元素，但是不设定其内容。\n\n```javascript\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\nvar text = svg.append(\"text\")\n    .attr(\"x\",30)\n    .attr(\"y\",100)\n    .attr(\"font-size\",30)\n    .attr(\"font-family\",\"simsun\");\n\n// 使用 JavaScript 字符串的 split 将 str 分段：\nvar strs = str.split(\"，\") ;\n```\n用逗号作为分隔符，分为几段。输出结果为一个数组，数组中的各项是各子字符串。则 strs 的值为：\n\n[\"云中谁寄锦书来\", \"雁字回时\", \"月满西楼\"]\n\n好，接下来是重点，在 text 元素上绑定数据，并添加与 strs 长度相同的 tspan 元素。然后，为其 x 和 dy 属性赋值，再指定字符串内容即可。\n代码如下：\n```javascript\ntext.selectAll(\"tspan\")\n  .data(strs)\n  .enter()\n  .append(\"tspan\")\n  .attr(\"x\",text.attr(\"x\"))\n  .attr(\"dy\",\"1em\")\n  .text(function(d){\n    return d;\n  });\n```\n##### 显示结果如下：\n![](/css/images/code2.png)\n\n##### 完整的示例代码：\n```html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>文字换行</title>\n</head>\n<body>\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n<script>\nvar width = 300;\nvar height = 300;\nvar svg = d3.select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\",width)\n  .attr(\"height\",height);\n\nvar str = \"云中谁寄锦书来，雁字回时，月满西楼\";\n\nvar text = svg.append(\"text\")\n  .attr(\"x\",30)\n  .attr(\"y\",100)\n  .attr(\"font-size\",30)\n  .attr(\"font-family\",\"simsun\");\n\nvar strs = str.split(\"，\") ;\nconsole.log(strs);\n\ntext.selectAll(\"tspan\")\n.data(strs)\n.enter()\n.append(\"tspan\")\n.attr(\"x\",text.attr(\"x\"))\n.attr(\"dy\",\"1em\")\n.text(function(d){\n  return d;\n});\n</script>\n</body>\n</html>\n```","slug":"D3.js实现文本的换行","published":1,"updated":"2016-12-29T05:01:27.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4v000s24uute1fhfin","content":"<p> 在SVG中添加文本是使用text元素。但这个元素不能够自动换行，超出的部分就显示不出来了，怎么办呢？下面通过这篇文章来给大家详细介绍下实现的过程。</p>\n<a id=\"more\"></a> \n<h5 id=\"现有一字符串：\"><a href=\"#现有一字符串：\" class=\"headerlink\" title=\"现有一字符串：\"></a>现有一字符串：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"在-body-里添加一个-svg-元素，大小如下：\"><a href=\"#在-body-里添加一个-svg-元素，大小如下：\" class=\"headerlink\" title=\"在 body 里添加一个 svg 元素，大小如下：\"></a>在 body 里添加一个 svg 元素，大小如下：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"width\"</span>,width)</div><div class=\"line\">  .attr(<span class=\"string\">\"height\"</span>,height);</div></pre></td></tr></table></figure>\n<p>显示结果如下： </p>\n<p><img src=\"/css/images/code1.png\" alt=\"\"></p>\n<p>可以看到，虽然 text 元素标签的内容有整个字符串，但是由于 <code>svg</code> 的宽度只有 300，显示不了这么长的字符串，因此多余的部分看不到。<br>怎么办？自然是要换行。<br>二、在 <code>text</code> 中添加 <code>tspan</code> 子元素<br><code>SVG</code>中的文本不支持自动换行，需要手动实现。其中一种方法就是使用 <code>tspan</code> 标签。<br><code>tspan</code> 是写在 <code>text</code> 中的，作为其子元素存在。设置文本属性的时候，有一个 <code>dy</code> 属性，表示 y 轴的相对位移，dy 的值通常用 10px、1em 这样的值，其中 em 是以行为单位的。<br>这样，我们就可以在 <code>text</code> 中添加多个 <code>tspan</code>，每个代表一行。每一个 <code>tspan</code>属性都赋予一个 1em 值（即一行）。如此，文本就会一行一行地显示了。</p>\n<h5 id=\"svg代码为：\"><a href=\"#svg代码为：\" class=\"headerlink\" title=\"svg代码为：\"></a>svg代码为：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;text x=\"30\" y=\"100\" font-size=\"30\" font-family=\"simsun\"&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;夜来幽梦忽还乡&lt;/tspan&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;小轩窗&lt;/tspan&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;正梳妆&lt;/tspan&gt;</div><div class=\"line\">&lt;/text&gt;</div></pre></td></tr></table></figure>\n<p>要注意，<code>tspan</code> 中的 <code>x</code> 属性是必要的，表示下一行也从 x = 30 处开始显示。</p>\n<h5 id=\"D3-的代码怎么写\"><a href=\"#D3-的代码怎么写\" class=\"headerlink\" title=\"D3 的代码怎么写\"></a>D3 的代码怎么写</h5><p>对于第一节的字符串，先在 svg 中添加一个 text 元素，但是不设定其内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> text = svg.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">100</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"font-size\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"font-family\"</span>,<span class=\"string\">\"simsun\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 JavaScript 字符串的 split 将 str 分段：</span></div><div class=\"line\"><span class=\"keyword\">var</span> strs = str.split(<span class=\"string\">\"，\"</span>) ;</div></pre></td></tr></table></figure>\n<p>用逗号作为分隔符，分为几段。输出结果为一个数组，数组中的各项是各子字符串。则 strs 的值为：</p>\n<p>[“云中谁寄锦书来”, “雁字回时”, “月满西楼”]</p>\n<p>好，接下来是重点，在 text 元素上绑定数据，并添加与 strs 长度相同的 tspan 元素。然后，为其 x 和 dy 属性赋值，再指定字符串内容即可。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">text.selectAll(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">  .data(strs)</div><div class=\"line\">  .enter()</div><div class=\"line\">  .append(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"x\"</span>,text.attr(<span class=\"string\">\"x\"</span>))</div><div class=\"line\">  .attr(<span class=\"string\">\"dy\"</span>,<span class=\"string\">\"1em\"</span>)</div><div class=\"line\">  .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"显示结果如下：\"><a href=\"#显示结果如下：\" class=\"headerlink\" title=\"显示结果如下：\"></a>显示结果如下：</h5><p><img src=\"/css/images/code2.png\" alt=\"\"></p>\n<h5 id=\"完整的示例代码：\"><a href=\"#完整的示例代码：\" class=\"headerlink\" title=\"完整的示例代码：\"></a>完整的示例代码：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文字换行<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://d3js.org/d3.v3.min.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"width\"</span>,width)</div><div class=\"line\">  .attr(<span class=\"string\">\"height\"</span>,height);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> text = svg.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"font-size\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"font-family\"</span>,<span class=\"string\">\"simsun\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> strs = str.split(<span class=\"string\">\"，\"</span>) ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(strs);</div><div class=\"line\"></div><div class=\"line\">text.selectAll(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">.data(strs)</div><div class=\"line\">.enter()</div><div class=\"line\">.append(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">.attr(<span class=\"string\">\"x\"</span>,text.attr(<span class=\"string\">\"x\"</span>))</div><div class=\"line\">.attr(<span class=\"string\">\"dy\"</span>,<span class=\"string\">\"1em\"</span>)</div><div class=\"line\">.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> d;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p> 在SVG中添加文本是使用text元素。但这个元素不能够自动换行，超出的部分就显示不出来了，怎么办呢？下面通过这篇文章来给大家详细介绍下实现的过程。</p>","more":"<h5 id=\"现有一字符串：\"><a href=\"#现有一字符串：\" class=\"headerlink\" title=\"现有一字符串：\"></a>现有一字符串：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"在-body-里添加一个-svg-元素，大小如下：\"><a href=\"#在-body-里添加一个-svg-元素，大小如下：\" class=\"headerlink\" title=\"在 body 里添加一个 svg 元素，大小如下：\"></a>在 body 里添加一个 svg 元素，大小如下：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"width\"</span>,width)</div><div class=\"line\">  .attr(<span class=\"string\">\"height\"</span>,height);</div></pre></td></tr></table></figure>\n<p>显示结果如下： </p>\n<p><img src=\"/css/images/code1.png\" alt=\"\"></p>\n<p>可以看到，虽然 text 元素标签的内容有整个字符串，但是由于 <code>svg</code> 的宽度只有 300，显示不了这么长的字符串，因此多余的部分看不到。<br>怎么办？自然是要换行。<br>二、在 <code>text</code> 中添加 <code>tspan</code> 子元素<br><code>SVG</code>中的文本不支持自动换行，需要手动实现。其中一种方法就是使用 <code>tspan</code> 标签。<br><code>tspan</code> 是写在 <code>text</code> 中的，作为其子元素存在。设置文本属性的时候，有一个 <code>dy</code> 属性，表示 y 轴的相对位移，dy 的值通常用 10px、1em 这样的值，其中 em 是以行为单位的。<br>这样，我们就可以在 <code>text</code> 中添加多个 <code>tspan</code>，每个代表一行。每一个 <code>tspan</code>属性都赋予一个 1em 值（即一行）。如此，文本就会一行一行地显示了。</p>\n<h5 id=\"svg代码为：\"><a href=\"#svg代码为：\" class=\"headerlink\" title=\"svg代码为：\"></a>svg代码为：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;text x=\"30\" y=\"100\" font-size=\"30\" font-family=\"simsun\"&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;夜来幽梦忽还乡&lt;/tspan&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;小轩窗&lt;/tspan&gt;</div><div class=\"line\">    &lt;tspan x=\"30\" dy=\"1em\"&gt;正梳妆&lt;/tspan&gt;</div><div class=\"line\">&lt;/text&gt;</div></pre></td></tr></table></figure>\n<p>要注意，<code>tspan</code> 中的 <code>x</code> 属性是必要的，表示下一行也从 x = 30 处开始显示。</p>\n<h5 id=\"D3-的代码怎么写\"><a href=\"#D3-的代码怎么写\" class=\"headerlink\" title=\"D3 的代码怎么写\"></a>D3 的代码怎么写</h5><p>对于第一节的字符串，先在 svg 中添加一个 text 元素，但是不设定其内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> text = svg.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">100</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"font-size\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">    .attr(<span class=\"string\">\"font-family\"</span>,<span class=\"string\">\"simsun\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 JavaScript 字符串的 split 将 str 分段：</span></div><div class=\"line\"><span class=\"keyword\">var</span> strs = str.split(<span class=\"string\">\"，\"</span>) ;</div></pre></td></tr></table></figure>\n<p>用逗号作为分隔符，分为几段。输出结果为一个数组，数组中的各项是各子字符串。则 strs 的值为：</p>\n<p>[“云中谁寄锦书来”, “雁字回时”, “月满西楼”]</p>\n<p>好，接下来是重点，在 text 元素上绑定数据，并添加与 strs 长度相同的 tspan 元素。然后，为其 x 和 dy 属性赋值，再指定字符串内容即可。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">text.selectAll(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">  .data(strs)</div><div class=\"line\">  .enter()</div><div class=\"line\">  .append(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"x\"</span>,text.attr(<span class=\"string\">\"x\"</span>))</div><div class=\"line\">  .attr(<span class=\"string\">\"dy\"</span>,<span class=\"string\">\"1em\"</span>)</div><div class=\"line\">  .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> d;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"显示结果如下：\"><a href=\"#显示结果如下：\" class=\"headerlink\" title=\"显示结果如下：\"></a>显示结果如下：</h5><p><img src=\"/css/images/code2.png\" alt=\"\"></p>\n<h5 id=\"完整的示例代码：\"><a href=\"#完整的示例代码：\" class=\"headerlink\" title=\"完整的示例代码：\"></a>完整的示例代码：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文字换行<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://d3js.org/d3.v3.min.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">300</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"width\"</span>,width)</div><div class=\"line\">  .attr(<span class=\"string\">\"height\"</span>,height);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"云中谁寄锦书来，雁字回时，月满西楼\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> text = svg.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"font-size\"</span>,<span class=\"number\">30</span>)</div><div class=\"line\">  .attr(<span class=\"string\">\"font-family\"</span>,<span class=\"string\">\"simsun\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> strs = str.split(<span class=\"string\">\"，\"</span>) ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(strs);</div><div class=\"line\"></div><div class=\"line\">text.selectAll(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">.data(strs)</div><div class=\"line\">.enter()</div><div class=\"line\">.append(<span class=\"string\">\"tspan\"</span>)</div><div class=\"line\">.attr(<span class=\"string\">\"x\"</span>,text.attr(<span class=\"string\">\"x\"</span>))</div><div class=\"line\">.attr(<span class=\"string\">\"dy\"</span>,<span class=\"string\">\"1em\"</span>)</div><div class=\"line\">.text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> d;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"JS循环遍历","date":"2017-02-10T13:58:16.000Z","_content":"\n通过Ajax请求后端接口，获得json数据后前端进行解析遍历再渲染页面，这是前端人员经常要做的工作，今天就来说说在循环遍历json数据的时候，几种常用的方法。\n<!-- more -->\n\n先设定一个功能场景如下:\nhtml\n```html\n<ul class=\"target\">\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n<button class=\"btn\">click me</button>\n```\n\n点击按钮后，给三个li元素添加内容；\n\njs如下：\n\n```javascript\nvar data = [{\n      name: 'aaa',\n      sex: 'boy'\n    },{\n      name: 'bbb',\n      sex: 'girl'\n    },{\n      name: 'ccc',\n      sex: 'boy'\n    }]\n$(function() {\n  $(\".btn\").click(function(){\n\n    //一、传统for循环\n    // for(var i = 0;i < data.length;i++){\n    //   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);\n    // }\n\n    //二、for-in循环\n    // for(var i in data){\n    //   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);\n    // }\n\n    //三、$.each()\n    // $.each(data,function(key,val){\n    //   $(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex );\n    // }) \n\n    //$.each()的ES6写法\n    //$.each(data,(key,val) =>$(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex ))\n   \n    //四、使用map()\n    // data.map(function(val, index){\n    //   $(\".target li:eq(\" + index + \")\").html(val.name + val.sex );\n    // })\n\n    //map()的ES6写法\n    data.map((val,index) =>$(\".target li:eq(\" + index + \")\").html(val.name + val.sex ))\n\n  })\n})\n\n```\n\n将一个字符循环 N 遍\n```javascript\nfunction repeat(value,n){\n  new Array(n+1)).join(value)) \n}\n\n```\n设计思路，利用数组的 join 连接方法，达到循环 n 遍的逻辑 为什么是 N + 1 ？ new Array(10) 会创建一个数组长度为 10 的数组 但是元素与元素之间的链接只有 9 个, 所以上面是 N + 1","source":"_posts/JS循环遍历.md","raw":"---\ntitle: JS循环遍历\ndate: 2017-02-10 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: 循环遍历\n---\n\n通过Ajax请求后端接口，获得json数据后前端进行解析遍历再渲染页面，这是前端人员经常要做的工作，今天就来说说在循环遍历json数据的时候，几种常用的方法。\n<!-- more -->\n\n先设定一个功能场景如下:\nhtml\n```html\n<ul class=\"target\">\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n<button class=\"btn\">click me</button>\n```\n\n点击按钮后，给三个li元素添加内容；\n\njs如下：\n\n```javascript\nvar data = [{\n      name: 'aaa',\n      sex: 'boy'\n    },{\n      name: 'bbb',\n      sex: 'girl'\n    },{\n      name: 'ccc',\n      sex: 'boy'\n    }]\n$(function() {\n  $(\".btn\").click(function(){\n\n    //一、传统for循环\n    // for(var i = 0;i < data.length;i++){\n    //   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);\n    // }\n\n    //二、for-in循环\n    // for(var i in data){\n    //   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);\n    // }\n\n    //三、$.each()\n    // $.each(data,function(key,val){\n    //   $(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex );\n    // }) \n\n    //$.each()的ES6写法\n    //$.each(data,(key,val) =>$(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex ))\n   \n    //四、使用map()\n    // data.map(function(val, index){\n    //   $(\".target li:eq(\" + index + \")\").html(val.name + val.sex );\n    // })\n\n    //map()的ES6写法\n    data.map((val,index) =>$(\".target li:eq(\" + index + \")\").html(val.name + val.sex ))\n\n  })\n})\n\n```\n\n将一个字符循环 N 遍\n```javascript\nfunction repeat(value,n){\n  new Array(n+1)).join(value)) \n}\n\n```\n设计思路，利用数组的 join 连接方法，达到循环 n 遍的逻辑 为什么是 N + 1 ？ new Array(10) 会创建一个数组长度为 10 的数组 但是元素与元素之间的链接只有 9 个, 所以上面是 N + 1","slug":"JS循环遍历","published":1,"updated":"2017-02-18T12:32:45.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn4z000v24uumb44twzv","content":"<p>通过Ajax请求后端接口，获得json数据后前端进行解析遍历再渲染页面，这是前端人员经常要做的工作，今天就来说说在循环遍历json数据的时候，几种常用的方法。<br><a id=\"more\"></a></p>\n<p>先设定一个功能场景如下:<br>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击按钮后，给三个li元素添加内容；</p>\n<p>js如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'aaa'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'boy'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'bbb'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'girl'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'ccc'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'boy'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//一、传统for循环</span></div><div class=\"line\">    <span class=\"comment\">// for(var i = 0;i &lt; data.length;i++)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//二、for-in循环</span></div><div class=\"line\">    <span class=\"comment\">// for(var i in data)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//三、$.each()</span></div><div class=\"line\">    <span class=\"comment\">// $.each(data,function(key,val)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex );</span></div><div class=\"line\">    <span class=\"comment\">// &#125;) </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//$.each()的ES6写法</span></div><div class=\"line\">    <span class=\"comment\">//$.each(data,(key,val) =&gt;$(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex ))</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//四、使用map()</span></div><div class=\"line\">    <span class=\"comment\">// data.map(function(val, index)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + index + \")\").html(val.name + val.sex );</span></div><div class=\"line\">    <span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//map()的ES6写法</span></div><div class=\"line\">    data.map(<span class=\"function\">(<span class=\"params\">val,index</span>) =&gt;</span>$(<span class=\"string\">\".target li:eq(\"</span> + index + <span class=\"string\">\")\"</span>).html(val.name + val.sex ))</div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>将一个字符循环 N 遍<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">value,n</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>)).join(value)) </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设计思路，利用数组的 join 连接方法，达到循环 n 遍的逻辑 为什么是 N + 1 ？ new Array(10) 会创建一个数组长度为 10 的数组 但是元素与元素之间的链接只有 9 个, 所以上面是 N + 1</p>\n","excerpt":"<p>通过Ajax请求后端接口，获得json数据后前端进行解析遍历再渲染页面，这是前端人员经常要做的工作，今天就来说说在循环遍历json数据的时候，几种常用的方法。<br>","more":"</p>\n<p>先设定一个功能场景如下:<br>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击按钮后，给三个li元素添加内容；</p>\n<p>js如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'aaa'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'boy'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'bbb'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'girl'</span></div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'ccc'</span>,</div><div class=\"line\">      <span class=\"attr\">sex</span>: <span class=\"string\">'boy'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//一、传统for循环</span></div><div class=\"line\">    <span class=\"comment\">// for(var i = 0;i &lt; data.length;i++)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//二、for-in循环</span></div><div class=\"line\">    <span class=\"comment\">// for(var i in data)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + i + \")\").html(data[i].name + data[i].sex);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//三、$.each()</span></div><div class=\"line\">    <span class=\"comment\">// $.each(data,function(key,val)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex );</span></div><div class=\"line\">    <span class=\"comment\">// &#125;) </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//$.each()的ES6写法</span></div><div class=\"line\">    <span class=\"comment\">//$.each(data,(key,val) =&gt;$(\".target li:eq(\" + key + \")\").html(data[key].name + data[key].sex ))</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//四、使用map()</span></div><div class=\"line\">    <span class=\"comment\">// data.map(function(val, index)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   $(\".target li:eq(\" + index + \")\").html(val.name + val.sex );</span></div><div class=\"line\">    <span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//map()的ES6写法</span></div><div class=\"line\">    data.map(<span class=\"function\">(<span class=\"params\">val,index</span>) =&gt;</span>$(<span class=\"string\">\".target li:eq(\"</span> + index + <span class=\"string\">\")\"</span>).html(val.name + val.sex ))</div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>将一个字符循环 N 遍<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">value,n</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>)).join(value)) </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设计思路，利用数组的 join 连接方法，达到循环 n 遍的逻辑 为什么是 N + 1 ？ new Array(10) 会创建一个数组长度为 10 的数组 但是元素与元素之间的链接只有 9 个, 所以上面是 N + 1</p>"},{"title":"IE中的CSS3不完全兼容解决方案","date":"2016-12-22T01:17:05.000Z","tag":"CSS3","_content":"\n1.Opacity透明度\n元素的透明度在IE中可以很方便的用滤镜来实现。\n<!--more-->\n```css\nbackground-color:green;\nopacity: .4;\nfilter:progid:DXImageTransform.Microsoft.alpha(opacity=40);\n```\n2.border-radius圆角/Box Shadow盒阴影/Text Shadow文字阴影\n在IE中可以利用Vector Markup Language (VML)和javascript来实现这些效果，参见IE-CSS3，在引用了一个HTC文件后，在IE浏览器中就可以使用这三种CSS3属性了。\n```css\n-moz-border-radius: 15px; \n-webkit-border-radius: 15px; \nborder-radius: 15px; \n-moz-box-shadow: 5px 5px 5px #000; \n-webkit-box-shadow: 5px 5px 5px #000; \nbox-shadow: 5px 5px 50px #000; \nbehavior: url(ie-css3.htc); \n```\n单独设置，确实有效，不知道为什么在项目中这么设置文件一多，就老报错。\n\n在IE中有滤镜来实现阴影(shadow)和投影(drop-shadow)效果的\n```css\nfilter: progid:DXImageTransform.Microsoft.Shadow(color='#000000', Direction=145, Strength=10);\nfilter:progid:DXImageTransform.Microsoft.DropShadow(Color=\"#6699CC\",OffX=\"5\",OffY=\"5\",Positive=\"1\");\n```\nIE中的渐变滤镜\n```css\nbackground: linear-gradient(top, #444444, #999999); \nbackground: -moz-linear-gradient(top, #444444, #999999); \nbackground: -webkit-gradient(linear,left top,left bottom,color-stop(0, #444444),color-stop(1, #999999)); \nfilter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#444444', EndColorStr='#999999'); \n```\n渐变滤镜支持RGBA的颜色，startColorStr和EndColorStr的前两位是Alpha通道值。使用带alpha通道来模拟RGBA颜色背景的同时，应该去掉其back\nground-color属性。\n```css\nbackground-color: rgba(0, 255, 0, 0.6); \nfilter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#9900FF00',EndColorStr='#9900FF00'); \n```\n支持CSS3多重背景图片的浏览器中可以用下面的语句来实现背景多重图片：\n```css\nbackground: url(bg-image-1.gif) center center no-repeat, url(bg-image-2.gif) top left;\n```\n要在IE中实现多背景图片，在需要在单独的IE hack样式表中加入下面的代码：\n```css\nbackground: transparent url(bg-image-1.gif) top left repeat;\nfilter:progid:DXImageTransform.Microsoft.AlphaImageLoader (src='bg-image-2.gif', sizingMethod='crop');\n```\n\nTranformations/rotate旋转元素\nIE中有两个滤镜可以实现元素的旋转，BasicImage和Matrix，前者简单方便但是只能做90*n(n∈{1,2,3,4})度的旋转；Matrix滤镜功能强大，但是参数复杂。\n\n```css\n-moz-transform: rotate(180deg); \n-o-transform: rotate(180deg); \n-webkit-transform: rotate(180deg); \nfilter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2); filter:progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand',M11=-1, M12=-1.2246063538223772e-16, M21=1.2246063538223772e-16, M22=-1);\n```","source":"_posts/IE中的CSS3不完全兼容解决方案.md","raw":"---\ntitle: IE中的CSS3不完全兼容解决方案\ndate: 2016-12-22 09:17:05\ntags: CSS3\ncategories: \n  - 技术\n  - CSS\ntag: CSS3\n---\n\n1.Opacity透明度\n元素的透明度在IE中可以很方便的用滤镜来实现。\n<!--more-->\n```css\nbackground-color:green;\nopacity: .4;\nfilter:progid:DXImageTransform.Microsoft.alpha(opacity=40);\n```\n2.border-radius圆角/Box Shadow盒阴影/Text Shadow文字阴影\n在IE中可以利用Vector Markup Language (VML)和javascript来实现这些效果，参见IE-CSS3，在引用了一个HTC文件后，在IE浏览器中就可以使用这三种CSS3属性了。\n```css\n-moz-border-radius: 15px; \n-webkit-border-radius: 15px; \nborder-radius: 15px; \n-moz-box-shadow: 5px 5px 5px #000; \n-webkit-box-shadow: 5px 5px 5px #000; \nbox-shadow: 5px 5px 50px #000; \nbehavior: url(ie-css3.htc); \n```\n单独设置，确实有效，不知道为什么在项目中这么设置文件一多，就老报错。\n\n在IE中有滤镜来实现阴影(shadow)和投影(drop-shadow)效果的\n```css\nfilter: progid:DXImageTransform.Microsoft.Shadow(color='#000000', Direction=145, Strength=10);\nfilter:progid:DXImageTransform.Microsoft.DropShadow(Color=\"#6699CC\",OffX=\"5\",OffY=\"5\",Positive=\"1\");\n```\nIE中的渐变滤镜\n```css\nbackground: linear-gradient(top, #444444, #999999); \nbackground: -moz-linear-gradient(top, #444444, #999999); \nbackground: -webkit-gradient(linear,left top,left bottom,color-stop(0, #444444),color-stop(1, #999999)); \nfilter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#444444', EndColorStr='#999999'); \n```\n渐变滤镜支持RGBA的颜色，startColorStr和EndColorStr的前两位是Alpha通道值。使用带alpha通道来模拟RGBA颜色背景的同时，应该去掉其back\nground-color属性。\n```css\nbackground-color: rgba(0, 255, 0, 0.6); \nfilter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#9900FF00',EndColorStr='#9900FF00'); \n```\n支持CSS3多重背景图片的浏览器中可以用下面的语句来实现背景多重图片：\n```css\nbackground: url(bg-image-1.gif) center center no-repeat, url(bg-image-2.gif) top left;\n```\n要在IE中实现多背景图片，在需要在单独的IE hack样式表中加入下面的代码：\n```css\nbackground: transparent url(bg-image-1.gif) top left repeat;\nfilter:progid:DXImageTransform.Microsoft.AlphaImageLoader (src='bg-image-2.gif', sizingMethod='crop');\n```\n\nTranformations/rotate旋转元素\nIE中有两个滤镜可以实现元素的旋转，BasicImage和Matrix，前者简单方便但是只能做90*n(n∈{1,2,3,4})度的旋转；Matrix滤镜功能强大，但是参数复杂。\n\n```css\n-moz-transform: rotate(180deg); \n-o-transform: rotate(180deg); \n-webkit-transform: rotate(180deg); \nfilter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2); filter:progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand',M11=-1, M12=-1.2246063538223772e-16, M21=1.2246063538223772e-16, M22=-1);\n```","slug":"IE中的CSS3不完全兼容解决方案","published":1,"updated":"2016-12-29T05:01:27.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn55000y24uu2edjfvxw","content":"<p>1.Opacity透明度<br>元素的透明度在IE中可以很方便的用滤镜来实现。<br><a id=\"more\"></a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">background-color:green;</div><div class=\"line\">opacity: .4;</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.alpha(opacity=40);</div></pre></td></tr></table></figure></p>\n<p>2.border-radius圆角/Box Shadow盒阴影/Text Shadow文字阴影<br>在IE中可以利用Vector Markup Language (VML)和javascript来实现这些效果，参见IE-CSS3，在引用了一个HTC文件后，在IE浏览器中就可以使用这三种CSS3属性了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-moz-border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">-webkit-border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">-moz-box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">-webkit-box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 50<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">behavior</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">ie-css3</span><span class=\"selector-class\">.htc</span>);</div></pre></td></tr></table></figure></p>\n<p>单独设置，确实有效，不知道为什么在项目中这么设置文件一多，就老报错。</p>\n<p>在IE中有滤镜来实现阴影(shadow)和投影(drop-shadow)效果的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter: progid:DXImageTransform.Microsoft.Shadow(color='#000000', Direction=145, Strength=10);</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.DropShadow(Color=\"#6699CC\",OffX=\"5\",OffY=\"5\",Positive=\"1\");</div></pre></td></tr></table></figure></p>\n<p>IE中的渐变滤镜<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: linear-gradient(top, #444444, #999999); </div><div class=\"line\">background: -moz-linear-gradient(top, #444444, #999999); </div><div class=\"line\">background: -webkit-gradient(linear,left top,left bottom,color-stop(0, #444444),color-stop(1, #999999)); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#444444', EndColorStr='#999999');</div></pre></td></tr></table></figure></p>\n<p>渐变滤镜支持RGBA的颜色，startColorStr和EndColorStr的前两位是Alpha通道值。使用带alpha通道来模拟RGBA颜色背景的同时，应该去掉其back<br>ground-color属性。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">background-color: rgba(0, 255, 0, 0.6); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#9900FF00',EndColorStr='#9900FF00');</div></pre></td></tr></table></figure></p>\n<p>支持CSS3多重背景图片的浏览器中可以用下面的语句来实现背景多重图片：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">bg-image-1</span><span class=\"selector-class\">.gif</span>) <span class=\"selector-tag\">center</span> <span class=\"selector-tag\">center</span> <span class=\"selector-tag\">no-repeat</span>, <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">bg-image-2</span><span class=\"selector-class\">.gif</span>) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>;</div></pre></td></tr></table></figure></p>\n<p>要在IE中实现多背景图片，在需要在单独的IE hack样式表中加入下面的代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: transparent url(bg-image-1.gif) top left repeat;</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.AlphaImageLoader (src='bg-image-2.gif', sizingMethod='crop');</div></pre></td></tr></table></figure></p>\n<p>Tranformations/rotate旋转元素<br>IE中有两个滤镜可以实现元素的旋转，BasicImage和Matrix，前者简单方便但是只能做90*n(n∈{1,2,3,4})度的旋转；Matrix滤镜功能强大，但是参数复杂。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-moz-transform: rotate(180deg); </div><div class=\"line\">-o-transform: rotate(180deg); </div><div class=\"line\">-webkit-transform: rotate(180deg); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2); filter:progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand',M11=-1, M12=-1.2246063538223772e-16, M21=1.2246063538223772e-16, M22=-1);</div></pre></td></tr></table></figure>","excerpt":"<p>1.Opacity透明度<br>元素的透明度在IE中可以很方便的用滤镜来实现。<br>","more":"<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">background-color:green;</div><div class=\"line\">opacity: .4;</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.alpha(opacity=40);</div></pre></td></tr></table></figure></p>\n<p>2.border-radius圆角/Box Shadow盒阴影/Text Shadow文字阴影<br>在IE中可以利用Vector Markup Language (VML)和javascript来实现这些效果，参见IE-CSS3，在引用了一个HTC文件后，在IE浏览器中就可以使用这三种CSS3属性了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-moz-border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">-webkit-border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">border-radius</span>: 15<span class=\"selector-tag\">px</span>; </div><div class=\"line\"><span class=\"selector-tag\">-moz-box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">-webkit-box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> 50<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#000</span>; </div><div class=\"line\"><span class=\"selector-tag\">behavior</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">ie-css3</span><span class=\"selector-class\">.htc</span>);</div></pre></td></tr></table></figure></p>\n<p>单独设置，确实有效，不知道为什么在项目中这么设置文件一多，就老报错。</p>\n<p>在IE中有滤镜来实现阴影(shadow)和投影(drop-shadow)效果的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter: progid:DXImageTransform.Microsoft.Shadow(color='#000000', Direction=145, Strength=10);</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.DropShadow(Color=\"#6699CC\",OffX=\"5\",OffY=\"5\",Positive=\"1\");</div></pre></td></tr></table></figure></p>\n<p>IE中的渐变滤镜<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: linear-gradient(top, #444444, #999999); </div><div class=\"line\">background: -moz-linear-gradient(top, #444444, #999999); </div><div class=\"line\">background: -webkit-gradient(linear,left top,left bottom,color-stop(0, #444444),color-stop(1, #999999)); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#444444', EndColorStr='#999999');</div></pre></td></tr></table></figure></p>\n<p>渐变滤镜支持RGBA的颜色，startColorStr和EndColorStr的前两位是Alpha通道值。使用带alpha通道来模拟RGBA颜色背景的同时，应该去掉其back<br>ground-color属性。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">background-color: rgba(0, 255, 0, 0.6); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#9900FF00',EndColorStr='#9900FF00');</div></pre></td></tr></table></figure></p>\n<p>支持CSS3多重背景图片的浏览器中可以用下面的语句来实现背景多重图片：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">bg-image-1</span><span class=\"selector-class\">.gif</span>) <span class=\"selector-tag\">center</span> <span class=\"selector-tag\">center</span> <span class=\"selector-tag\">no-repeat</span>, <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">bg-image-2</span><span class=\"selector-class\">.gif</span>) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>;</div></pre></td></tr></table></figure></p>\n<p>要在IE中实现多背景图片，在需要在单独的IE hack样式表中加入下面的代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: transparent url(bg-image-1.gif) top left repeat;</div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.AlphaImageLoader (src='bg-image-2.gif', sizingMethod='crop');</div></pre></td></tr></table></figure></p>\n<p>Tranformations/rotate旋转元素<br>IE中有两个滤镜可以实现元素的旋转，BasicImage和Matrix，前者简单方便但是只能做90*n(n∈{1,2,3,4})度的旋转；Matrix滤镜功能强大，但是参数复杂。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-moz-transform: rotate(180deg); </div><div class=\"line\">-o-transform: rotate(180deg); </div><div class=\"line\">-webkit-transform: rotate(180deg); </div><div class=\"line\">filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2); filter:progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand',M11=-1, M12=-1.2246063538223772e-16, M21=1.2246063538223772e-16, M22=-1);</div></pre></td></tr></table></figure>"},{"title":"D3.js颜色插值和线性渐变","date":"2016-12-17T15:29:40.000Z","_content":"\n 颜色插值指的是给出两个 RGB 颜色值，两个颜色之间的值通过插值函数计算得到。线性渐变是添加到 SVG 图形上的过滤器，只需给出两端的颜色值即可。\n\n<!--more--> \n![](/css/images/16440731.png)\n#### 1. 颜色插值\n##### 定义颜色插值函数如下，\n```javascript\nvar a = d3.rgb(255,0,0);  //红色\nvar b = d3.rgb(0,255,0);  //绿色\n \nvar compute = d3.interpolate(a,b);\n```\n如此一来，compute 可当做函数使用，参数的范围为[0, 1]。compute(0) 返回红色，compute(1) 返回绿色，传入 0 ~ 1 之间的值时，返回红色到绿色之间的插值颜色。\n有时候，某个值域的范围并不在 0 到 1 之间，例如在 0 到 150 之间，怎么讲二者对应起来呢？使用一个线性比例尺即可，定义如下，\n\n```javascript\nvar linear = d3.scale.linear()\n    .domain([0,150])\n    .range([0,1]);\n```\n\n在计算颜色值时，只要 compute(linear(x))即可，x的范围是 0 到 150 。\n下面绘制150个矩形，分为10行，每行15个，用颜色插值函数分别计算每个矩形的填充色。\n\n```javascript\nvar rects = svg.selectAll(\"rect\")\n        .data(d3.range(150))\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\",function(d,i){\n          return i%15 * 15;\n        })\n        .attr(\"y\",function(d,i){\n          return Math.floor(i/15) * 15;\n        })\n        .attr(\"width\",15)\n        .attr(\"height\",15)\n        .style(\"fill\",function(d){\n          return compute(linear(d));\n        });\n```\n##### 结果如下图\n![](/css/images/16440732.png)\n\n#### 1. 线性渐变过滤器\n有时需要在一个图形上使用渐变的颜色，渐变表示一种颜色平滑过渡到另一种颜色。SVG中有线性渐变 <code>linearGradient</code>和放射性渐变 <code>radialGradient</code>。\n```html\n<defs>\n<linearGradient id=\"myGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n    <stop offset=\"0%\" stop-color=\"#F00\" />\n    <stop offset=\"100%\" stop-color=\"#0FF\" />\n</linearGradient>\n</defs>\n```\nx1、y1、x2、y2用于定义渐变的方向，此处表示的是水平渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。接下来使用此渐变：\n```html\n<rect fill=\"url(#myGradient)\" x=\"10\" y=\"10\" width=\"300\" height=\"100\"/>\n```\n##### 那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\n```javascript\n//定义一个线性渐变\nvar defs = svg.append(\"defs\");\n\nvar linearGradient = defs.append(\"linearGradient\")\n            .attr(\"id\",\"linearColor\")\n            .attr(\"x1\",\"0%\")\n            .attr(\"y1\",\"0%\")\n            .attr(\"x2\",\"100%\")\n            .attr(\"y2\",\"0%\");\n\nvar stop1 = linearGradient.append(\"stop\")\n        .attr(\"offset\",\"0%\")\n        .style(\"stop-color\",a.toString());\n\nvar stop2 = linearGradient.append(\"stop\")\n        .attr(\"offset\",\"100%\")\n        .style(\"stop-color\",b.toString());\n//然后再添加到一个矩形上，代码如下，\n//添加一个矩形，并应用线性渐变\nvar colorRect = svg.append(\"rect\")\n        .attr(\"x\", 15)\n        .attr(\"y\", 200)\n        .attr(\"width\", 200)\n        .attr(\"height\", 30)\n        .style(\"fill\",\"url(#\" + linearGradient.attr(\"id\") + \")\");\n\n```\n##### 结果如下图:\n![](/css/images/16440731.png)","source":"_posts/D3.js颜色插值和线性渐变.md","raw":"---\ntitle: D3.js颜色插值和线性渐变\ndate: 2016-12-17 23:29:40\ncategories: \n  - 技术\n  - D3.js\ntags: D3.js\n---\n\n 颜色插值指的是给出两个 RGB 颜色值，两个颜色之间的值通过插值函数计算得到。线性渐变是添加到 SVG 图形上的过滤器，只需给出两端的颜色值即可。\n\n<!--more--> \n![](/css/images/16440731.png)\n#### 1. 颜色插值\n##### 定义颜色插值函数如下，\n```javascript\nvar a = d3.rgb(255,0,0);  //红色\nvar b = d3.rgb(0,255,0);  //绿色\n \nvar compute = d3.interpolate(a,b);\n```\n如此一来，compute 可当做函数使用，参数的范围为[0, 1]。compute(0) 返回红色，compute(1) 返回绿色，传入 0 ~ 1 之间的值时，返回红色到绿色之间的插值颜色。\n有时候，某个值域的范围并不在 0 到 1 之间，例如在 0 到 150 之间，怎么讲二者对应起来呢？使用一个线性比例尺即可，定义如下，\n\n```javascript\nvar linear = d3.scale.linear()\n    .domain([0,150])\n    .range([0,1]);\n```\n\n在计算颜色值时，只要 compute(linear(x))即可，x的范围是 0 到 150 。\n下面绘制150个矩形，分为10行，每行15个，用颜色插值函数分别计算每个矩形的填充色。\n\n```javascript\nvar rects = svg.selectAll(\"rect\")\n        .data(d3.range(150))\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\",function(d,i){\n          return i%15 * 15;\n        })\n        .attr(\"y\",function(d,i){\n          return Math.floor(i/15) * 15;\n        })\n        .attr(\"width\",15)\n        .attr(\"height\",15)\n        .style(\"fill\",function(d){\n          return compute(linear(d));\n        });\n```\n##### 结果如下图\n![](/css/images/16440732.png)\n\n#### 1. 线性渐变过滤器\n有时需要在一个图形上使用渐变的颜色，渐变表示一种颜色平滑过渡到另一种颜色。SVG中有线性渐变 <code>linearGradient</code>和放射性渐变 <code>radialGradient</code>。\n```html\n<defs>\n<linearGradient id=\"myGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n    <stop offset=\"0%\" stop-color=\"#F00\" />\n    <stop offset=\"100%\" stop-color=\"#0FF\" />\n</linearGradient>\n</defs>\n```\nx1、y1、x2、y2用于定义渐变的方向，此处表示的是水平渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。接下来使用此渐变：\n```html\n<rect fill=\"url(#myGradient)\" x=\"10\" y=\"10\" width=\"300\" height=\"100\"/>\n```\n##### 那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\n```javascript\n//定义一个线性渐变\nvar defs = svg.append(\"defs\");\n\nvar linearGradient = defs.append(\"linearGradient\")\n            .attr(\"id\",\"linearColor\")\n            .attr(\"x1\",\"0%\")\n            .attr(\"y1\",\"0%\")\n            .attr(\"x2\",\"100%\")\n            .attr(\"y2\",\"0%\");\n\nvar stop1 = linearGradient.append(\"stop\")\n        .attr(\"offset\",\"0%\")\n        .style(\"stop-color\",a.toString());\n\nvar stop2 = linearGradient.append(\"stop\")\n        .attr(\"offset\",\"100%\")\n        .style(\"stop-color\",b.toString());\n//然后再添加到一个矩形上，代码如下，\n//添加一个矩形，并应用线性渐变\nvar colorRect = svg.append(\"rect\")\n        .attr(\"x\", 15)\n        .attr(\"y\", 200)\n        .attr(\"width\", 200)\n        .attr(\"height\", 30)\n        .style(\"fill\",\"url(#\" + linearGradient.attr(\"id\") + \")\");\n\n```\n##### 结果如下图:\n![](/css/images/16440731.png)","slug":"D3.js颜色插值和线性渐变","published":1,"updated":"2016-12-29T05:01:27.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn58001124uufme44pe9","content":"<p> 颜色插值指的是给出两个 RGB 颜色值，两个颜色之间的值通过插值函数计算得到。线性渐变是添加到 SVG 图形上的过滤器，只需给出两端的颜色值即可。</p>\n<a id=\"more\"></a> \n<p><img src=\"/css/images/16440731.png\" alt=\"\"></p>\n<h4 id=\"1-颜色插值\"><a href=\"#1-颜色插值\" class=\"headerlink\" title=\"1. 颜色插值\"></a>1. 颜色插值</h4><h5 id=\"定义颜色插值函数如下，\"><a href=\"#定义颜色插值函数如下，\" class=\"headerlink\" title=\"定义颜色插值函数如下，\"></a>定义颜色插值函数如下，</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);  <span class=\"comment\">//红色</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = d3.rgb(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>);  <span class=\"comment\">//绿色</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> compute = d3.interpolate(a,b);</div></pre></td></tr></table></figure>\n<p>如此一来，compute 可当做函数使用，参数的范围为[0, 1]。compute(0) 返回红色，compute(1) 返回绿色，传入 0 ~ 1 之间的值时，返回红色到绿色之间的插值颜色。<br>有时候，某个值域的范围并不在 0 到 1 之间，例如在 0 到 150 之间，怎么讲二者对应起来呢？使用一个线性比例尺即可，定义如下，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">    .domain([<span class=\"number\">0</span>,<span class=\"number\">150</span>])</div><div class=\"line\">    .range([<span class=\"number\">0</span>,<span class=\"number\">1</span>]);</div></pre></td></tr></table></figure>\n<p>在计算颜色值时，只要 compute(linear(x))即可，x的范围是 0 到 150 。<br>下面绘制150个矩形，分为10行，每行15个，用颜色插值函数分别计算每个矩形的填充色。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rects = svg.selectAll(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .data(d3.range(<span class=\"number\">150</span>))</div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> i%<span class=\"number\">15</span> * <span class=\"number\">15</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">\"y\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(i/<span class=\"number\">15</span>) * <span class=\"number\">15</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">\"width\"</span>,<span class=\"number\">15</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"height\"</span>,<span class=\"number\">15</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"fill\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> compute(linear(d));</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"结果如下图\"><a href=\"#结果如下图\" class=\"headerlink\" title=\"结果如下图\"></a>结果如下图</h5><p><img src=\"/css/images/16440732.png\" alt=\"\"></p>\n<h4 id=\"1-线性渐变过滤器\"><a href=\"#1-线性渐变过滤器\" class=\"headerlink\" title=\"1. 线性渐变过滤器\"></a>1. 线性渐变过滤器</h4><p>有时需要在一个图形上使用渐变的颜色，渐变表示一种颜色平滑过渡到另一种颜色。SVG中有线性渐变 <code>linearGradient</code>和放射性渐变 <code>radialGradient</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">linearGradient</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myGradient\"</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"0%\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#F00\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#0FF\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">linearGradient</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>x1、y1、x2、y2用于定义渐变的方向，此处表示的是水平渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。接下来使用此渐变：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"url(#myGradient)\"</span> <span class=\"attr\">x</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"那么，在-D3-中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\"><a href=\"#那么，在-D3-中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\" class=\"headerlink\" title=\"那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\"></a>那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个线性渐变</span></div><div class=\"line\"><span class=\"keyword\">var</span> defs = svg.append(<span class=\"string\">\"defs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> linearGradient = defs.append(<span class=\"string\">\"linearGradient\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"linearColor\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"x1\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"y1\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"x2\"</span>,<span class=\"string\">\"100%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"y2\"</span>,<span class=\"string\">\"0%\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stop1 = linearGradient.append(<span class=\"string\">\"stop\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"offset\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"stop-color\"</span>,a.toString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stop2 = linearGradient.append(<span class=\"string\">\"stop\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"offset\"</span>,<span class=\"string\">\"100%\"</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"stop-color\"</span>,b.toString());</div><div class=\"line\"><span class=\"comment\">//然后再添加到一个矩形上，代码如下，</span></div><div class=\"line\"><span class=\"comment\">//添加一个矩形，并应用线性渐变</span></div><div class=\"line\"><span class=\"keyword\">var</span> colorRect = svg.append(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, <span class=\"number\">15</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, <span class=\"number\">200</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">200</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, <span class=\"number\">30</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"url(#\"</span> + linearGradient.attr(<span class=\"string\">\"id\"</span>) + <span class=\"string\">\")\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"结果如下图-1\"><a href=\"#结果如下图-1\" class=\"headerlink\" title=\"结果如下图:\"></a>结果如下图:</h5><p><img src=\"/css/images/16440731.png\" alt=\"\"></p>\n","excerpt":"<p> 颜色插值指的是给出两个 RGB 颜色值，两个颜色之间的值通过插值函数计算得到。线性渐变是添加到 SVG 图形上的过滤器，只需给出两端的颜色值即可。</p>","more":"<p><img src=\"/css/images/16440731.png\" alt=\"\"></p>\n<h4 id=\"1-颜色插值\"><a href=\"#1-颜色插值\" class=\"headerlink\" title=\"1. 颜色插值\"></a>1. 颜色插值</h4><h5 id=\"定义颜色插值函数如下，\"><a href=\"#定义颜色插值函数如下，\" class=\"headerlink\" title=\"定义颜色插值函数如下，\"></a>定义颜色插值函数如下，</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);  <span class=\"comment\">//红色</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = d3.rgb(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>);  <span class=\"comment\">//绿色</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> compute = d3.interpolate(a,b);</div></pre></td></tr></table></figure>\n<p>如此一来，compute 可当做函数使用，参数的范围为[0, 1]。compute(0) 返回红色，compute(1) 返回绿色，传入 0 ~ 1 之间的值时，返回红色到绿色之间的插值颜色。<br>有时候，某个值域的范围并不在 0 到 1 之间，例如在 0 到 150 之间，怎么讲二者对应起来呢？使用一个线性比例尺即可，定义如下，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> linear = d3.scale.linear()</div><div class=\"line\">    .domain([<span class=\"number\">0</span>,<span class=\"number\">150</span>])</div><div class=\"line\">    .range([<span class=\"number\">0</span>,<span class=\"number\">1</span>]);</div></pre></td></tr></table></figure>\n<p>在计算颜色值时，只要 compute(linear(x))即可，x的范围是 0 到 150 。<br>下面绘制150个矩形，分为10行，每行15个，用颜色插值函数分别计算每个矩形的填充色。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rects = svg.selectAll(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .data(d3.range(<span class=\"number\">150</span>))</div><div class=\"line\">        .enter()</div><div class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> i%<span class=\"number\">15</span> * <span class=\"number\">15</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">\"y\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(i/<span class=\"number\">15</span>) * <span class=\"number\">15</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .attr(<span class=\"string\">\"width\"</span>,<span class=\"number\">15</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"height\"</span>,<span class=\"number\">15</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"fill\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> compute(linear(d));</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"结果如下图\"><a href=\"#结果如下图\" class=\"headerlink\" title=\"结果如下图\"></a>结果如下图</h5><p><img src=\"/css/images/16440732.png\" alt=\"\"></p>\n<h4 id=\"1-线性渐变过滤器\"><a href=\"#1-线性渐变过滤器\" class=\"headerlink\" title=\"1. 线性渐变过滤器\"></a>1. 线性渐变过滤器</h4><p>有时需要在一个图形上使用渐变的颜色，渐变表示一种颜色平滑过渡到另一种颜色。SVG中有线性渐变 <code>linearGradient</code>和放射性渐变 <code>radialGradient</code>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">linearGradient</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myGradient\"</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"0%\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#F00\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stop</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">stop-color</span>=<span class=\"string\">\"#0FF\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">linearGradient</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>x1、y1、x2、y2用于定义渐变的方向，此处表示的是水平渐变。offset定义渐变开始的位置，stop-color定义此位置的颜色。接下来使用此渐变：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"url(#myGradient)\"</span> <span class=\"attr\">x</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"那么，在-D3-中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\"><a href=\"#那么，在-D3-中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\" class=\"headerlink\" title=\"那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，\"></a>那么，在 D3 中的代码是怎样的呢？按照线性渐变的元素结构添加相应的元素即可，</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个线性渐变</span></div><div class=\"line\"><span class=\"keyword\">var</span> defs = svg.append(<span class=\"string\">\"defs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> linearGradient = defs.append(<span class=\"string\">\"linearGradient\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"linearColor\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"x1\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"y1\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"x2\"</span>,<span class=\"string\">\"100%\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"y2\"</span>,<span class=\"string\">\"0%\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stop1 = linearGradient.append(<span class=\"string\">\"stop\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"offset\"</span>,<span class=\"string\">\"0%\"</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"stop-color\"</span>,a.toString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stop2 = linearGradient.append(<span class=\"string\">\"stop\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"offset\"</span>,<span class=\"string\">\"100%\"</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"stop-color\"</span>,b.toString());</div><div class=\"line\"><span class=\"comment\">//然后再添加到一个矩形上，代码如下，</span></div><div class=\"line\"><span class=\"comment\">//添加一个矩形，并应用线性渐变</span></div><div class=\"line\"><span class=\"keyword\">var</span> colorRect = svg.append(<span class=\"string\">\"rect\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, <span class=\"number\">15</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, <span class=\"number\">200</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">200</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, <span class=\"number\">30</span>)</div><div class=\"line\">        .style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"url(#\"</span> + linearGradient.attr(<span class=\"string\">\"id\"</span>) + <span class=\"string\">\")\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"结果如下图-1\"><a href=\"#结果如下图-1\" class=\"headerlink\" title=\"结果如下图:\"></a>结果如下图:</h5><p><img src=\"/css/images/16440731.png\" alt=\"\"></p>"},{"title":"JavaScript 垃圾回收和内存管理","date":"2017-01-05T13:49:03.000Z","_content":"JavaScript 具有自动垃圾收集机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。\n<!--more-->\n<p></p>\n在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。\n<p></p>\n正因为垃圾回收器的存在，许多人认为 JavaScript 不用太关心内存管理的问题，但如果不了解 JavaScript 的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况。\n\n#### 垃圾回收机制\n##### 内存的分配场景\n```javascript\n// 1.对象\nnew Object(); \nnew MyConstructor(); \n{ a: 4, b: 5 } \nObject.create();\n\n// 2.数组 \nnew Array(); \n[ 1, 2, 3, 4 ];\n\n// 3.字符串，JavaScript 的字符串和 .NET 一样，使用资源池和 copy on write 方式管理字符串。\nnew String(\"hello hyddd\"); \n\"<p>\" + e.innerHTML + \"</p>\"\n\n// 4.函数\nvar x = function () { ... } \nnew Function(code);\n\n// 5.闭包 \nfunction outer(name) {\n     var x = name; \n     return function inner() { \n        return \"Hi, \" + name; \n     } \n }\n```\n\n##### 内存的生命周期\n\n下面我们来分析一下函数中局部变量的正常生命周期。\n\n* 内存分配：局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。\n* 内存使用：然后在函数中使用这些变量，直至函数执行结束。\n* 内存回收：此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。\n通常，很容易判断变量是否还有存在的必要，但并非所有情况下都这么容易就能得出结论（例如：使用闭包的时）。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略：标记清除 和 引用计数。","source":"_posts/JavaScript-垃圾回收和内存管理.md","raw":"---\ntitle: JavaScript 垃圾回收和内存管理\ndate: 2017-01-05 21:49:03\ncategories: \n  - 技术\n  - JavaScript\ntags: [内存管理]\n---\nJavaScript 具有自动垃圾收集机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。\n<!--more-->\n<p></p>\n在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。\n<p></p>\n正因为垃圾回收器的存在，许多人认为 JavaScript 不用太关心内存管理的问题，但如果不了解 JavaScript 的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况。\n\n#### 垃圾回收机制\n##### 内存的分配场景\n```javascript\n// 1.对象\nnew Object(); \nnew MyConstructor(); \n{ a: 4, b: 5 } \nObject.create();\n\n// 2.数组 \nnew Array(); \n[ 1, 2, 3, 4 ];\n\n// 3.字符串，JavaScript 的字符串和 .NET 一样，使用资源池和 copy on write 方式管理字符串。\nnew String(\"hello hyddd\"); \n\"<p>\" + e.innerHTML + \"</p>\"\n\n// 4.函数\nvar x = function () { ... } \nnew Function(code);\n\n// 5.闭包 \nfunction outer(name) {\n     var x = name; \n     return function inner() { \n        return \"Hi, \" + name; \n     } \n }\n```\n\n##### 内存的生命周期\n\n下面我们来分析一下函数中局部变量的正常生命周期。\n\n* 内存分配：局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。\n* 内存使用：然后在函数中使用这些变量，直至函数执行结束。\n* 内存回收：此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。\n通常，很容易判断变量是否还有存在的必要，但并非所有情况下都这么容易就能得出结论（例如：使用闭包的时）。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略：标记清除 和 引用计数。","slug":"JavaScript-垃圾回收和内存管理","published":1,"updated":"2017-01-06T00:56:22.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5c001624uuu2s6z156","content":"<p>JavaScript 具有自动垃圾收集机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。<br><a id=\"more\"></a></p>\n<p></p><p></p><br>在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。<p></p>\n<p></p><p></p><br>正因为垃圾回收器的存在，许多人认为 JavaScript 不用太关心内存管理的问题，但如果不了解 JavaScript 的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况。<p></p>\n<h4 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h4><h5 id=\"内存的分配场景\"><a href=\"#内存的分配场景\" class=\"headerlink\" title=\"内存的分配场景\"></a>内存的分配场景</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.对象</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); </div><div class=\"line\"><span class=\"keyword\">new</span> MyConstructor(); </div><div class=\"line\">&#123; <span class=\"attr\">a</span>: <span class=\"number\">4</span>, <span class=\"attr\">b</span>: <span class=\"number\">5</span> &#125; </div><div class=\"line\"><span class=\"built_in\">Object</span>.create();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2.数组 </span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); </div><div class=\"line\">[ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3.字符串，JavaScript 的字符串和 .NET 一样，使用资源池和 copy on write 方式管理字符串。</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"hello hyddd\"</span>); </div><div class=\"line\"><span class=\"string\">\"&lt;p&gt;\"</span> + e.innerHTML + <span class=\"string\">\"&lt;/p&gt;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4.函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ... &#125; </div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(code);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 5.闭包 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> x = name; </div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hi, \"</span> + name; </div><div class=\"line\">     &#125; </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"内存的生命周期\"><a href=\"#内存的生命周期\" class=\"headerlink\" title=\"内存的生命周期\"></a>内存的生命周期</h5><p>下面我们来分析一下函数中局部变量的正常生命周期。</p>\n<ul>\n<li>内存分配：局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。</li>\n<li>内存使用：然后在函数中使用这些变量，直至函数执行结束。</li>\n<li>内存回收：此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。<br>通常，很容易判断变量是否还有存在的必要，但并非所有情况下都这么容易就能得出结论（例如：使用闭包的时）。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略：标记清除 和 引用计数。</li>\n</ul>\n","excerpt":"<p>JavaScript 具有自动垃圾收集机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。<br>","more":"</p>\n<p><p></p><br>在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。</p>\n<p><p></p><br>正因为垃圾回收器的存在，许多人认为 JavaScript 不用太关心内存管理的问题，但如果不了解 JavaScript 的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况。</p>\n<h4 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h4><h5 id=\"内存的分配场景\"><a href=\"#内存的分配场景\" class=\"headerlink\" title=\"内存的分配场景\"></a>内存的分配场景</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.对象</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); </div><div class=\"line\"><span class=\"keyword\">new</span> MyConstructor(); </div><div class=\"line\">&#123; <span class=\"attr\">a</span>: <span class=\"number\">4</span>, <span class=\"attr\">b</span>: <span class=\"number\">5</span> &#125; </div><div class=\"line\"><span class=\"built_in\">Object</span>.create();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2.数组 </span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); </div><div class=\"line\">[ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3.字符串，JavaScript 的字符串和 .NET 一样，使用资源池和 copy on write 方式管理字符串。</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"hello hyddd\"</span>); </div><div class=\"line\"><span class=\"string\">\"&lt;p&gt;\"</span> + e.innerHTML + <span class=\"string\">\"&lt;/p&gt;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4.函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ... &#125; </div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(code);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 5.闭包 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> x = name; </div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hi, \"</span> + name; </div><div class=\"line\">     &#125; </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"内存的生命周期\"><a href=\"#内存的生命周期\" class=\"headerlink\" title=\"内存的生命周期\"></a>内存的生命周期</h5><p>下面我们来分析一下函数中局部变量的正常生命周期。</p>\n<ul>\n<li>内存分配：局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。</li>\n<li>内存使用：然后在函数中使用这些变量，直至函数执行结束。</li>\n<li>内存回收：此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。<br>通常，很容易判断变量是否还有存在的必要，但并非所有情况下都这么容易就能得出结论（例如：使用闭包的时）。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略：标记清除 和 引用计数。</li>\n</ul>"},{"title":"JS循环遍历","date":"2016-06-28T13:58:16.000Z","_content":"\n\n```javascript\nvvar obj = {\n  \"loca\" : \"中国\",\n  \"tel\" : \"小米\",\n  \"money\" : \"100万\"\n};\n\n<!-- more -->\n\nfunction User(name,age){\n  this.name = name;\n  this.age = age;\n  return this;\n}\n\nvar user = new User(\"张三\",\"20\");\nconsole.log(user);\n\nfunction User2(name,age,sex){\n  //User.apply(this,[name,age]);\n  //this === obj\n  User.call(this,name,age);\n  this.sex = sex;\n  return this;\n};\n\nvar user2 = new User2(\"李四\",\"30\",\"男\");\nconsole.log(user2);\n\n// bind 会改变函数体中的 this 对象\n//变为你传递进去的对象\nvar user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");\n\nconsole.log(user3);\n\n```\n","source":"_posts/apply call bind使用详解.md","raw":"---\ntitle: JS循环遍历\ndate: 2016-06-28 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: 循环遍历\n---\n\n\n```javascript\nvvar obj = {\n  \"loca\" : \"中国\",\n  \"tel\" : \"小米\",\n  \"money\" : \"100万\"\n};\n\n<!-- more -->\n\nfunction User(name,age){\n  this.name = name;\n  this.age = age;\n  return this;\n}\n\nvar user = new User(\"张三\",\"20\");\nconsole.log(user);\n\nfunction User2(name,age,sex){\n  //User.apply(this,[name,age]);\n  //this === obj\n  User.call(this,name,age);\n  this.sex = sex;\n  return this;\n};\n\nvar user2 = new User2(\"李四\",\"30\",\"男\");\nconsole.log(user2);\n\n// bind 会改变函数体中的 this 对象\n//变为你传递进去的对象\nvar user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");\n\nconsole.log(user3);\n\n```\n","slug":"apply call bind使用详解","published":1,"updated":"2017-02-18T12:36:50.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5f001924uuf177dfne","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">vvar obj = &#123;</div><div class=\"line\">  <span class=\"string\">\"loca\"</span> : <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">  <span class=\"string\">\"tel\"</span> : <span class=\"string\">\"小米\"</span>,</div><div class=\"line\">  <span class=\"string\">\"money\"</span> : <span class=\"string\">\"100万\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">function User(name,age)&#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var user = new User(\"张三\",\"20\");</div><div class=\"line\">console.log(user);</div><div class=\"line\"></div><div class=\"line\">function User2(name,age,sex)&#123;</div><div class=\"line\">  //User.apply(this,[name,age]);</div><div class=\"line\">  //this === obj</div><div class=\"line\">  User.call(this,name,age);</div><div class=\"line\">  this.sex = sex;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var user2 = new User2(\"李四\",\"30\",\"男\");</div><div class=\"line\">console.log(user2);</div><div class=\"line\"></div><div class=\"line\">// bind 会改变函数体中的 this 对象</div><div class=\"line\">//变为你传递进去的对象</div><div class=\"line\">var user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");</div><div class=\"line\"></div><div class=\"line\">console.log(user3);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">vvar obj = &#123;</div><div class=\"line\">  <span class=\"string\">\"loca\"</span> : <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">  <span class=\"string\">\"tel\"</span> : <span class=\"string\">\"小米\"</span>,</div><div class=\"line\">  <span class=\"string\">\"money\"</span> : <span class=\"string\">\"100万\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></div><div class=\"line\"></div><div class=\"line\">function User(name,age)&#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var user = new User(\"张三\",\"20\");</div><div class=\"line\">console.log(user);</div><div class=\"line\"></div><div class=\"line\">function User2(name,age,sex)&#123;</div><div class=\"line\">  //User.apply(this,[name,age]);</div><div class=\"line\">  //this === obj</div><div class=\"line\">  User.call(this,name,age);</div><div class=\"line\">  this.sex = sex;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var user2 = new User2(\"李四\",\"30\",\"男\");</div><div class=\"line\">console.log(user2);</div><div class=\"line\"></div><div class=\"line\">// bind 会改变函数体中的 this 对象</div><div class=\"line\">//变为你传递进去的对象</div><div class=\"line\">var user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");</div><div class=\"line\"></div><div class=\"line\">console.log(user3);</span></div></pre></td></tr></table></figure>\n"},{"title":"HTMLCSS的一些总结","date":"2016-06-25T13:58:16.000Z","_content":"\n#### 1、什么是盒子模型？\n在网页中，一个元素占有空间的大小由四个部分构成\n\n其中包括元素的内容（content），元素的内边距（padding）元素的边框（border），元素的外边距（margin）四部分。\n<!-- more -->\n这四个部分占有的空间中，有的部分可以显示相应的内容，\n\n而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。\n\n\n#### 2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n行内元素：a、b、span、img、input、strong、select、label、em、button、textarea \n\n块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote \n\n空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img\n#### 3、CSS实现垂直水平居中\nHTML结构：\n```html\n<div class=\"wrapper\">\n  <div class=\"content\"></div>\n</div>\n```\nCSS：\n```css\n.wrapper{\n  position:relative;\n} \n.content{ \n  background-color:#6699FF; \n  width:200px; \n  height:200px;\n  position: absolute; //父元素需要相对定位\n  top: 50%; left: 50%; \n  margin-top:-100px ; //二分之一的\n  height，width margin-left: -100px; \n}\n```\n\n#### 4、src与href的区别\nhref 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。\n\nsrc是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；\n\n在请求src资源时会将其指向的资源下载并应用到文档内，\n\n例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，\n\n直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。\n\n这也是为什么将js脚本放在底部而不是头部。\n\n#### 5、什么是CSS Hack?\n一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。\n\nIE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。\n例如：\n// 1、条件Hack\n<!-- <!--[if IE]>\n<style>\n.test{color:red;}\n</style>\n<![enfif]> -->\n\n// 2、属性Hack \n```css\n.test{ color:#090\\9; / For IE8+ / \ncolor:#f00; / For IE7 and earlier / \n_color:#ff0; / For IE6 and earlier */\n```\n// 3、选择符Hack \n```css\nhtml .test{ color:#090; } / For IE6 and earlier / \nhtml .test{ color:#ff0; } / For IE7 \n```\n#### 6.同步和异步的区别\n同步是阻塞模式，异步是非阻塞模式。\n\n同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，\n直到收到返回信息才继续执行下去；\n\n异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进\n行处理，这样可以提高执行的效率。\n\n#### 7、px和em的区别\npx和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。\n\nem得值不是固定的，并且em会继承父级元素的字体大小。\n\n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em\n\n#### 8、什么叫优雅降级和渐进增强？\n##### 渐进增强 progressive enhancement：\n```css\n.transition{\n   transition: all .5s;          /* 标准写法 */\n  -moz-transition: all .5s;     /* firefox 内核 */\n  -webkit-transition: all .5s;  /* webkit 内核 */\n}\n```\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到\n更好的用户体验。\n\n##### 优雅降级 graceful degradation：\n```css\n.transition{\n    -webkit-transition: all .5s;  /* webkit 内核 */\n    -moz-transition: all .5s;     /* firefox 内核 */\n    transition: all .5s;          /* 标准写法 */\n}\n```\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：\n\na. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给\n\nb. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要\n\nc. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带\n\n##### 9、浏览器的内核分别有哪些?\nIE: trident内核 Firefox：\ngecko内核 Safari：\nwebkit内核 Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核 \nChrome：Blink(基于webkit，Google与Opera Software共同开发)\n\n##### 10、-moz、-ms、-webkit浏览器私有前缀详解\n\n- -moz 代表firefox浏览器私有属性\n- -ms 代表IE浏览器私有属性\n- -webkit 代表chrome、safari私有属性\n\n##### 11、如何理解CSS的display属性\n\n在布局中，display属性是最重要的CSS属性之一。\n其最常见的属性值有block,inline,none,table以及inline-block\n最近的新宠为flex\n\ndisplay: none;\n将元素与其子元素从普通文档流中移除。这时文档的渲染就像元素从来没有存在过一样，\n也就是说它所占据的空间被折叠了。元素的内容也会被屏幕阅读所忽略。\n\ndisplay: inline;\n该元素生成一个或多个行内框。就如名字般，行内级元素所占具的空间就是他的标签所定义的大小。\n可以被视为对块级元素的补充。\n\ndisplay: block;\n该元素生成块级框。除特殊声明外，所有的块级元素开始于新的一行，延展到其容器的宽度。\n\ndisplay: list-item;\n元素被渲染为列表项呈现的方式，确切说就像是一个块级元素，但是会生成一个可以被list-style属性进行样式修饰的标记框。\n只有\n元素可以具有list-style的默认值。通常将\n元素重置为默认行为。\n\ndisplay: inline-block;\n该元素生成一个块级别框，但是整个框的行为就像是一个内联元素。尝试在Codepen书写此示例，改变窗口的大小，这样会更有意义。\n\ndisplay: flex;\n引入flexbox布局模块或CSS弹性框，标志着我们第一次有了专门为浏览器内容进行布局的规范。\n自从HTML被引入之后，网页内容布局已经演变了很多。\n当设计者想要创建一些富有创意的设计时，使用的第一种方法就是嵌套的HTML表格，或者我们所说的基于表格的布局。","source":"_posts/HTMLCSS的一些总结.md","raw":"---\ntitle: HTMLCSS的一些总结\ndate: 2016-06-25 21:58:16\ncategories: \n  - 技术\n  - CSS\ntags: \n---\n\n#### 1、什么是盒子模型？\n在网页中，一个元素占有空间的大小由四个部分构成\n\n其中包括元素的内容（content），元素的内边距（padding）元素的边框（border），元素的外边距（margin）四部分。\n<!-- more -->\n这四个部分占有的空间中，有的部分可以显示相应的内容，\n\n而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。\n\n\n#### 2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n行内元素：a、b、span、img、input、strong、select、label、em、button、textarea \n\n块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote \n\n空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img\n#### 3、CSS实现垂直水平居中\nHTML结构：\n```html\n<div class=\"wrapper\">\n  <div class=\"content\"></div>\n</div>\n```\nCSS：\n```css\n.wrapper{\n  position:relative;\n} \n.content{ \n  background-color:#6699FF; \n  width:200px; \n  height:200px;\n  position: absolute; //父元素需要相对定位\n  top: 50%; left: 50%; \n  margin-top:-100px ; //二分之一的\n  height，width margin-left: -100px; \n}\n```\n\n#### 4、src与href的区别\nhref 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。\n\nsrc是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；\n\n在请求src资源时会将其指向的资源下载并应用到文档内，\n\n例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，\n\n直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。\n\n这也是为什么将js脚本放在底部而不是头部。\n\n#### 5、什么是CSS Hack?\n一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。\n\nIE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。\n例如：\n// 1、条件Hack\n<!-- <!--[if IE]>\n<style>\n.test{color:red;}\n</style>\n<![enfif]> -->\n\n// 2、属性Hack \n```css\n.test{ color:#090\\9; / For IE8+ / \ncolor:#f00; / For IE7 and earlier / \n_color:#ff0; / For IE6 and earlier */\n```\n// 3、选择符Hack \n```css\nhtml .test{ color:#090; } / For IE6 and earlier / \nhtml .test{ color:#ff0; } / For IE7 \n```\n#### 6.同步和异步的区别\n同步是阻塞模式，异步是非阻塞模式。\n\n同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，\n直到收到返回信息才继续执行下去；\n\n异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进\n行处理，这样可以提高执行的效率。\n\n#### 7、px和em的区别\npx和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。\n\nem得值不是固定的，并且em会继承父级元素的字体大小。\n\n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em\n\n#### 8、什么叫优雅降级和渐进增强？\n##### 渐进增强 progressive enhancement：\n```css\n.transition{\n   transition: all .5s;          /* 标准写法 */\n  -moz-transition: all .5s;     /* firefox 内核 */\n  -webkit-transition: all .5s;  /* webkit 内核 */\n}\n```\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到\n更好的用户体验。\n\n##### 优雅降级 graceful degradation：\n```css\n.transition{\n    -webkit-transition: all .5s;  /* webkit 内核 */\n    -moz-transition: all .5s;     /* firefox 内核 */\n    transition: all .5s;          /* 标准写法 */\n}\n```\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：\n\na. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给\n\nb. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要\n\nc. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带\n\n##### 9、浏览器的内核分别有哪些?\nIE: trident内核 Firefox：\ngecko内核 Safari：\nwebkit内核 Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核 \nChrome：Blink(基于webkit，Google与Opera Software共同开发)\n\n##### 10、-moz、-ms、-webkit浏览器私有前缀详解\n\n- -moz 代表firefox浏览器私有属性\n- -ms 代表IE浏览器私有属性\n- -webkit 代表chrome、safari私有属性\n\n##### 11、如何理解CSS的display属性\n\n在布局中，display属性是最重要的CSS属性之一。\n其最常见的属性值有block,inline,none,table以及inline-block\n最近的新宠为flex\n\ndisplay: none;\n将元素与其子元素从普通文档流中移除。这时文档的渲染就像元素从来没有存在过一样，\n也就是说它所占据的空间被折叠了。元素的内容也会被屏幕阅读所忽略。\n\ndisplay: inline;\n该元素生成一个或多个行内框。就如名字般，行内级元素所占具的空间就是他的标签所定义的大小。\n可以被视为对块级元素的补充。\n\ndisplay: block;\n该元素生成块级框。除特殊声明外，所有的块级元素开始于新的一行，延展到其容器的宽度。\n\ndisplay: list-item;\n元素被渲染为列表项呈现的方式，确切说就像是一个块级元素，但是会生成一个可以被list-style属性进行样式修饰的标记框。\n只有\n元素可以具有list-style的默认值。通常将\n元素重置为默认行为。\n\ndisplay: inline-block;\n该元素生成一个块级别框，但是整个框的行为就像是一个内联元素。尝试在Codepen书写此示例，改变窗口的大小，这样会更有意义。\n\ndisplay: flex;\n引入flexbox布局模块或CSS弹性框，标志着我们第一次有了专门为浏览器内容进行布局的规范。\n自从HTML被引入之后，网页内容布局已经演变了很多。\n当设计者想要创建一些富有创意的设计时，使用的第一种方法就是嵌套的HTML表格，或者我们所说的基于表格的布局。","slug":"HTMLCSS的一些总结","published":1,"updated":"2017-02-18T12:38:07.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5j001b24uuus5hi5so","content":"<h4 id=\"1、什么是盒子模型？\"><a href=\"#1、什么是盒子模型？\" class=\"headerlink\" title=\"1、什么是盒子模型？\"></a>1、什么是盒子模型？</h4><p>在网页中，一个元素占有空间的大小由四个部分构成</p>\n<p>其中包括元素的内容（content），元素的内边距（padding）元素的边框（border），元素的外边距（margin）四部分。<br><a id=\"more\"></a><br>这四个部分占有的空间中，有的部分可以显示相应的内容，</p>\n<p>而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。</p>\n<h4 id=\"2、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#2、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h4><p>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea </p>\n<p>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote </p>\n<p>空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img</p>\n<h4 id=\"3、CSS实现垂直水平居中\"><a href=\"#3、CSS实现垂直水平居中\" class=\"headerlink\" title=\"3、CSS实现垂直水平居中\"></a>3、CSS实现垂直水平居中</h4><p>HTML结构：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>CSS：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.wrapper&#123;</div><div class=\"line\">  position:relative;</div><div class=\"line\">&#125; </div><div class=\"line\">.content&#123; </div><div class=\"line\">  background-color:#6699FF; </div><div class=\"line\">  width:200px; </div><div class=\"line\">  height:200px;</div><div class=\"line\">  position: absolute; //父元素需要相对定位</div><div class=\"line\">  top: 50%; left: 50%; </div><div class=\"line\">  margin-top:-100px ; //二分之一的</div><div class=\"line\">  height，width margin-left: -100px; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4、src与href的区别\"><a href=\"#4、src与href的区别\" class=\"headerlink\" title=\"4、src与href的区别\"></a>4、src与href的区别</h4><p>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p>\n<p>src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；</p>\n<p>在请求src资源时会将其指向的资源下载并应用到文档内，</p>\n<p>例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，</p>\n<p>直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。</p>\n<p>这也是为什么将js脚本放在底部而不是头部。</p>\n<h4 id=\"5、什么是CSS-Hack\"><a href=\"#5、什么是CSS-Hack\" class=\"headerlink\" title=\"5、什么是CSS Hack?\"></a>5、什么是CSS Hack?</h4><p>一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。</p>\n<p>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。<br>例如：<br>// 1、条件Hack<br>&lt;!– &lt;!–[if IE]&gt;</p>\n<p><style><br>.test{color:red;}<br></style><br>&lt;![enfif]&gt; –&gt;</p>\n<p>// 2、属性Hack<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test&#123; color:#090\\9; / For IE8+ / </div><div class=\"line\">color:#f00; / For IE7 and earlier / </div><div class=\"line\">_color:#ff0; / For IE6 and earlier */</div></pre></td></tr></table></figure></p>\n<p>// 3、选择符Hack<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">html .test&#123; color:#090; &#125; / For IE6 and earlier / </div><div class=\"line\">html .test&#123; color:#ff0; &#125; / For IE7</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-同步和异步的区别\"><a href=\"#6-同步和异步的区别\" class=\"headerlink\" title=\"6.同步和异步的区别\"></a>6.同步和异步的区别</h4><p>同步是阻塞模式，异步是非阻塞模式。</p>\n<p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，<br>直到收到返回信息才继续执行下去；</p>\n<p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进<br>行处理，这样可以提高执行的效率。</p>\n<h4 id=\"7、px和em的区别\"><a href=\"#7、px和em的区别\" class=\"headerlink\" title=\"7、px和em的区别\"></a>7、px和em的区别</h4><p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。</p>\n<p>em得值不是固定的，并且em会继承父级元素的字体大小。</p>\n<p>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em</p>\n<h4 id=\"8、什么叫优雅降级和渐进增强？\"><a href=\"#8、什么叫优雅降级和渐进增强？\" class=\"headerlink\" title=\"8、什么叫优雅降级和渐进增强？\"></a>8、什么叫优雅降级和渐进增强？</h4><h5 id=\"渐进增强-progressive-enhancement：\"><a href=\"#渐进增强-progressive-enhancement：\" class=\"headerlink\" title=\"渐进增强 progressive enhancement：\"></a>渐进增强 progressive enhancement：</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.transition</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span>;          <span class=\"comment\">/* 标准写法 */</span></div><div class=\"line\">  <span class=\"attribute\">-moz-transition</span>: all .<span class=\"number\">5s</span>;     <span class=\"comment\">/* firefox 内核 */</span></div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">5s</span>;  <span class=\"comment\">/* webkit 内核 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到<br>更好的用户体验。</p>\n<h5 id=\"优雅降级-graceful-degradation：\"><a href=\"#优雅降级-graceful-degradation：\" class=\"headerlink\" title=\"优雅降级 graceful degradation：\"></a>优雅降级 graceful degradation：</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.transition</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">5s</span>;  <span class=\"comment\">/* webkit 内核 */</span></div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: all .<span class=\"number\">5s</span>;     <span class=\"comment\">/* firefox 内核 */</span></div><div class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span>;          <span class=\"comment\">/* 标准写法 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>区别：</p>\n<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给</p>\n<p>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要</p>\n<p>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p>\n<h5 id=\"9、浏览器的内核分别有哪些\"><a href=\"#9、浏览器的内核分别有哪些\" class=\"headerlink\" title=\"9、浏览器的内核分别有哪些?\"></a>9、浏览器的内核分别有哪些?</h5><p>IE: trident内核 Firefox：<br>gecko内核 Safari：<br>webkit内核 Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核<br>Chrome：Blink(基于webkit，Google与Opera Software共同开发)</p>\n<h5 id=\"10、-moz、-ms、-webkit浏览器私有前缀详解\"><a href=\"#10、-moz、-ms、-webkit浏览器私有前缀详解\" class=\"headerlink\" title=\"10、-moz、-ms、-webkit浏览器私有前缀详解\"></a>10、-moz、-ms、-webkit浏览器私有前缀详解</h5><ul>\n<li>-moz 代表firefox浏览器私有属性</li>\n<li>-ms 代表IE浏览器私有属性</li>\n<li>-webkit 代表chrome、safari私有属性</li>\n</ul>\n<h5 id=\"11、如何理解CSS的display属性\"><a href=\"#11、如何理解CSS的display属性\" class=\"headerlink\" title=\"11、如何理解CSS的display属性\"></a>11、如何理解CSS的display属性</h5><p>在布局中，display属性是最重要的CSS属性之一。<br>其最常见的属性值有block,inline,none,table以及inline-block<br>最近的新宠为flex</p>\n<p>display: none;<br>将元素与其子元素从普通文档流中移除。这时文档的渲染就像元素从来没有存在过一样，<br>也就是说它所占据的空间被折叠了。元素的内容也会被屏幕阅读所忽略。</p>\n<p>display: inline;<br>该元素生成一个或多个行内框。就如名字般，行内级元素所占具的空间就是他的标签所定义的大小。<br>可以被视为对块级元素的补充。</p>\n<p>display: block;<br>该元素生成块级框。除特殊声明外，所有的块级元素开始于新的一行，延展到其容器的宽度。</p>\n<p>display: list-item;<br>元素被渲染为列表项呈现的方式，确切说就像是一个块级元素，但是会生成一个可以被list-style属性进行样式修饰的标记框。<br>只有<br>元素可以具有list-style的默认值。通常将<br>元素重置为默认行为。</p>\n<p>display: inline-block;<br>该元素生成一个块级别框，但是整个框的行为就像是一个内联元素。尝试在Codepen书写此示例，改变窗口的大小，这样会更有意义。</p>\n<p>display: flex;<br>引入flexbox布局模块或CSS弹性框，标志着我们第一次有了专门为浏览器内容进行布局的规范。<br>自从HTML被引入之后，网页内容布局已经演变了很多。<br>当设计者想要创建一些富有创意的设计时，使用的第一种方法就是嵌套的HTML表格，或者我们所说的基于表格的布局。</p>\n","excerpt":"<h4 id=\"1、什么是盒子模型？\"><a href=\"#1、什么是盒子模型？\" class=\"headerlink\" title=\"1、什么是盒子模型？\"></a>1、什么是盒子模型？</h4><p>在网页中，一个元素占有空间的大小由四个部分构成</p>\n<p>其中包括元素的内容（content），元素的内边距（padding）元素的边框（border），元素的外边距（margin）四部分。<br>","more":"<br>这四个部分占有的空间中，有的部分可以显示相应的内容，</p>\n<p>而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。</p>\n<h4 id=\"2、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#2、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h4><p>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea </p>\n<p>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote </p>\n<p>空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img</p>\n<h4 id=\"3、CSS实现垂直水平居中\"><a href=\"#3、CSS实现垂直水平居中\" class=\"headerlink\" title=\"3、CSS实现垂直水平居中\"></a>3、CSS实现垂直水平居中</h4><p>HTML结构：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>CSS：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.wrapper&#123;</div><div class=\"line\">  position:relative;</div><div class=\"line\">&#125; </div><div class=\"line\">.content&#123; </div><div class=\"line\">  background-color:#6699FF; </div><div class=\"line\">  width:200px; </div><div class=\"line\">  height:200px;</div><div class=\"line\">  position: absolute; //父元素需要相对定位</div><div class=\"line\">  top: 50%; left: 50%; </div><div class=\"line\">  margin-top:-100px ; //二分之一的</div><div class=\"line\">  height，width margin-left: -100px; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4、src与href的区别\"><a href=\"#4、src与href的区别\" class=\"headerlink\" title=\"4、src与href的区别\"></a>4、src与href的区别</h4><p>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p>\n<p>src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；</p>\n<p>在请求src资源时会将其指向的资源下载并应用到文档内，</p>\n<p>例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，</p>\n<p>直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。</p>\n<p>这也是为什么将js脚本放在底部而不是头部。</p>\n<h4 id=\"5、什么是CSS-Hack\"><a href=\"#5、什么是CSS-Hack\" class=\"headerlink\" title=\"5、什么是CSS Hack?\"></a>5、什么是CSS Hack?</h4><p>一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。</p>\n<p>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。<br>例如：<br>// 1、条件Hack<br>&lt;!– &lt;!–[if IE]&gt;</p>\n<p><style><br>.test{color:red;}<br></style><br>&lt;![enfif]&gt; –&gt;</p>\n<p>// 2、属性Hack<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test&#123; color:#090\\9; / For IE8+ / </div><div class=\"line\">color:#f00; / For IE7 and earlier / </div><div class=\"line\">_color:#ff0; / For IE6 and earlier */</div></pre></td></tr></table></figure></p>\n<p>// 3、选择符Hack<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">html .test&#123; color:#090; &#125; / For IE6 and earlier / </div><div class=\"line\">html .test&#123; color:#ff0; &#125; / For IE7</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-同步和异步的区别\"><a href=\"#6-同步和异步的区别\" class=\"headerlink\" title=\"6.同步和异步的区别\"></a>6.同步和异步的区别</h4><p>同步是阻塞模式，异步是非阻塞模式。</p>\n<p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，<br>直到收到返回信息才继续执行下去；</p>\n<p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进<br>行处理，这样可以提高执行的效率。</p>\n<h4 id=\"7、px和em的区别\"><a href=\"#7、px和em的区别\" class=\"headerlink\" title=\"7、px和em的区别\"></a>7、px和em的区别</h4><p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。</p>\n<p>em得值不是固定的，并且em会继承父级元素的字体大小。</p>\n<p>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em</p>\n<h4 id=\"8、什么叫优雅降级和渐进增强？\"><a href=\"#8、什么叫优雅降级和渐进增强？\" class=\"headerlink\" title=\"8、什么叫优雅降级和渐进增强？\"></a>8、什么叫优雅降级和渐进增强？</h4><h5 id=\"渐进增强-progressive-enhancement：\"><a href=\"#渐进增强-progressive-enhancement：\" class=\"headerlink\" title=\"渐进增强 progressive enhancement：\"></a>渐进增强 progressive enhancement：</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.transition</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span>;          <span class=\"comment\">/* 标准写法 */</span></div><div class=\"line\">  <span class=\"attribute\">-moz-transition</span>: all .<span class=\"number\">5s</span>;     <span class=\"comment\">/* firefox 内核 */</span></div><div class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">5s</span>;  <span class=\"comment\">/* webkit 内核 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到<br>更好的用户体验。</p>\n<h5 id=\"优雅降级-graceful-degradation：\"><a href=\"#优雅降级-graceful-degradation：\" class=\"headerlink\" title=\"优雅降级 graceful degradation：\"></a>优雅降级 graceful degradation：</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.transition</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">5s</span>;  <span class=\"comment\">/* webkit 内核 */</span></div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: all .<span class=\"number\">5s</span>;     <span class=\"comment\">/* firefox 内核 */</span></div><div class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span>;          <span class=\"comment\">/* 标准写法 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>区别：</p>\n<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给</p>\n<p>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要</p>\n<p>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p>\n<h5 id=\"9、浏览器的内核分别有哪些\"><a href=\"#9、浏览器的内核分别有哪些\" class=\"headerlink\" title=\"9、浏览器的内核分别有哪些?\"></a>9、浏览器的内核分别有哪些?</h5><p>IE: trident内核 Firefox：<br>gecko内核 Safari：<br>webkit内核 Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核<br>Chrome：Blink(基于webkit，Google与Opera Software共同开发)</p>\n<h5 id=\"10、-moz、-ms、-webkit浏览器私有前缀详解\"><a href=\"#10、-moz、-ms、-webkit浏览器私有前缀详解\" class=\"headerlink\" title=\"10、-moz、-ms、-webkit浏览器私有前缀详解\"></a>10、-moz、-ms、-webkit浏览器私有前缀详解</h5><ul>\n<li>-moz 代表firefox浏览器私有属性</li>\n<li>-ms 代表IE浏览器私有属性</li>\n<li>-webkit 代表chrome、safari私有属性</li>\n</ul>\n<h5 id=\"11、如何理解CSS的display属性\"><a href=\"#11、如何理解CSS的display属性\" class=\"headerlink\" title=\"11、如何理解CSS的display属性\"></a>11、如何理解CSS的display属性</h5><p>在布局中，display属性是最重要的CSS属性之一。<br>其最常见的属性值有block,inline,none,table以及inline-block<br>最近的新宠为flex</p>\n<p>display: none;<br>将元素与其子元素从普通文档流中移除。这时文档的渲染就像元素从来没有存在过一样，<br>也就是说它所占据的空间被折叠了。元素的内容也会被屏幕阅读所忽略。</p>\n<p>display: inline;<br>该元素生成一个或多个行内框。就如名字般，行内级元素所占具的空间就是他的标签所定义的大小。<br>可以被视为对块级元素的补充。</p>\n<p>display: block;<br>该元素生成块级框。除特殊声明外，所有的块级元素开始于新的一行，延展到其容器的宽度。</p>\n<p>display: list-item;<br>元素被渲染为列表项呈现的方式，确切说就像是一个块级元素，但是会生成一个可以被list-style属性进行样式修饰的标记框。<br>只有<br>元素可以具有list-style的默认值。通常将<br>元素重置为默认行为。</p>\n<p>display: inline-block;<br>该元素生成一个块级别框，但是整个框的行为就像是一个内联元素。尝试在Codepen书写此示例，改变窗口的大小，这样会更有意义。</p>\n<p>display: flex;<br>引入flexbox布局模块或CSS弹性框，标志着我们第一次有了专门为浏览器内容进行布局的规范。<br>自从HTML被引入之后，网页内容布局已经演变了很多。<br>当设计者想要创建一些富有创意的设计时，使用的第一种方法就是嵌套的HTML表格，或者我们所说的基于表格的布局。</p>"},{"title":"js 判断键盘事件大全 兼容FireFox和IE（退格、制表、回车、空格、方向键、删除键等）","date":"2016-12-27T14:16:13.000Z","_content":"http://www.tuicool.com/articles/eey6bm","source":"_posts/js-判断键盘事件大全-兼容FireFox和IE（退格、制表、回车、空格、方向键、删除键等）.md","raw":"---\ntitle: js 判断键盘事件大全 兼容FireFox和IE（退格、制表、回车、空格、方向键、删除键等）\ndate: 2016-12-27 22:16:13\ncategories: \n  - 技术\n  - JavaScript\ntags: 键盘事件\n---\nhttp://www.tuicool.com/articles/eey6bm","slug":"js-判断键盘事件大全-兼容FireFox和IE（退格、制表、回车、空格、方向键、删除键等）","published":1,"updated":"2016-12-29T05:01:27.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5o001e24uud71csxj1","content":"<p><a href=\"http://www.tuicool.com/articles/eey6bm\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/eey6bm</a></p>\n","excerpt":"","more":"<p><a href=\"http://www.tuicool.com/articles/eey6bm\">http://www.tuicool.com/articles/eey6bm</a></p>\n"},{"title":"js返回上一页并刷新的几种方法","date":"2016-07-20T13:58:16.000Z","_content":"\n```javascrip\nhref=\"javascript:history.go(-1)\" 返回上一页\nhref=\"javascript:location.reload()\" 刷新当前页面\n<!-- more -->\nhref=\"javascript:\" onclick=\"history.go(-2); \" 返回前两页\nhref=\"javascript:\" onclick=\"self.location=document.referrer;\" 返回上一页并刷新\nhref=\"javascript:\" onclick=\"history.back(); \" 返回上一页\n```","source":"_posts/js返回上一页并刷新的几种方法.md","raw":"---\ntitle: js返回上一页并刷新的几种方法\ndate: 2016-06-50 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: JS刷新\n---\n\n```javascrip\nhref=\"javascript:history.go(-1)\" 返回上一页\nhref=\"javascript:location.reload()\" 刷新当前页面\n<!-- more -->\nhref=\"javascript:\" onclick=\"history.go(-2); \" 返回前两页\nhref=\"javascript:\" onclick=\"self.location=document.referrer;\" 返回上一页并刷新\nhref=\"javascript:\" onclick=\"history.back(); \" 返回上一页\n```","slug":"js返回上一页并刷新的几种方法","published":1,"updated":"2017-02-18T12:42:59.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5r001g24uuoeeqhcun","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">href=&quot;javascript:history.go(-1)&quot; 返回上一页</div><div class=\"line\">href=&quot;javascript:location.reload()&quot; 刷新当前页面</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;history.go(-2); &quot; 返回前两页</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;self.location=document.referrer;&quot; 返回上一页并刷新</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;history.back(); &quot; 返回上一页</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">href=&quot;javascript:history.go(-1)&quot; 返回上一页</div><div class=\"line\">href=&quot;javascript:location.reload()&quot; 刷新当前页面</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;history.go(-2); &quot; 返回前两页</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;self.location=document.referrer;&quot; 返回上一页并刷新</div><div class=\"line\">href=&quot;javascript:&quot; onclick=&quot;history.back(); &quot; 返回上一页</div></pre></td></tr></table></figure>"},{"title":"apply call bind使用详解","date":"2016-06-28T13:58:16.000Z","_content":"\n\n```javascript\nvvar obj = {\n  \"loca\" : \"中国\",\n  \"tel\" : \"小米\",\n  \"money\" : \"100万\"\n};\n\n<!-- more -->\n\nfunction User(name,age){\n  this.name = name;\n  this.age = age;\n  return this;\n}\n\nvar user = new User(\"张三\",\"20\");\nconsole.log(user);\n\nfunction User2(name,age,sex){\n  //User.apply(this,[name,age]);\n  //this === obj\n  User.call(this,name,age);\n  this.sex = sex;\n  return this;\n};\n\nvar user2 = new User2(\"李四\",\"30\",\"男\");\nconsole.log(user2);\n\n// bind 会改变函数体中的 this 对象\n//变为你传递进去的对象\nvar user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");\n\nconsole.log(user3);\n\n```\n","source":"_posts/apply call bind.md","raw":"---\ntitle: apply call bind使用详解\ndate: 2016-06-28 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: 循环遍历\n---\n\n\n```javascript\nvvar obj = {\n  \"loca\" : \"中国\",\n  \"tel\" : \"小米\",\n  \"money\" : \"100万\"\n};\n\n<!-- more -->\n\nfunction User(name,age){\n  this.name = name;\n  this.age = age;\n  return this;\n}\n\nvar user = new User(\"张三\",\"20\");\nconsole.log(user);\n\nfunction User2(name,age,sex){\n  //User.apply(this,[name,age]);\n  //this === obj\n  User.call(this,name,age);\n  this.sex = sex;\n  return this;\n};\n\nvar user2 = new User2(\"李四\",\"30\",\"男\");\nconsole.log(user2);\n\n// bind 会改变函数体中的 this 对象\n//变为你传递进去的对象\nvar user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");\n\nconsole.log(user3);\n\n```\n","slug":"apply call bind","published":1,"updated":"2017-02-19T09:04:25.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn5v001j24uu8kbsds6c","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">vvar obj = &#123;</div><div class=\"line\">  <span class=\"string\">\"loca\"</span> : <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">  <span class=\"string\">\"tel\"</span> : <span class=\"string\">\"小米\"</span>,</div><div class=\"line\">  <span class=\"string\">\"money\"</span> : <span class=\"string\">\"100万\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">function User(name,age)&#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var user = new User(\"张三\",\"20\");</div><div class=\"line\">console.log(user);</div><div class=\"line\"></div><div class=\"line\">function User2(name,age,sex)&#123;</div><div class=\"line\">  //User.apply(this,[name,age]);</div><div class=\"line\">  //this === obj</div><div class=\"line\">  User.call(this,name,age);</div><div class=\"line\">  this.sex = sex;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var user2 = new User2(\"李四\",\"30\",\"男\");</div><div class=\"line\">console.log(user2);</div><div class=\"line\"></div><div class=\"line\">// bind 会改变函数体中的 this 对象</div><div class=\"line\">//变为你传递进去的对象</div><div class=\"line\">var user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");</div><div class=\"line\"></div><div class=\"line\">console.log(user3);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">vvar obj = &#123;</div><div class=\"line\">  <span class=\"string\">\"loca\"</span> : <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">  <span class=\"string\">\"tel\"</span> : <span class=\"string\">\"小米\"</span>,</div><div class=\"line\">  <span class=\"string\">\"money\"</span> : <span class=\"string\">\"100万\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></div><div class=\"line\"></div><div class=\"line\">function User(name,age)&#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var user = new User(\"张三\",\"20\");</div><div class=\"line\">console.log(user);</div><div class=\"line\"></div><div class=\"line\">function User2(name,age,sex)&#123;</div><div class=\"line\">  //User.apply(this,[name,age]);</div><div class=\"line\">  //this === obj</div><div class=\"line\">  User.call(this,name,age);</div><div class=\"line\">  this.sex = sex;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var user2 = new User2(\"李四\",\"30\",\"男\");</div><div class=\"line\">console.log(user2);</div><div class=\"line\"></div><div class=\"line\">// bind 会改变函数体中的 this 对象</div><div class=\"line\">//变为你传递进去的对象</div><div class=\"line\">var user3 = User2.bind(obj)(\"王五\",\"40\",\"男\");</div><div class=\"line\"></div><div class=\"line\">console.log(user3);</span></div></pre></td></tr></table></figure>\n"},{"title":"linear比例尺及ordinal比例尺的使用","date":"2017-02-28T03:05:42.000Z","_content":"\n在使用D3.js画图比例尺的使用是必不可少的，但对linear与ordinal总是处于蒙圈的状态\n\n写了个实例，总算弄清楚两个分别时候使用比较合适了,废话少话，直接上源码\n<!-- more -->\n```javascript\n\n  var width = 500\n  var height = 200\n  //添加svg元素\n  var svg = d3.select('body')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .style('padding', '40px')\n\n  var data = [    \n    {\n      name: '江北区',\n      value: 100\n    },{\n      name: '渝北区',\n      value: 80\n    },{\n      name: '九龙坡区',\n      value: 120\n    },{\n      name: '沙坪坝',\n      value: 182\n    },{\n      name: '渝中区',\n      value: 79\n    }\n  ]\n\n  var cfg = {\n    itemStyle: {\n      width: 20,\n      color: 'yellow',\n      padding: 50,\n      min: 10\n    }\n  }\n  \n  var dataset = []\n  var xData = []    \n  //处理数据\n  for(var i=0, len = data.length; i<len; i++){\n    dataset.push(data[i].value)\n    xData.push(data[i].name)\n  }\n\n  var min = d3.min(dataset)\n  var max = d3.max(dataset)\n\n  //定义Y轴比例尺\n  var yScale = d3.scale.linear()\n        .domain([0, max])  //定义域\n        .range([height, 0])  //值域(可用范围)\n\n  //定义Y轴    \n  var yAxis = d3.svg.axis()\n       .scale(yScale)      //指定比例尺\n       .orient('left')   //指定刻度的方向\n\n  //添加Y轴     \n  svg.append(\"g\")\n    .attr('class', 'axis-y')\n    .call(yAxis)\n\n\n  //定义X轴比例尺(序数比例尺) 因为X轴要显示文字，因此此处使用序数比例尺\n  var xScale = d3.scale.ordinal()\n    .domain(xData)\n    .rangeRoundBands([0, width]);  \n\n  //定义X轴    \n  var xAxis = d3.svg.axis()\n      .scale(xScale)      //指定比例尺\n      .orient('bottom')   //指定刻度的方向\n      \n  //添加X轴     \n  svg.append(\"g\")\n    .attr('class', 'axis-x')\n    .call(xAxis)\n    .attr('transform', 'translate(' + 0 + ',' + height + ')')\n\n  var itemStyle = cfg.itemStyle  \n\n  //x轴的比例尺 添加rect时需要算一个x的位置，再定义一个x比例尺\n  var xScale2 = d3.scale.ordinal()\n      .domain(d3.range(dataset.length))\n      .rangeRoundBands([0, width]);\n  //添加bar\n  svg.selectAll('.rect')\n    .data(dataset)\n    .enter()\n    .append('rect')\n    .attr('class', 'rect')\n    .attr('width', itemStyle.width)\n    .attr('height', function(d, i){\n      var h = yScale(d)\n      if(h<=0){\n        h = itemStyle.min\n      }\n      return h\n    })   \n    .attr(\"x\", function(d, i){\n        return xScale2(i) + itemStyle.width/2 + itemStyle.padding/2\n    } )\n    .attr(\"y\",function(d, i){\n      var y = height - yScale(d)\n      if(y==height){\n        y = y - itemStyle.min\n      }\n      return y\n    })\n``\n","source":"_posts/linear比例尺及ordinal比例尺的使用.md","raw":"---\ntitle: linear比例尺及ordinal比例尺的使用\ndate: 2017-02-28 11:05:42\ncategories: \n  - 技术\n  - D3.js\ntags: 比例尺 \n---\n\n在使用D3.js画图比例尺的使用是必不可少的，但对linear与ordinal总是处于蒙圈的状态\n\n写了个实例，总算弄清楚两个分别时候使用比较合适了,废话少话，直接上源码\n<!-- more -->\n```javascript\n\n  var width = 500\n  var height = 200\n  //添加svg元素\n  var svg = d3.select('body')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .style('padding', '40px')\n\n  var data = [    \n    {\n      name: '江北区',\n      value: 100\n    },{\n      name: '渝北区',\n      value: 80\n    },{\n      name: '九龙坡区',\n      value: 120\n    },{\n      name: '沙坪坝',\n      value: 182\n    },{\n      name: '渝中区',\n      value: 79\n    }\n  ]\n\n  var cfg = {\n    itemStyle: {\n      width: 20,\n      color: 'yellow',\n      padding: 50,\n      min: 10\n    }\n  }\n  \n  var dataset = []\n  var xData = []    \n  //处理数据\n  for(var i=0, len = data.length; i<len; i++){\n    dataset.push(data[i].value)\n    xData.push(data[i].name)\n  }\n\n  var min = d3.min(dataset)\n  var max = d3.max(dataset)\n\n  //定义Y轴比例尺\n  var yScale = d3.scale.linear()\n        .domain([0, max])  //定义域\n        .range([height, 0])  //值域(可用范围)\n\n  //定义Y轴    \n  var yAxis = d3.svg.axis()\n       .scale(yScale)      //指定比例尺\n       .orient('left')   //指定刻度的方向\n\n  //添加Y轴     \n  svg.append(\"g\")\n    .attr('class', 'axis-y')\n    .call(yAxis)\n\n\n  //定义X轴比例尺(序数比例尺) 因为X轴要显示文字，因此此处使用序数比例尺\n  var xScale = d3.scale.ordinal()\n    .domain(xData)\n    .rangeRoundBands([0, width]);  \n\n  //定义X轴    \n  var xAxis = d3.svg.axis()\n      .scale(xScale)      //指定比例尺\n      .orient('bottom')   //指定刻度的方向\n      \n  //添加X轴     \n  svg.append(\"g\")\n    .attr('class', 'axis-x')\n    .call(xAxis)\n    .attr('transform', 'translate(' + 0 + ',' + height + ')')\n\n  var itemStyle = cfg.itemStyle  \n\n  //x轴的比例尺 添加rect时需要算一个x的位置，再定义一个x比例尺\n  var xScale2 = d3.scale.ordinal()\n      .domain(d3.range(dataset.length))\n      .rangeRoundBands([0, width]);\n  //添加bar\n  svg.selectAll('.rect')\n    .data(dataset)\n    .enter()\n    .append('rect')\n    .attr('class', 'rect')\n    .attr('width', itemStyle.width)\n    .attr('height', function(d, i){\n      var h = yScale(d)\n      if(h<=0){\n        h = itemStyle.min\n      }\n      return h\n    })   \n    .attr(\"x\", function(d, i){\n        return xScale2(i) + itemStyle.width/2 + itemStyle.padding/2\n    } )\n    .attr(\"y\",function(d, i){\n      var y = height - yScale(d)\n      if(y==height){\n        y = y - itemStyle.min\n      }\n      return y\n    })\n``\n","slug":"linear比例尺及ordinal比例尺的使用","published":1,"updated":"2017-02-28T03:12:16.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn62001m24uu8cuvc9cq","content":"<p>在使用D3.js画图比例尺的使用是必不可少的，但对linear与ordinal总是处于蒙圈的状态</p>\n<p>写了个实例，总算弄清楚两个分别时候使用比较合适了,废话少话，直接上源码<br><a id=\"more\"></a><br>```javascript</p>\n<p>  var width = 500<br>  var height = 200<br>  //添加svg元素<br>  var svg = d3.select(‘body’)<br>    .append(‘svg’)<br>    .attr(‘width’, width)<br>    .attr(‘height’, height)<br>    .style(‘padding’, ‘40px’)</p>\n<p>  var data = [<br>    {<br>      name: ‘江北区’,<br>      value: 100<br>    },{<br>      name: ‘渝北区’,<br>      value: 80<br>    },{<br>      name: ‘九龙坡区’,<br>      value: 120<br>    },{<br>      name: ‘沙坪坝’,<br>      value: 182<br>    },{<br>      name: ‘渝中区’,<br>      value: 79<br>    }<br>  ]</p>\n<p>  var cfg = {<br>    itemStyle: {<br>      width: 20,<br>      color: ‘yellow’,<br>      padding: 50,<br>      min: 10<br>    }<br>  }</p>\n<p>  var dataset = []<br>  var xData = []<br>  //处理数据<br>  for(var i=0, len = data.length; i&lt;len; i++){<br>    dataset.push(data[i].value)<br>    xData.push(data[i].name)<br>  }</p>\n<p>  var min = d3.min(dataset)<br>  var max = d3.max(dataset)</p>\n<p>  //定义Y轴比例尺<br>  var yScale = d3.scale.linear()<br>        .domain([0, max])  //定义域<br>        .range([height, 0])  //值域(可用范围)</p>\n<p>  //定义Y轴<br>  var yAxis = d3.svg.axis()<br>       .scale(yScale)      //指定比例尺<br>       .orient(‘left’)   //指定刻度的方向</p>\n<p>  //添加Y轴<br>  svg.append(“g”)<br>    .attr(‘class’, ‘axis-y’)<br>    .call(yAxis)</p>\n<p>  //定义X轴比例尺(序数比例尺) 因为X轴要显示文字，因此此处使用序数比例尺<br>  var xScale = d3.scale.ordinal()<br>    .domain(xData)<br>    .rangeRoundBands([0, width]);  </p>\n<p>  //定义X轴<br>  var xAxis = d3.svg.axis()<br>      .scale(xScale)      //指定比例尺<br>      .orient(‘bottom’)   //指定刻度的方向</p>\n<p>  //添加X轴<br>  svg.append(“g”)<br>    .attr(‘class’, ‘axis-x’)<br>    .call(xAxis)<br>    .attr(‘transform’, ‘translate(‘ + 0 + ‘,’ + height + ‘)’)</p>\n<p>  var itemStyle = cfg.itemStyle  </p>\n<p>  //x轴的比例尺 添加rect时需要算一个x的位置，再定义一个x比例尺<br>  var xScale2 = d3.scale.ordinal()<br>      .domain(d3.range(dataset.length))<br>      .rangeRoundBands([0, width]);<br>  //添加bar<br>  svg.selectAll(‘.rect’)<br>    .data(dataset)<br>    .enter()<br>    .append(‘rect’)<br>    .attr(‘class’, ‘rect’)<br>    .attr(‘width’, itemStyle.width)<br>    .attr(‘height’, function(d, i){<br>      var h = yScale(d)<br>      if(h&lt;=0){<br>        h = itemStyle.min<br>      }<br>      return h<br>    })<br>    .attr(“x”, function(d, i){<br>        return xScale2(i) + itemStyle.width/2 + itemStyle.padding/2<br>    } )<br>    .attr(“y”,function(d, i){<br>      var y = height - yScale(d)<br>      if(y==height){<br>        y = y - itemStyle.min<br>      }<br>      return y<br>    })<br>``</p>\n","excerpt":"<p>在使用D3.js画图比例尺的使用是必不可少的，但对linear与ordinal总是处于蒙圈的状态</p>\n<p>写了个实例，总算弄清楚两个分别时候使用比较合适了,废话少话，直接上源码<br>","more":"<br>```javascript</p>\n<p>  var width = 500<br>  var height = 200<br>  //添加svg元素<br>  var svg = d3.select(‘body’)<br>    .append(‘svg’)<br>    .attr(‘width’, width)<br>    .attr(‘height’, height)<br>    .style(‘padding’, ‘40px’)</p>\n<p>  var data = [<br>    {<br>      name: ‘江北区’,<br>      value: 100<br>    },{<br>      name: ‘渝北区’,<br>      value: 80<br>    },{<br>      name: ‘九龙坡区’,<br>      value: 120<br>    },{<br>      name: ‘沙坪坝’,<br>      value: 182<br>    },{<br>      name: ‘渝中区’,<br>      value: 79<br>    }<br>  ]</p>\n<p>  var cfg = {<br>    itemStyle: {<br>      width: 20,<br>      color: ‘yellow’,<br>      padding: 50,<br>      min: 10<br>    }<br>  }</p>\n<p>  var dataset = []<br>  var xData = []<br>  //处理数据<br>  for(var i=0, len = data.length; i&lt;len; i++){<br>    dataset.push(data[i].value)<br>    xData.push(data[i].name)<br>  }</p>\n<p>  var min = d3.min(dataset)<br>  var max = d3.max(dataset)</p>\n<p>  //定义Y轴比例尺<br>  var yScale = d3.scale.linear()<br>        .domain([0, max])  //定义域<br>        .range([height, 0])  //值域(可用范围)</p>\n<p>  //定义Y轴<br>  var yAxis = d3.svg.axis()<br>       .scale(yScale)      //指定比例尺<br>       .orient(‘left’)   //指定刻度的方向</p>\n<p>  //添加Y轴<br>  svg.append(“g”)<br>    .attr(‘class’, ‘axis-y’)<br>    .call(yAxis)</p>\n<p>  //定义X轴比例尺(序数比例尺) 因为X轴要显示文字，因此此处使用序数比例尺<br>  var xScale = d3.scale.ordinal()<br>    .domain(xData)<br>    .rangeRoundBands([0, width]);  </p>\n<p>  //定义X轴<br>  var xAxis = d3.svg.axis()<br>      .scale(xScale)      //指定比例尺<br>      .orient(‘bottom’)   //指定刻度的方向</p>\n<p>  //添加X轴<br>  svg.append(“g”)<br>    .attr(‘class’, ‘axis-x’)<br>    .call(xAxis)<br>    .attr(‘transform’, ‘translate(‘ + 0 + ‘,’ + height + ‘)’)</p>\n<p>  var itemStyle = cfg.itemStyle  </p>\n<p>  //x轴的比例尺 添加rect时需要算一个x的位置，再定义一个x比例尺<br>  var xScale2 = d3.scale.ordinal()<br>      .domain(d3.range(dataset.length))<br>      .rangeRoundBands([0, width]);<br>  //添加bar<br>  svg.selectAll(‘.rect’)<br>    .data(dataset)<br>    .enter()<br>    .append(‘rect’)<br>    .attr(‘class’, ‘rect’)<br>    .attr(‘width’, itemStyle.width)<br>    .attr(‘height’, function(d, i){<br>      var h = yScale(d)<br>      if(h&lt;=0){<br>        h = itemStyle.min<br>      }<br>      return h<br>    })<br>    .attr(“x”, function(d, i){<br>        return xScale2(i) + itemStyle.width/2 + itemStyle.padding/2<br>    } )<br>    .attr(“y”,function(d, i){<br>      var y = height - yScale(d)<br>      if(y==height){<br>        y = y - itemStyle.min<br>      }<br>      return y<br>    })<br>``</p>"},{"title":"let和const命令(ES6)","date":"2016-01-03T15:44:30.000Z","toc":true,"_content":"#### let命令\n##### 基本用法 \nES6新增了 <code>let</code> 命令，用来声明变量。它的用法类似于 <code>var</code>，但是所声明的变量，只在let命令所在的代码块内有效。\n<!--more-->\n\n```javascript\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined.\nb // 1\n```\n以上分别用 <code>let</code> 和 <code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，\n<code>var</code>声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。\n\n常用的for循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n以上for循环i只在循环体内有效，在循环体外引用就会报错。\n\n<code>let</code>与<code>var</code>在for循环的比较\n\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6  数组a[0-9]的值与i的值一一对应\n```\n使用let，声明的变量仅在块级作用域内有效，最后输出的是6。\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10  数组a[0-9]的值都是10\n```\n变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一次i的值。\n##### 不存在变量提升 \n\nlet不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。\n\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n#####  暂时性死区 \n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n```javascript\ntypeof x; // ReferenceError\nlet x;\n```\n以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof undeclared_variable // \"undefined\"\n```\nundeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n```javascript\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n```javascript\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n```\nES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5是很常见的，现在有了这种规定，避免此类错误就很容易了。\n\n总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。\n\n##### 思考题\n思考以下tmp的值分别打印出什么？\n```javascript\nvar tmp = 123\nif (true) {\n  tmp = 'abc'\n  let tmp;\n}\ntmp ?\n```\n\n```javascript\nvar tmp = 123\nif (true) {\n  let tmp = 'abc'\n  tmp ?\n}\n\n```\n\n```javascript\nvar tmp = 123;\nif (true) {\n  let tmp = 'abc'; \n}\n tmp ?\n```\n\n```javascript\nvar tmp = 123;\nif (true) {\n   tmp = 'abc'\n}\ntmp ?\n```\n```javascript\nlet tmp = 123\nif (true) {\n   var tmp = 'abc'\n}\ntmp ?\n```\n\n#### const命令 \n<code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。\n```javascript\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n```\n<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。\n```javascript\nconst foo;\n// SyntaxError: Missing initializer in const declaration\n```\n<code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。\n```javascript\nif (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n```\n<code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n也就是说必须先声明后使用\n```javascript\nif (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n```\n<code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。\n```javascript\nvar message = \"Hello!\"\nlet age = 25\n\n// 以下两行都会报错\nconst message = \"Goodbye!\" //Identifier 'message' has already been declared\nconst age = 30  //Identifier 'message' has already been declared\n```","source":"_posts/let和const命令(ES6).md","raw":"\ntitle: let和const命令(ES6)\ndate: 2016-01-03 23:44:30\ncategories: \n  - 技术\n  - ES6\ntags: ES6\ntoc: true\n---\n#### let命令\n##### 基本用法 \nES6新增了 <code>let</code> 命令，用来声明变量。它的用法类似于 <code>var</code>，但是所声明的变量，只在let命令所在的代码块内有效。\n<!--more-->\n\n```javascript\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined.\nb // 1\n```\n以上分别用 <code>let</code> 和 <code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，\n<code>var</code>声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。\n\n常用的for循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n以上for循环i只在循环体内有效，在循环体外引用就会报错。\n\n<code>let</code>与<code>var</code>在for循环的比较\n\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6  数组a[0-9]的值与i的值一一对应\n```\n使用let，声明的变量仅在块级作用域内有效，最后输出的是6。\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10  数组a[0-9]的值都是10\n```\n变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一次i的值。\n##### 不存在变量提升 \n\nlet不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。\n\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n#####  暂时性死区 \n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n```javascript\ntypeof x; // ReferenceError\nlet x;\n```\n以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof undeclared_variable // \"undefined\"\n```\nundeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n```javascript\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n```javascript\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n```\nES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5是很常见的，现在有了这种规定，避免此类错误就很容易了。\n\n总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。\n\n##### 思考题\n思考以下tmp的值分别打印出什么？\n```javascript\nvar tmp = 123\nif (true) {\n  tmp = 'abc'\n  let tmp;\n}\ntmp ?\n```\n\n```javascript\nvar tmp = 123\nif (true) {\n  let tmp = 'abc'\n  tmp ?\n}\n\n```\n\n```javascript\nvar tmp = 123;\nif (true) {\n  let tmp = 'abc'; \n}\n tmp ?\n```\n\n```javascript\nvar tmp = 123;\nif (true) {\n   tmp = 'abc'\n}\ntmp ?\n```\n```javascript\nlet tmp = 123\nif (true) {\n   var tmp = 'abc'\n}\ntmp ?\n```\n\n#### const命令 \n<code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。\n```javascript\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n```\n<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。\n```javascript\nconst foo;\n// SyntaxError: Missing initializer in const declaration\n```\n<code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。\n```javascript\nif (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n```\n<code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n也就是说必须先声明后使用\n```javascript\nif (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n```\n<code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。\n```javascript\nvar message = \"Hello!\"\nlet age = 25\n\n// 以下两行都会报错\nconst message = \"Goodbye!\" //Identifier 'message' has already been declared\nconst age = 30  //Identifier 'message' has already been declared\n```","slug":"let和const命令(ES6)","published":1,"updated":"2017-01-07T01:04:20.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6e001q24uujl7my2ba","content":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>ES6新增了 <code>let</code> 命令，用来声明变量。它的用法类似于 <code>var</code>，但是所声明的变量，只在let命令所在的代码块内有效。<br><a id=\"more\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined.</span></div><div class=\"line\">b <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>以上分别用 <code>let</code> 和 <code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<br><code>var</code>声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。</p>\n<p>常用的for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>以上for循环i只在循环体内有效，在循环体外引用就会报错。</p>\n<p><code>let</code>与<code>var</code>在for循环的比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6  数组a[0-9]的值与i的值一一对应</span></div></pre></td></tr></table></figure>\n<p>使用let，声明的变量仅在块级作用域内有效，最后输出的是6。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10  数组a[0-9]的值都是10</span></div></pre></td></tr></table></figure></p>\n<p>变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一次i的值。</p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><p>let不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。<br>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// TDZ开始</span></div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">  tmp = <span class=\"number\">123</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure></p>\n<p>以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。<br>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure></p>\n<p>undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些“死区”比较隐蔽，不太容易发现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p>调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = <span class=\"number\">2</span>, y = x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// [2, 2]</span></div></pre></td></tr></table></figure></p>\n<p>ES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h5 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h5><p>思考以下tmp的值分别打印出什么？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">  tmp ?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = <span class=\"string\">'abc'</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"> tmp ?</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure>\n<h4 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h4><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</div><div class=\"line\">PI <span class=\"comment\">// 3.1415</span></div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MAX <span class=\"comment\">// Uncaught ReferenceError: MAX is not defined</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。<br>也就是说必须先声明后使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(MAX); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 以下两行都会报错</span></div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">\"Goodbye!\"</span> <span class=\"comment\">//Identifier 'message' has already been declared</span></div><div class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">30</span>  <span class=\"comment\">//Identifier 'message' has already been declared</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>ES6新增了 <code>let</code> 命令，用来声明变量。它的用法类似于 <code>var</code>，但是所声明的变量，只在let命令所在的代码块内有效。<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined.</span></div><div class=\"line\">b <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>以上分别用 <code>let</code> 和 <code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<br><code>var</code>声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。</p>\n<p>常用的for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>以上for循环i只在循环体内有效，在循环体外引用就会报错。</p>\n<p><code>let</code>与<code>var</code>在for循环的比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6  数组a[0-9]的值与i的值一一对应</span></div></pre></td></tr></table></figure>\n<p>使用let，声明的变量仅在块级作用域内有效，最后输出的是6。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10  数组a[0-9]的值都是10</span></div></pre></td></tr></table></figure></p>\n<p>变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一次i的值。</p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><p>let不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。<br>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// TDZ开始</span></div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">  tmp = <span class=\"number\">123</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure></p>\n<p>以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。<br>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure></p>\n<p>undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些“死区”比较隐蔽，不太容易发现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p>调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = <span class=\"number\">2</span>, y = x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// [2, 2]</span></div></pre></td></tr></table></figure></p>\n<p>ES6规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在ES5是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h5 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h5><p>思考以下tmp的值分别打印出什么？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">  tmp ?</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = <span class=\"string\">'abc'</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"> tmp ?</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> tmp = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> tmp = <span class=\"string\">'abc'</span></div><div class=\"line\">&#125;</div><div class=\"line\">tmp ?</div></pre></td></tr></table></figure>\n<h4 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h4><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</div><div class=\"line\">PI <span class=\"comment\">// 3.1415</span></div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MAX <span class=\"comment\">// Uncaught ReferenceError: MAX is not defined</span></div></pre></td></tr></table></figure></p>\n<p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。<br>也就是说必须先声明后使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(MAX); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">25</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 以下两行都会报错</span></div><div class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">\"Goodbye!\"</span> <span class=\"comment\">//Identifier 'message' has already been declared</span></div><div class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">30</span>  <span class=\"comment\">//Identifier 'message' has already been declared</span></div></pre></td></tr></table></figure></p>"},{"title":"Webpack的安装与基本配置","date":"2016-12-17T14:06:11.000Z","toc":true,"_content":"\n\n首先要安装 Node.js， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。\n\n#### 安装\n用 npm 安装 Webpack：\n\n```javascript \n$ npm install webpack -g\n```\n此时 Webpack 已经安装到了全局环境下，可以通过命令行 webpack -h 试试。\n\n通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。\n\n#### 使用\n1.将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。\n```javascript \nnpm install --save-dev webpack\n ```\n\n2.初始化一个新的项目\n```javascript \nnpm init # (answer the questions)\n```\n\n#### 配置文件\nWebpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js </code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。\n\n修改根目录已经创建好的package.json 来添加 webpack 需要的依赖：\n\n```javascript \n{\n  \"name\": \"React-dome\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack && webpack-dev-server --hot --inline --port 3002\"\n  },\n  \"author\": \"zhanghongqiao\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-core\": \"^6.14.0\",\n    \"babel-loader\": \"^6.2.5\",\n    \"jquery\": \"^3.1.1\",\n    \"path\": \"^0.12.7\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-server\": \"^1.16.1\"  //启服务\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.14.0\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"webpack-hot-middleware\": \"^2.12.2\"   //host loading\n  }\n}\n```\n\n\n别忘了执行 npm install。\n\n然后创建一个配置文件 webpack.config.js：\n```javascript \nvar webpack = require('webpack')\nvar path = require('path')\n\nmodule.exports = {\n    entry: [\n        'webpack/hot/dev-server',\n        './src/index.js'\n    ],\n    output: {\n        path: path.join(__dirname, 'build'),\n        filename: 'index.js',\n        publicPath: '/build/'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js?$/,\n                loader: 'babel',\n                exclude: /node_modules/,\n                query: {\n                    'env': {\n                        'development': {\n                            'presets': ['react-hmre', 'es2015', 'react']\n                        }\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,\n                loader: 'style!css'\n            }\n        ]\n    }\n}\n```\n在src目录下新建一个index.js\n```javascript \nimport $ from 'jquery';\n\n$('<h1>webpack test</h1>').appendTo('body');\n\n```\n\n\n#### 运行\n在根目录新建一个index.html\n```html \n<!DOCTYPE html>\n <html>\n     <head>\n         <meta charset=\"utf-8\">\n     </head>\n     <body>\n         <script src=\"build/index.js\" charset=\"utf-8\"></script>\n     </body>\n </html>\n\n```\n\n然后执行命令\n ```javascript \nnpm start\n```\n\nhttp://webpack.github.io/docs/usage.html\nhttp://webpackdoc.com/install.html","source":"_posts/Webpack的安装与基本配置.md","raw":"---\ntitle: Webpack的安装与基本配置\ndate: 2016-12-17 22:06:11\ncategories:\n- 技术\n- Webpack\ntags: Webpack \ntoc: true\n---\n\n\n首先要安装 Node.js， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。\n\n#### 安装\n用 npm 安装 Webpack：\n\n```javascript \n$ npm install webpack -g\n```\n此时 Webpack 已经安装到了全局环境下，可以通过命令行 webpack -h 试试。\n\n通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。\n\n#### 使用\n1.将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。\n```javascript \nnpm install --save-dev webpack\n ```\n\n2.初始化一个新的项目\n```javascript \nnpm init # (answer the questions)\n```\n\n#### 配置文件\nWebpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js </code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。\n\n修改根目录已经创建好的package.json 来添加 webpack 需要的依赖：\n\n```javascript \n{\n  \"name\": \"React-dome\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack && webpack-dev-server --hot --inline --port 3002\"\n  },\n  \"author\": \"zhanghongqiao\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-core\": \"^6.14.0\",\n    \"babel-loader\": \"^6.2.5\",\n    \"jquery\": \"^3.1.1\",\n    \"path\": \"^0.12.7\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-server\": \"^1.16.1\"  //启服务\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.14.0\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"webpack-hot-middleware\": \"^2.12.2\"   //host loading\n  }\n}\n```\n\n\n别忘了执行 npm install。\n\n然后创建一个配置文件 webpack.config.js：\n```javascript \nvar webpack = require('webpack')\nvar path = require('path')\n\nmodule.exports = {\n    entry: [\n        'webpack/hot/dev-server',\n        './src/index.js'\n    ],\n    output: {\n        path: path.join(__dirname, 'build'),\n        filename: 'index.js',\n        publicPath: '/build/'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js?$/,\n                loader: 'babel',\n                exclude: /node_modules/,\n                query: {\n                    'env': {\n                        'development': {\n                            'presets': ['react-hmre', 'es2015', 'react']\n                        }\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,\n                loader: 'style!css'\n            }\n        ]\n    }\n}\n```\n在src目录下新建一个index.js\n```javascript \nimport $ from 'jquery';\n\n$('<h1>webpack test</h1>').appendTo('body');\n\n```\n\n\n#### 运行\n在根目录新建一个index.html\n```html \n<!DOCTYPE html>\n <html>\n     <head>\n         <meta charset=\"utf-8\">\n     </head>\n     <body>\n         <script src=\"build/index.js\" charset=\"utf-8\"></script>\n     </body>\n </html>\n\n```\n\n然后执行命令\n ```javascript \nnpm start\n```\n\nhttp://webpack.github.io/docs/usage.html\nhttp://webpackdoc.com/install.html","slug":"Webpack的安装与基本配置","published":1,"updated":"2017-01-06T07:38:53.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6j001t24uu46hnh3dl","content":"<p>首先要安装 Node.js， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>用 npm 安装 Webpack：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div></pre></td></tr></table></figure>\n<p>此时 Webpack 已经安装到了全局环境下，可以通过命令行 webpack -h 试试。</p>\n<p>通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>1.将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure></p>\n<p>2.初始化一个新的项目<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init # (answer the questions)</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js </code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>–config</code> 选项来指定配置文件。</p>\n<p>修改根目录已经创建好的package.json 来添加 webpack 需要的依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"React-dome\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack &amp;&amp; webpack-dev-server --hot --inline --port 3002\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"zhanghongqiao\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.14.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"^3.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"path\"</span>: <span class=\"string\">\"^0.12.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.16.1\"</span>  <span class=\"comment\">//启服务</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.14.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.11.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react-hmre\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-hot-middleware\"</span>: <span class=\"string\">\"^2.12.2\"</span>   <span class=\"comment\">//host loading</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>别忘了执行 npm install。</p>\n<p>然后创建一个配置文件 webpack.config.js：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [</div><div class=\"line\">        <span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">        <span class=\"string\">'./src/index.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">'build'</span>),</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">'/build/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"string\">'env'</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">'development'</span>: &#123;</div><div class=\"line\">                            <span class=\"string\">'presets'</span>: [<span class=\"string\">'react-hmre'</span>, <span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'style!css'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在src目录下新建一个index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'&lt;h1&gt;webpack test&lt;/h1&gt;'</span>).appendTo(<span class=\"string\">'body'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>在根目录新建一个index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/index.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后执行命令<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm start</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://webpack.github.io/docs/usage.html\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/usage.html</a><br><a href=\"http://webpackdoc.com/install.html\" target=\"_blank\" rel=\"external\">http://webpackdoc.com/install.html</a></p>\n","excerpt":"","more":"<p>首先要安装 Node.js， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>用 npm 安装 Webpack：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div></pre></td></tr></table></figure>\n<p>此时 Webpack 已经安装到了全局环境下，可以通过命令行 webpack -h 试试。</p>\n<p>通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>1.将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure></p>\n<p>2.初始化一个新的项目<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init # (answer the questions)</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js </code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>–config</code> 选项来指定配置文件。</p>\n<p>修改根目录已经创建好的package.json 来添加 webpack 需要的依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"React-dome\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack &amp;&amp; webpack-dev-server --hot --inline --port 3002\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"zhanghongqiao\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.14.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"^3.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"path\"</span>: <span class=\"string\">\"^0.12.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.16.1\"</span>  <span class=\"comment\">//启服务</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.14.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.11.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react-hmre\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-hot-middleware\"</span>: <span class=\"string\">\"^2.12.2\"</span>   <span class=\"comment\">//host loading</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>别忘了执行 npm install。</p>\n<p>然后创建一个配置文件 webpack.config.js：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [</div><div class=\"line\">        <span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">        <span class=\"string\">'./src/index.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">'build'</span>),</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">'/build/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"string\">'env'</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">'development'</span>: &#123;</div><div class=\"line\">                            <span class=\"string\">'presets'</span>: [<span class=\"string\">'react-hmre'</span>, <span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'style!css'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在src目录下新建一个index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'&lt;h1&gt;webpack test&lt;/h1&gt;'</span>).appendTo(<span class=\"string\">'body'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>在根目录新建一个index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/index.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后执行命令<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm start</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://webpack.github.io/docs/usage.html\">http://webpack.github.io/docs/usage.html</a><br><a href=\"http://webpackdoc.com/install.html\">http://webpackdoc.com/install.html</a></p>\n"},{"title":"react-router实例","date":"2017-02-21T00:04:08.000Z","_content":"\n### Router\n\nreact-router 是官方提供的路由库，差不多是唯一可选的路由库，通过对 url 的管理来触发相应的组件\n\n### Install\n\nnpm install react-router --save","source":"_posts/react-router实例.md","raw":"---\ntitle: react-router实例\ndate: 2017-02-21 08:04:08\ncategories: \n  - 技术\n  - React\ntags: react-router\n---\n\n### Router\n\nreact-router 是官方提供的路由库，差不多是唯一可选的路由库，通过对 url 的管理来触发相应的组件\n\n### Install\n\nnpm install react-router --save","slug":"react-router实例","published":1,"updated":"2017-02-21T01:39:11.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6o001x24uujtbdo1di","content":"<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><p>react-router 是官方提供的路由库，差不多是唯一可选的路由库，通过对 url 的管理来触发相应的组件</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>npm install react-router –save</p>\n","excerpt":"","more":"<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><p>react-router 是官方提供的路由库，差不多是唯一可选的路由库，通过对 url 的管理来触发相应的组件</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>npm install react-router –save</p>\n"},{"title":"git常用命令","date":"2016-06-11T06:11:32.000Z","_content":"\n隔一断时间不提交代码就忘记命名了，\n好记性不如敲敲键盘，做做笔记\n<!-- more -->\n#### 本地项目托管到github服务器 这几个常用的，先记到前面吧\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/yourId/repoName.git\ngit push -u origin master\n\n\n生成密钥\nssh-keygen -t rsa -C \"user@domain\"\nid_rsa 密钥\nid_rsa.pub 公钥\n\n初始化\ngit init\n\n克隆\ngit clone [url]\n会在跟目录下创建一个 .git 的文件夹\n\n设置忽略文件\ntouch .gitignore  //创建一个 .gitignore 文件\n\n添加新文件到版本库\ngit add .  //添加到当前目录所有文件到版本库\ngit add *.txt //添加当前目录下所有 txt 格式的文件到版本库\ngit add so mefile.txt //添加单个文件到版本库\n\ngit commit -am \"本次修改内容，写上一个大概的意思\" //将本次提交加入到本地环境\n// branch 是版本分支名称\ngit pull origin [branch]  //获取服务器上最新的源码\ngit push origin [branch]  //将本地的 commit 推送到服务器 \n\n检测本地文件修改状态\ngit status\n\n分支管理\ngit branch  //查看本地分支 // 带 * 号的是当前分支名称\ngit branch -a  //查看所有分支\ngit branch -r //查看远程分支\n\n创建分支\ngit branch [branchName]\n\n切换分支\ngit checkout -b [branchName]\n\n提交\ngit commit -am \"some msg\"  //提交所有修改\ngit commit -m \"some msg\" mefile.txt  //提交单个文件\n\n获取服务器最新数据\ngit pull <远程主机名> <远程分支名>\ngit pull origin master\n\n推送本地最新数据到远程主机\ngit push <远程主机名> <远程分支名>\ngit push origin master\n\n日志\ngit log //查看所有提交日志\ngit log -n  //  只显示最前面的几行日至   n 是一个正整数\n\n显示修改的行数统计\ngit log --stat -n\ngit log -p -n      //同上，显示信息更全","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2016-06-11 14:11:32\ncategories: \n  - 技术\n  - github\ntags: [github]\n---\n\n隔一断时间不提交代码就忘记命名了，\n好记性不如敲敲键盘，做做笔记\n<!-- more -->\n#### 本地项目托管到github服务器 这几个常用的，先记到前面吧\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/yourId/repoName.git\ngit push -u origin master\n\n\n生成密钥\nssh-keygen -t rsa -C \"user@domain\"\nid_rsa 密钥\nid_rsa.pub 公钥\n\n初始化\ngit init\n\n克隆\ngit clone [url]\n会在跟目录下创建一个 .git 的文件夹\n\n设置忽略文件\ntouch .gitignore  //创建一个 .gitignore 文件\n\n添加新文件到版本库\ngit add .  //添加到当前目录所有文件到版本库\ngit add *.txt //添加当前目录下所有 txt 格式的文件到版本库\ngit add so mefile.txt //添加单个文件到版本库\n\ngit commit -am \"本次修改内容，写上一个大概的意思\" //将本次提交加入到本地环境\n// branch 是版本分支名称\ngit pull origin [branch]  //获取服务器上最新的源码\ngit push origin [branch]  //将本地的 commit 推送到服务器 \n\n检测本地文件修改状态\ngit status\n\n分支管理\ngit branch  //查看本地分支 // 带 * 号的是当前分支名称\ngit branch -a  //查看所有分支\ngit branch -r //查看远程分支\n\n创建分支\ngit branch [branchName]\n\n切换分支\ngit checkout -b [branchName]\n\n提交\ngit commit -am \"some msg\"  //提交所有修改\ngit commit -m \"some msg\" mefile.txt  //提交单个文件\n\n获取服务器最新数据\ngit pull <远程主机名> <远程分支名>\ngit pull origin master\n\n推送本地最新数据到远程主机\ngit push <远程主机名> <远程分支名>\ngit push origin master\n\n日志\ngit log //查看所有提交日志\ngit log -n  //  只显示最前面的几行日至   n 是一个正整数\n\n显示修改的行数统计\ngit log --stat -n\ngit log -p -n      //同上，显示信息更全","slug":"git常用命令","published":1,"updated":"2017-02-18T11:59:21.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6s002124uuu5g3q408","content":"<p>隔一断时间不提交代码就忘记命名了，<br>好记性不如敲敲键盘，做做笔记<br><a id=\"more\"></a></p>\n<h4 id=\"本地项目托管到github服务器-这几个常用的，先记到前面吧\"><a href=\"#本地项目托管到github服务器-这几个常用的，先记到前面吧\" class=\"headerlink\" title=\"本地项目托管到github服务器 这几个常用的，先记到前面吧\"></a>本地项目托管到github服务器 这几个常用的，先记到前面吧</h4><p>git init<br>git add .<br>git commit -m “first commit”<br>git remote add origin <a href=\"https://github.com/yourId/repoName.git\" target=\"_blank\" rel=\"external\">https://github.com/yourId/repoName.git</a><br>git push -u origin master</p>\n<p>生成密钥<br>ssh-keygen -t rsa -C “user@domain”<br>id_rsa 密钥<br>id_rsa.pub 公钥</p>\n<p>初始化<br>git init</p>\n<p>克隆<br>git clone [url]<br>会在跟目录下创建一个 .git 的文件夹</p>\n<p>设置忽略文件<br>touch .gitignore  //创建一个 .gitignore 文件</p>\n<p>添加新文件到版本库<br>git add .  //添加到当前目录所有文件到版本库<br>git add *.txt //添加当前目录下所有 txt 格式的文件到版本库<br>git add so mefile.txt //添加单个文件到版本库</p>\n<p>git commit -am “本次修改内容，写上一个大概的意思” //将本次提交加入到本地环境<br>// branch 是版本分支名称<br>git pull origin [branch]  //获取服务器上最新的源码<br>git push origin [branch]  //将本地的 commit 推送到服务器 </p>\n<p>检测本地文件修改状态<br>git status</p>\n<p>分支管理<br>git branch  //查看本地分支 // 带 * 号的是当前分支名称<br>git branch -a  //查看所有分支<br>git branch -r //查看远程分支</p>\n<p>创建分支<br>git branch [branchName]</p>\n<p>切换分支<br>git checkout -b [branchName]</p>\n<p>提交<br>git commit -am “some msg”  //提交所有修改<br>git commit -m “some msg” mefile.txt  //提交单个文件</p>\n<p>获取服务器最新数据<br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git pull origin master</p>\n<p>推送本地最新数据到远程主机<br>git push &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git push origin master</p>\n<p>日志<br>git log //查看所有提交日志<br>git log -n  //  只显示最前面的几行日至   n 是一个正整数</p>\n<p>显示修改的行数统计<br>git log –stat -n<br>git log -p -n      //同上，显示信息更全</p>\n","excerpt":"<p>隔一断时间不提交代码就忘记命名了，<br>好记性不如敲敲键盘，做做笔记<br>","more":"</p>\n<h4 id=\"本地项目托管到github服务器-这几个常用的，先记到前面吧\"><a href=\"#本地项目托管到github服务器-这几个常用的，先记到前面吧\" class=\"headerlink\" title=\"本地项目托管到github服务器 这几个常用的，先记到前面吧\"></a>本地项目托管到github服务器 这几个常用的，先记到前面吧</h4><p>git init<br>git add .<br>git commit -m “first commit”<br>git remote add origin <a href=\"https://github.com/yourId/repoName.git\">https://github.com/yourId/repoName.git</a><br>git push -u origin master</p>\n<p>生成密钥<br>ssh-keygen -t rsa -C “user@domain”<br>id_rsa 密钥<br>id_rsa.pub 公钥</p>\n<p>初始化<br>git init</p>\n<p>克隆<br>git clone [url]<br>会在跟目录下创建一个 .git 的文件夹</p>\n<p>设置忽略文件<br>touch .gitignore  //创建一个 .gitignore 文件</p>\n<p>添加新文件到版本库<br>git add .  //添加到当前目录所有文件到版本库<br>git add *.txt //添加当前目录下所有 txt 格式的文件到版本库<br>git add so mefile.txt //添加单个文件到版本库</p>\n<p>git commit -am “本次修改内容，写上一个大概的意思” //将本次提交加入到本地环境<br>// branch 是版本分支名称<br>git pull origin [branch]  //获取服务器上最新的源码<br>git push origin [branch]  //将本地的 commit 推送到服务器 </p>\n<p>检测本地文件修改状态<br>git status</p>\n<p>分支管理<br>git branch  //查看本地分支 // 带 * 号的是当前分支名称<br>git branch -a  //查看所有分支<br>git branch -r //查看远程分支</p>\n<p>创建分支<br>git branch [branchName]</p>\n<p>切换分支<br>git checkout -b [branchName]</p>\n<p>提交<br>git commit -am “some msg”  //提交所有修改<br>git commit -m “some msg” mefile.txt  //提交单个文件</p>\n<p>获取服务器最新数据<br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git pull origin master</p>\n<p>推送本地最新数据到远程主机<br>git push &lt;远程主机名&gt; &lt;远程分支名&gt;<br>git push origin master</p>\n<p>日志<br>git log //查看所有提交日志<br>git log -n  //  只显示最前面的几行日至   n 是一个正整数</p>\n<p>显示修改的行数统计<br>git log –stat -n<br>git log -p -n      //同上，显示信息更全</p>"},{"title":"px、em、rem 区别","date":"2016-12-24T14:13:16.000Z","_content":"\n#### PX\npx 像素单位。px 是相对于显示器屏幕分辨率而设置大小的。\npx 是一个真实的物理尺寸, 是一个绝对单位。<!--more-->\n#### EM\nem 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(也可以理解为相对于父元素尺寸)。\n\n```html\n<div style=\"font-size: 12px;\">\n\t<strong style=\"font-size: 1em;\">hello world</strong>\n</div>\n```\nstrong 元素中的 1em 就是想对与父元素中来设置的, 这里的 1em 等于 12px\t\n#### REM\nrem 是 CSS3 的一个相对单位（root em，根em, 这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时, 仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。\n```html\n<!DOCTYPE html>\n<html lang=\"en\" style=\"font-size: 12px;\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Rem</title>\n</head>\n<body>\n\t<div style=\"font-size: 20px;\">\n\t\t<strong style=\"font-size: 1rem;\">hello world</strong>\n\t</div>\n</body>\n</html>\n```\nstrong 元素中的 1rem 就是想对与跟元素(html)中来设置的, 这里的 1rem 等于 12px, 与父元素没有关系","source":"_posts/px、em、rem-区别.md","raw":"---\ntitle: px、em、rem 区别\ndate: 2016-12-24 22:13:16\ncategories: \n  - 技术\n  - CSS\ntags: 单位\n---\n\n#### PX\npx 像素单位。px 是相对于显示器屏幕分辨率而设置大小的。\npx 是一个真实的物理尺寸, 是一个绝对单位。<!--more-->\n#### EM\nem 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(也可以理解为相对于父元素尺寸)。\n\n```html\n<div style=\"font-size: 12px;\">\n\t<strong style=\"font-size: 1em;\">hello world</strong>\n</div>\n```\nstrong 元素中的 1em 就是想对与父元素中来设置的, 这里的 1em 等于 12px\t\n#### REM\nrem 是 CSS3 的一个相对单位（root em，根em, 这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时, 仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。\n```html\n<!DOCTYPE html>\n<html lang=\"en\" style=\"font-size: 12px;\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Rem</title>\n</head>\n<body>\n\t<div style=\"font-size: 20px;\">\n\t\t<strong style=\"font-size: 1rem;\">hello world</strong>\n\t</div>\n</body>\n</html>\n```\nstrong 元素中的 1rem 就是想对与跟元素(html)中来设置的, 这里的 1rem 等于 12px, 与父元素没有关系","slug":"px、em、rem-区别","published":1,"updated":"2016-12-29T05:01:27.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6v002424uuarxu3s60","content":"<h4 id=\"PX\"><a href=\"#PX\" class=\"headerlink\" title=\"PX\"></a>PX</h4><p>px 像素单位。px 是相对于显示器屏幕分辨率而设置大小的。<br>px 是一个真实的物理尺寸, 是一个绝对单位。<a id=\"more\"></a></p>\n<h4 id=\"EM\"><a href=\"#EM\" class=\"headerlink\" title=\"EM\"></a>EM</h4><p>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(也可以理解为相对于父元素尺寸)。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 12px;\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 1em;\"</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>strong 元素中的 1em 就是想对与父元素中来设置的, 这里的 1em 等于 12px    </p>\n<h4 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h4><p>rem 是 CSS3 的一个相对单位（root em，根em, 这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时, 仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 12px;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Rem<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 20px;\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 1rem;\"</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>strong 元素中的 1rem 就是想对与跟元素(html)中来设置的, 这里的 1rem 等于 12px, 与父元素没有关系</p>\n","excerpt":"<h4 id=\"PX\"><a href=\"#PX\" class=\"headerlink\" title=\"PX\"></a>PX</h4><p>px 像素单位。px 是相对于显示器屏幕分辨率而设置大小的。<br>px 是一个真实的物理尺寸, 是一个绝对单位。","more":"</p>\n<h4 id=\"EM\"><a href=\"#EM\" class=\"headerlink\" title=\"EM\"></a>EM</h4><p>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(也可以理解为相对于父元素尺寸)。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 12px;\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 1em;\"</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>strong 元素中的 1em 就是想对与父元素中来设置的, 这里的 1em 等于 12px    </p>\n<h4 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h4><p>rem 是 CSS3 的一个相对单位（root em，根em, 这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时, 仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 12px;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Rem<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 20px;\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 1rem;\"</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>strong 元素中的 1rem 就是想对与跟元素(html)中来设置的, 这里的 1rem 等于 12px, 与父元素没有关系</p>"},{"title":"JS作用域和闭包","date":"2017-02-18T15:18:13.000Z","_content":"\n作用域和闭包是 JavaScript 最重要的概念之一，想要进一步学习 JavaScript，就必须理解 JavaScript 作用域和闭包的工作原理。\n<!-- more -->\n\n#### 作用域\n\n任何程序设计语言都有作用域的概念，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在 JavaScript 中，变量的作用域有全局作用域和局部作用域两种。\n\n全局作用域（Global Scope）\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下三种情形拥有全局作用域：\n\n1.最外层函数和在最外层函数外面定义的变量拥有全局作用域，例如：\n```javascript\nvar global = \"global\";     // 显式声明一个全局变量\nfunction checkscope() {\n    var local = \"local\";   // 显式声明一个局部变量\n    return global;         // 返回全局变量的值\n}\nconsole.log(global);       // \"global\"\nconsole.log(checkscope()); // \"global\"\nconsole.log(local);        // error: local is not defined.\n```\n上面代码中，global 是全局变量，不管是在 checkscope() 函数内部还是外部，都能访问到全局变量 global。\n\n2.所有末定义直接赋值的变量自动声明为拥有全局作用域，例如\n```javascript\nfunction checkscope() {\n    var local = \"local\"; // 显式声明一个局部变量\n    global = \"global\";   // 隐式声明一个全局变量(不好的写法)\n}\nconsole.log(global);     // \"global\"\nconsole.log(local);      // error: local is not defined.\n```\n上面代码中，变量 global 未用 var 关键字定义就直接赋值，所以隐式的创建了全局变量 global，但这种写法容易造成误解，应尽量避免这种写法。\n\n3.所有 window 对象的属性拥有全局作用域\n\n一般情况下，window 对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等等。\n\n局部作用域（Local Scope）\n\n和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。最常见的是在函数体内定义的变量，只能在函数体内使用。例如：\n```javascript\nfunction checkscope() {\n    var local = \"local\";   // 显式声明一个局部变量\n    return local;         // 返回全局变量的值\n}\nconsole.log(checkscope()); // \"local\"\nconsole.log(local);        // error: local is not defined.\n```\n上面代码中，在函数体内定义了变量 local，在函数体内是可以访问了，在函数外访问就报错了。\n\n全局和局部作用域的关系\n\n在函数体内，局部变量的优先级高于同名的全局变量。如果在函数内声明的一个局部变量或者函数参数中带有的变量和全局变量重名，那么全局变量就被局部变量所遮盖。\n```javascript\nvar scope = \"global\";      // 声明一个全局变量\nfunction checkscope() {\n    var scope = \"local\";   // 声明一个同名的局部变量\n    return scope;          // 返回局部变量的值，而不是全局变量的值\n}\nconsole.log(checkscope()); // \"local\"\n尽管在全局作用域编写代码时可以不写 var 语句，但声明局部变量时则必须使用 var 语句。思考一下如果不这样做会怎样：\n\nscope = \"global\";           // 声明一个全局变量，甚至不用 var 来声明\nfunction checkscope2() {\n    scope = \"local\";        // 糟糕！我们刚修改了全局变量\n    myscope = \"local\";      // 这里显式地声明了一个新的全局变量\n    return [scope, myscope];// 返回两个值\n}\nconsole.log(checkscope2()); // [\"local\", \"local\"]，产生了副作用\nconsole.log(scope);         // \"local\"，全局变量修改了\nconsole.log(myscope);       // \"local\"，全局命名空间搞乱了\n```\n函数定义是可以嵌套的。由于每个函数都有它自己的作用域，因此会出现几个局部作用域嵌套的情况，例如：\njavascript```\nvar scope = \"global scope\";         // 全局变量\nfunction checkscope() {\n    var scope = \"local scope\";      //局部变量 \n    function nested() {\n        var scope = \"nested scope\"; // 嵌套作用域内的局部变量\n        return scope;               // 返回当前作用域内的值\n    }\n    return nested();\n}\nconsole.log(checkscope());          // \"nested scope\"\n```\n函数作用域和声明提前\n\n在一些类似 C 语言的编程语言中，花括号内的每一段代码都具有各自的作用域，而且变量在声明它们的代码段之外是不可见的，我们称为块级作用域（block scope），而 JavaScript 中没有块级作用域。JavaScript 取而代之地使用了函数作用域（function scope），变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。\n\n在如下所示的代码中，在不同位置定义了变量 i、j 和 k，它们都在同一个作用域内，这三个变量在函数体内均是有定义的。\n```javascrtip\nfunction test(o) {\n    var i = 0; // i在整个函数体内均是有定义的\n    if (typeof o == \"object\") {\n        var j = 0; // j在函数体内是有定义的，不仅仅是在这个代码段内\n        for (var k = 0; k < 10; k++) { // k在函数体内是有定义的，不仅仅是在循环内\n            console.log(k); // 输出数字0~9\n        }\n        console.log(k); // k已经定义了，输出10\n    }\n    console.log(j); // j已经定义了，但可能没有初始化\n}\n```\n\nJavaScript 的函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript 的这个特性被非正式地称为声明提前（hoisting），即 JavaScript 函数里声明的所有变量（但不涉及赋值）都被「提前」至函数体的顶部，看一下如下代码：\n```javascript\nvar scope = \"global\";\nfunction f() {\n    console.log(scope);  // 输出\"undefined\"，而不是\"global\"\n    var scope = \"local\"; // 变量在这里赋初始值，但变量本身在函数体内任何地方均是有定义的\n    console.log(scope);  // 输出\"local\"\n}\n```\n\n你可能会误以为函数中的第一行会输出 \"global\"，因为代码还没有执行到 var 语句声明局部变量的地方。其实不然，由于函数作用域的特性，局部变量在整个函数体始终是有定义的，也就是说，在函数体内局部变量遮盖了同名全局变量。尽管如此，只有在程序执行到 var 语句的时候，局部变量才会被真正赋值。因此，上述过程等价于：将函数内的变量声明“提前”至函数体顶部，同时变量初始化留在原来的位置：\n\n```javascript\nfunction f() {\n    var scope;          // 在函数顶部声明了局部变量\n    console.log(scope); // 变量存在，但其值是\"undefined\"\n    scope = \"local\";    // 这里将其初始化并赋值\n    console.log(scope); // 这里它具有了我们所期望的值\n}\n```\n在具有块级作用域的编程语言中，在狭小的作用域里让变量声明和使用变量的代码尽可能靠近彼此，通常来讲，这是一个非常不错的编程习惯。由于 JavaScript 没有块级作用域，因此一些程序员特意将变量声明放在函数体顶部，而不是将声明靠近放在使用变量之处。这种做法使得他们的源代码非常清晰地反映了真实的变量作用域。\n\n#### 作用域链\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n\n标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。\n\n请看下面的示例代码：\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n    if (color === \"blue\"){\n        color = \"red\";\n    } else {\n        color = \"blue\";\n    }\n}\n\nconsole.log(changeColor());\n```\n\n在这个简单的例子中，函数 changeColor() 的作用域链包含两个对象：它自己的变量对象（其中定义着 arguments 对象）和全局环境的变量对象。可以在函数内部访问变量 color，就是因为可以在这个作用域链中找到它。\n\n此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面这个例子所示：\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n    var anotherColor = \"red\";\n\n    function swapColors(){\n        var tempColor = anotherColor;\n        anotherColor = color;\n        color = tempColor;\n\n        // 这里可以访问color、anotherColor和tempColor\n    }\n\n    // 这里可以访问color和anotherColor，但不能访问tempColor\n    swapColors();\n}\n```\n// 这里只能访问color\nchangeColor();\n以上代码共涉及3个执行环境：全局环境、changeColor() 的局部环境和 swapColors() 的局部环境。全局环境中有一个变量 color 和一个函数 changeColor()。changeColor() 的局部环境中有一个名为 anotherColor 的变量和一个名为 swapColors() 的函数，但它也可以访问全局环境中的变量 color。swapColors() 的局部环境中有一个变量 tempColor，该变量只能在这个环境中访问到。无论全局环境还是 changeColor() 的局部环境都无权访问 tempColor。然而，在 swapColors() 内部则可以访问其他两个环境中的所有变量，因为那两个环境是它的父执行环境。下图形象地展示了前面这个例子的作用域链。\n![](/css/images/scope.jpg)\n\n### 闭包\n\nMDN 对闭包的定义：\n\n闭包是指那些能够访问独立（自由）变量的函数（变量在本地使用，但定义在一个封闭的作用域中）。换句话说，这些函数可以「记忆」它被创建时候的环境。\n《JavaScript 权威指南(第6版)》对闭包的定义：\n\n函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为闭包。\n\n《JavaScript 高级程序设计(第3版)》对闭包的定义：\n\n闭包是指有权访问另一个函数作用域中的变量的函数。\n\n上面这些定义都比较晦涩难懂，阮一峰的解释稍微好理解一些：\n\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成定义在一个函数内部的函数。\n\n#### 闭包的用途\n\n闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量（作用域链），另一个就是让这些变量的值始终保持在内存中。怎么来理解这句话呢？请看下面的代码。\n```javascript\nfunction fun() {　　　\n    var n = 1;\n\n    add = function() {\n        n += 1\n    }\n\n    function fun2(){\n        console.log(n);\n    }\n\n    return fun2;\n}\n\nvar result = fun();　　\nresult(); // 1\nadd();\nresult(); // 2\n```\n\n在这段代码中，result 实际上就是函数 fun2。它一共运行了两次，第一次的值是 1，第二次的值是 2。这证明了，函数 fun 中的局部变量 n 一直保存在内存中，并没有在 fun 调用后被自动清除。\n\n为什么会这样呢？原因就在于 fun 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun，因此 fun 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。\n\n这段代码中另一个值得注意的地方，就是 add = function() { n += 1 } 这一行。首先，变量 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，和 fun2 处于同一作用域，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。\n\n#### 计数器的困境\n\n我们再来看一个经典例子「计数器的困境」，假设你想统计一些数值，且该计数器在所有函数中都是可用的。你可以定义一个全局变量 counter 当做计数器，再定义一个 add() 函数来设置计数器递增。代码如下：\n```javascript\nvar counter = 0;\nfunction add() {\n    return counter += 1;\n}\n\nconsole.log(add());\nconsole.log(add());\nconsole.log(add());\n// 计数器现在为 3\n```\n\n计数器数值在执行 add() 函数时发生变化。但问题来了，页面上的任何脚本都能改变计数器 counter，即便没有调用 add() 函数。如果我们将计数器 counter 定义在 add() 函数内部，就不会被外部脚本随意修改到计数器的值了。代码如下：\n```javascript\nfunction add() {\n    var counter = 0;\n    return counter += 1;\n}\n\nconsole.log(add());\nconsole.log(add());\nconsole.log(add());\n// 本意是想输出 3, 但事与愿违，输出的都是 1 \n```\n\n因为每次调用 add() 函数，计数器都会被重置为 0，输出的都是 1，这并不是我们想要的结果。闭包正好可以解决这个问题，我们在 add() 函数内部，再定义一个 plus() 内嵌函数（闭包），内嵌函数 plus() 可以访问父函数的 counter 变量。代码如下：\n\n``javascript\nfunction add() {\n    var counter = 0;\n    var plus = function() {counter += 1;}\n    plus();\n    return counter; \n}\n```\n\n接下来，只要我们能在外部访问 plus() 函数，并且确保 counter = 0 只执行一次，就能解决计数器的困境。代码如下：\n\n```javascript\nvar add = function() {\n    var counter = 0;\n    var plus = function() {return counter += 1;}\n    return plus;\n}\n\nvar puls2 = add();\nconsole.log(puls2());\nconsole.log(puls2());\nconsole.log(puls2());\n// 计数器为 3\n```\n计数器 counter 受 add() 函数的作用域保护，只能通过 puls2 方法修改。\n这里当时想了好久都没明白过来，一直理解为执行puls2()就是调用了add()这个方法，然后一直重复执行var counter = 0\n结果是我忽略了add()方法里面的 return plus\n那么后面每次调用plus2()实际上是执行了的plus这个方法，并非一直执行的add()\n\n#### 使用闭包的注意点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除或设置为 null，断开变量和内存的联系。\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\nJavaScript 闭包是一种强大的语言特性。通过使用这个语言特性来隐藏变量，可以避免覆盖其他地方使用的同名变量，理解闭包有助于编写出更有效也更简洁的代码。\n\n### <code>this</code> 关键字\n\n谈到作用域和闭包就不得不说 this 关键字，虽然它们之间关联不大，但是它们一起使用却容易让人产生疑惑。下面列出了使用 this 的大部分场景，带大家一探究竟。\n\nthis 是 JavaScript 的关键字，指函数执行时的上下文，跟函数定义时的上下文无关。随着函数使用场合的不同，this 的值会发生变化。但是有一个总的原则，那就是 this 指代的是调用函数的那个对象。\n\n#### 全局上下文\n\n在全局上下文中，也就是在任何函数体外部，this 指代全局对象。\n\n```javascript\n// 在浏览器中，this 指代全局对象 window\nconsole.log(this === window);  // true\n```\n\n#### 函数上下文\n\n在函数上下文中，也就是在任何函数体内部，this 指代调用函数的那个对象。\n\n#### 函数调用中的 this\n```javascript\nfunction f1(){\n    return this;\n}\n\nconsole.log(f1() === window); // true\n```\n\n如上代码所示，直接定义一个函数 f1()，相当于为 window 对象定义了一个属性。直接执行函数 f1()，相当于执行 window.f1()。所以函数 f1() 中的 this 指代调用函数的那个对象，也就是 window 对象。\n```javascript\nfunction f2(){\n    \"use strict\"; // 这里是严格模式\n    return this;\n}\n\nconsole.log(f2() === undefined); // true\n```\n\n#### 对象方法中的 this\n```javascript\nvar o = {\n    name: \"stone\",\n    f: function() {\n        return this.name;\n    }\n};\n\nconsole.log(o.f()); // \"stone\"\n```\n如上代码所示，对象 o 中包含一个属性 name 和一个方法 f()。当我们执行 o.f() 时，方法 f() 中的 this 指代调用函数的那个对象，也就是对象 o，所以 this.name 也就是 o.name。\n\n注意，在何处定义函数完全不会影响到 this 的行为，我们也可以首先定义函数，然后再将其附属到 o.f。这样做 this 的行为也一致。如下代码所示：\n```javascript\nvar fun = function() {\n    return this.name;\n};\n\nvar o = { name: \"stone\" };\no.f = fun;\n\nconsole.log(o.f()); // \"stone\"\n```\n类似的，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法 g() 当作对象 o.b 的函数调用。在这次执行期间，函数中的 this 将指向 o.b。事实上，这与对象本身的成员没有多大关系，最靠近的引用才是最重要的。\n```javascript\no.b = {\n    name: \"sophie\",\n    g: fun\n};\n\nconsole.log(o.b.g()); // \"sophie\"\n```\n\n#### eval() 方法中的 this\neval() 方法可以将字符串转换为 JavaScript 代码，使用 eval() 方法时，this 指向哪里呢？答案很简单，看谁在调用 eval() 方法，调用者的执行环境中的 this 就被 eval() 方法继承下来了。如下代码所示：\n\n```javascript\n// 全局上下文\nfunction f1(){\n    return eval(\"this\");\n}\nconsole.log(f1() === window); // true\n\n// 函数上下文\nvar o = {\n    name: \"stone\",\n    f: function() {\n        return eval(\"this.name\");\n    }\n};\nconsole.log(o.f()); // \"stone\"\n```\n\n#### call() 和 apply() 方法中的 this\ncall() 和 apply() 是函数对象的方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this 指代的就是这两个方法的第一个参数。\n更多apply()知识点见 <a href=\"http://www.xqiao.cc/conding/JavaScript/20160628/apply%20call%20bind.html\">apply call bind使用详解</a> 篇 \n```javascript\nvar x = 0;　　\nfunction f() {　　　　\n    console.log(this.x);　　\n}　　\nvar o = {};　　\no.x = 1;\no.m = f;　　\no.m.apply(); // 0\n```\n\ncall() 和 apply() 的参数为空时，默认调用全局对象。因此，这时的运行结果为 0，证明 this 指的是全局对象。如果把最后一行代码修改为：\n```javascript\no.m.apply(o); // 1\n```\n运行结果就变成了 1，证明了这时 this 指代的是对象 o\n\n#### bind() 方法中的 this\nECMAScript 5 引入了 Function.prototype.bind。调用 f.bind(someObject) 会创建一个与 f 具有相同函数体和作用域的函数，但是在这个新函数中，this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。如下代码所示：\n\n```javascript\nfunction f() {\n    return this.a;\n}\n\nvar g = f.bind({\n    a: \"stone\"\n});\nconsole.log(g()); // stone\n\nvar o = {\n    a: 28,\n    f: f,\n    g: g\n};\nconsole.log(o.f(), o.g()); // 28, stone\n```\n\n#### DOM 事件处理函数中的 this\n一般来讲，当函数使用 <code>addEventListener</code> 被用作事件处理函数时，它的 this 指向触发事件的元素。如下代码所示：\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <button id=\"btn\" type=\"button\">click</button>\n    <script>\n        var btn = document.getElementById(\"btn\");\n        btn.addEventListener(\"click\", function(){\n            this.style.backgroundColor = \"#A5D9F3\";\n        }, false);\n    </script>\n</body>\n</html>\n```\n\n但在 IE 浏览器中，当函数使用 <code>attachEvent</code> ，被用作事件处理函数时，它的 this 却指向 window。如下代码所示：\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <button id=\"btn\" type=\"button\">click</button>\n    <script>\n        var btn = document.getElementById(\"btn\");\n        btn.attachEvent(\"onclick\", function(){\n            console.log(this === window);  // true\n        });\n    </script>\n</body>\n</html>\n```\n\n#### 内联事件处理函数中的 this\n当代码被内联处理函数调用时，它的 this 指向监听器所在的 DOM 元素。如下代码所示：\n```html\n<button onclick=\"alert(this.tagName.toLowerCase());\">\n  Show this\n</button>\n```\n上面的 alert 会显示 button，注意只有外层代码中的 this 是这样设置的。如果 this 被包含在匿名函数中，则又是另外一种情况了。如下代码所示：\n\n```javascript\n<button onclick=\"alert((function(){return this})());\">\n  Show inner this\n</button>\n```\n\n在这种情况下，this 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。\n\n### 关卡\n仔细想想，下面代码块会输出什么结果呢？\n```javascript\n// 挑战一\nfunction func1() {\n    function func2() {\n        console.log(this)\n    }\n    return func2;\n}\nfunc1()();  // ???\n```\n\n```javascript\n// 挑战二\nscope = \"stone\";\n\nfunction Func() {\n    var scope = \"sophie\";\n\n    function inner() {\n        console.log(scope);\n    }\n    return inner;\n}\n\nvar ret = Func();\nret();    // ???\n```\n\n```javascript\n// 挑战三\nscope = \"stone\";\n\nfunction Func() {\n    var scope = \"sophie\";\n\n    function inner() {\n        console.log(scope);\n    }\n    scope = \"tommy\";\n    return inner;\n}\n\nvar ret = Func();\nret();    // ???\n```\n```javascript\n// 挑战四\nscope = \"stone\";\n\nfunction Bar() {\n    console.log(scope);\n}\n\nfunction Func() {\n    var scope = \"sophie\";\n    return Bar;\n}\n\nvar ret = Func();\nret();    // ???\n```\n\n```javascript\n// 挑战五\nvar name = \"The Window\";　　\nvar object = {　　　　\n    name: \"My Object\",\n    getNameFunc: function() {　　　　　　\n        return function() {　　　　　　　　\n            return this.name;　　　　　　\n        };　　　　\n    }　　\n};　　\nconsole.log(object.getNameFunc()());    // ???\n//提示： getNameFunc里面有一个匿名函数\nthis 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。\n```\n\n```javascript\n// 挑战六\nvar name = \"The Window\";　　\nvar object = {　　　　\n    name: \"My Object\",\n    getNameFunc: function() {　　　　　　\n        var that = this;　　　　　　\n        return function() {　　　　　　　　\n            return that.name;　　　　　　\n        };　　　　\n    }　　\n};　　\nconsole.log(object.getNameFunc()());    // ???\n```","source":"_posts/JS作用域和闭包.md","raw":"---\ntitle: JS作用域和闭包\ndate: 2017-02-18 23:18:13\ncategories: \n  - 技术\n  - JavaScript\ntags: [作用域, 闭包]\n---\n\n作用域和闭包是 JavaScript 最重要的概念之一，想要进一步学习 JavaScript，就必须理解 JavaScript 作用域和闭包的工作原理。\n<!-- more -->\n\n#### 作用域\n\n任何程序设计语言都有作用域的概念，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在 JavaScript 中，变量的作用域有全局作用域和局部作用域两种。\n\n全局作用域（Global Scope）\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下三种情形拥有全局作用域：\n\n1.最外层函数和在最外层函数外面定义的变量拥有全局作用域，例如：\n```javascript\nvar global = \"global\";     // 显式声明一个全局变量\nfunction checkscope() {\n    var local = \"local\";   // 显式声明一个局部变量\n    return global;         // 返回全局变量的值\n}\nconsole.log(global);       // \"global\"\nconsole.log(checkscope()); // \"global\"\nconsole.log(local);        // error: local is not defined.\n```\n上面代码中，global 是全局变量，不管是在 checkscope() 函数内部还是外部，都能访问到全局变量 global。\n\n2.所有末定义直接赋值的变量自动声明为拥有全局作用域，例如\n```javascript\nfunction checkscope() {\n    var local = \"local\"; // 显式声明一个局部变量\n    global = \"global\";   // 隐式声明一个全局变量(不好的写法)\n}\nconsole.log(global);     // \"global\"\nconsole.log(local);      // error: local is not defined.\n```\n上面代码中，变量 global 未用 var 关键字定义就直接赋值，所以隐式的创建了全局变量 global，但这种写法容易造成误解，应尽量避免这种写法。\n\n3.所有 window 对象的属性拥有全局作用域\n\n一般情况下，window 对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等等。\n\n局部作用域（Local Scope）\n\n和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。最常见的是在函数体内定义的变量，只能在函数体内使用。例如：\n```javascript\nfunction checkscope() {\n    var local = \"local\";   // 显式声明一个局部变量\n    return local;         // 返回全局变量的值\n}\nconsole.log(checkscope()); // \"local\"\nconsole.log(local);        // error: local is not defined.\n```\n上面代码中，在函数体内定义了变量 local，在函数体内是可以访问了，在函数外访问就报错了。\n\n全局和局部作用域的关系\n\n在函数体内，局部变量的优先级高于同名的全局变量。如果在函数内声明的一个局部变量或者函数参数中带有的变量和全局变量重名，那么全局变量就被局部变量所遮盖。\n```javascript\nvar scope = \"global\";      // 声明一个全局变量\nfunction checkscope() {\n    var scope = \"local\";   // 声明一个同名的局部变量\n    return scope;          // 返回局部变量的值，而不是全局变量的值\n}\nconsole.log(checkscope()); // \"local\"\n尽管在全局作用域编写代码时可以不写 var 语句，但声明局部变量时则必须使用 var 语句。思考一下如果不这样做会怎样：\n\nscope = \"global\";           // 声明一个全局变量，甚至不用 var 来声明\nfunction checkscope2() {\n    scope = \"local\";        // 糟糕！我们刚修改了全局变量\n    myscope = \"local\";      // 这里显式地声明了一个新的全局变量\n    return [scope, myscope];// 返回两个值\n}\nconsole.log(checkscope2()); // [\"local\", \"local\"]，产生了副作用\nconsole.log(scope);         // \"local\"，全局变量修改了\nconsole.log(myscope);       // \"local\"，全局命名空间搞乱了\n```\n函数定义是可以嵌套的。由于每个函数都有它自己的作用域，因此会出现几个局部作用域嵌套的情况，例如：\njavascript```\nvar scope = \"global scope\";         // 全局变量\nfunction checkscope() {\n    var scope = \"local scope\";      //局部变量 \n    function nested() {\n        var scope = \"nested scope\"; // 嵌套作用域内的局部变量\n        return scope;               // 返回当前作用域内的值\n    }\n    return nested();\n}\nconsole.log(checkscope());          // \"nested scope\"\n```\n函数作用域和声明提前\n\n在一些类似 C 语言的编程语言中，花括号内的每一段代码都具有各自的作用域，而且变量在声明它们的代码段之外是不可见的，我们称为块级作用域（block scope），而 JavaScript 中没有块级作用域。JavaScript 取而代之地使用了函数作用域（function scope），变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。\n\n在如下所示的代码中，在不同位置定义了变量 i、j 和 k，它们都在同一个作用域内，这三个变量在函数体内均是有定义的。\n```javascrtip\nfunction test(o) {\n    var i = 0; // i在整个函数体内均是有定义的\n    if (typeof o == \"object\") {\n        var j = 0; // j在函数体内是有定义的，不仅仅是在这个代码段内\n        for (var k = 0; k < 10; k++) { // k在函数体内是有定义的，不仅仅是在循环内\n            console.log(k); // 输出数字0~9\n        }\n        console.log(k); // k已经定义了，输出10\n    }\n    console.log(j); // j已经定义了，但可能没有初始化\n}\n```\n\nJavaScript 的函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript 的这个特性被非正式地称为声明提前（hoisting），即 JavaScript 函数里声明的所有变量（但不涉及赋值）都被「提前」至函数体的顶部，看一下如下代码：\n```javascript\nvar scope = \"global\";\nfunction f() {\n    console.log(scope);  // 输出\"undefined\"，而不是\"global\"\n    var scope = \"local\"; // 变量在这里赋初始值，但变量本身在函数体内任何地方均是有定义的\n    console.log(scope);  // 输出\"local\"\n}\n```\n\n你可能会误以为函数中的第一行会输出 \"global\"，因为代码还没有执行到 var 语句声明局部变量的地方。其实不然，由于函数作用域的特性，局部变量在整个函数体始终是有定义的，也就是说，在函数体内局部变量遮盖了同名全局变量。尽管如此，只有在程序执行到 var 语句的时候，局部变量才会被真正赋值。因此，上述过程等价于：将函数内的变量声明“提前”至函数体顶部，同时变量初始化留在原来的位置：\n\n```javascript\nfunction f() {\n    var scope;          // 在函数顶部声明了局部变量\n    console.log(scope); // 变量存在，但其值是\"undefined\"\n    scope = \"local\";    // 这里将其初始化并赋值\n    console.log(scope); // 这里它具有了我们所期望的值\n}\n```\n在具有块级作用域的编程语言中，在狭小的作用域里让变量声明和使用变量的代码尽可能靠近彼此，通常来讲，这是一个非常不错的编程习惯。由于 JavaScript 没有块级作用域，因此一些程序员特意将变量声明放在函数体顶部，而不是将声明靠近放在使用变量之处。这种做法使得他们的源代码非常清晰地反映了真实的变量作用域。\n\n#### 作用域链\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n\n标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。\n\n请看下面的示例代码：\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n    if (color === \"blue\"){\n        color = \"red\";\n    } else {\n        color = \"blue\";\n    }\n}\n\nconsole.log(changeColor());\n```\n\n在这个简单的例子中，函数 changeColor() 的作用域链包含两个对象：它自己的变量对象（其中定义着 arguments 对象）和全局环境的变量对象。可以在函数内部访问变量 color，就是因为可以在这个作用域链中找到它。\n\n此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面这个例子所示：\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n    var anotherColor = \"red\";\n\n    function swapColors(){\n        var tempColor = anotherColor;\n        anotherColor = color;\n        color = tempColor;\n\n        // 这里可以访问color、anotherColor和tempColor\n    }\n\n    // 这里可以访问color和anotherColor，但不能访问tempColor\n    swapColors();\n}\n```\n// 这里只能访问color\nchangeColor();\n以上代码共涉及3个执行环境：全局环境、changeColor() 的局部环境和 swapColors() 的局部环境。全局环境中有一个变量 color 和一个函数 changeColor()。changeColor() 的局部环境中有一个名为 anotherColor 的变量和一个名为 swapColors() 的函数，但它也可以访问全局环境中的变量 color。swapColors() 的局部环境中有一个变量 tempColor，该变量只能在这个环境中访问到。无论全局环境还是 changeColor() 的局部环境都无权访问 tempColor。然而，在 swapColors() 内部则可以访问其他两个环境中的所有变量，因为那两个环境是它的父执行环境。下图形象地展示了前面这个例子的作用域链。\n![](/css/images/scope.jpg)\n\n### 闭包\n\nMDN 对闭包的定义：\n\n闭包是指那些能够访问独立（自由）变量的函数（变量在本地使用，但定义在一个封闭的作用域中）。换句话说，这些函数可以「记忆」它被创建时候的环境。\n《JavaScript 权威指南(第6版)》对闭包的定义：\n\n函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为闭包。\n\n《JavaScript 高级程序设计(第3版)》对闭包的定义：\n\n闭包是指有权访问另一个函数作用域中的变量的函数。\n\n上面这些定义都比较晦涩难懂，阮一峰的解释稍微好理解一些：\n\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成定义在一个函数内部的函数。\n\n#### 闭包的用途\n\n闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量（作用域链），另一个就是让这些变量的值始终保持在内存中。怎么来理解这句话呢？请看下面的代码。\n```javascript\nfunction fun() {　　　\n    var n = 1;\n\n    add = function() {\n        n += 1\n    }\n\n    function fun2(){\n        console.log(n);\n    }\n\n    return fun2;\n}\n\nvar result = fun();　　\nresult(); // 1\nadd();\nresult(); // 2\n```\n\n在这段代码中，result 实际上就是函数 fun2。它一共运行了两次，第一次的值是 1，第二次的值是 2。这证明了，函数 fun 中的局部变量 n 一直保存在内存中，并没有在 fun 调用后被自动清除。\n\n为什么会这样呢？原因就在于 fun 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun，因此 fun 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。\n\n这段代码中另一个值得注意的地方，就是 add = function() { n += 1 } 这一行。首先，变量 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，和 fun2 处于同一作用域，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。\n\n#### 计数器的困境\n\n我们再来看一个经典例子「计数器的困境」，假设你想统计一些数值，且该计数器在所有函数中都是可用的。你可以定义一个全局变量 counter 当做计数器，再定义一个 add() 函数来设置计数器递增。代码如下：\n```javascript\nvar counter = 0;\nfunction add() {\n    return counter += 1;\n}\n\nconsole.log(add());\nconsole.log(add());\nconsole.log(add());\n// 计数器现在为 3\n```\n\n计数器数值在执行 add() 函数时发生变化。但问题来了，页面上的任何脚本都能改变计数器 counter，即便没有调用 add() 函数。如果我们将计数器 counter 定义在 add() 函数内部，就不会被外部脚本随意修改到计数器的值了。代码如下：\n```javascript\nfunction add() {\n    var counter = 0;\n    return counter += 1;\n}\n\nconsole.log(add());\nconsole.log(add());\nconsole.log(add());\n// 本意是想输出 3, 但事与愿违，输出的都是 1 \n```\n\n因为每次调用 add() 函数，计数器都会被重置为 0，输出的都是 1，这并不是我们想要的结果。闭包正好可以解决这个问题，我们在 add() 函数内部，再定义一个 plus() 内嵌函数（闭包），内嵌函数 plus() 可以访问父函数的 counter 变量。代码如下：\n\n``javascript\nfunction add() {\n    var counter = 0;\n    var plus = function() {counter += 1;}\n    plus();\n    return counter; \n}\n```\n\n接下来，只要我们能在外部访问 plus() 函数，并且确保 counter = 0 只执行一次，就能解决计数器的困境。代码如下：\n\n```javascript\nvar add = function() {\n    var counter = 0;\n    var plus = function() {return counter += 1;}\n    return plus;\n}\n\nvar puls2 = add();\nconsole.log(puls2());\nconsole.log(puls2());\nconsole.log(puls2());\n// 计数器为 3\n```\n计数器 counter 受 add() 函数的作用域保护，只能通过 puls2 方法修改。\n这里当时想了好久都没明白过来，一直理解为执行puls2()就是调用了add()这个方法，然后一直重复执行var counter = 0\n结果是我忽略了add()方法里面的 return plus\n那么后面每次调用plus2()实际上是执行了的plus这个方法，并非一直执行的add()\n\n#### 使用闭包的注意点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除或设置为 null，断开变量和内存的联系。\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\nJavaScript 闭包是一种强大的语言特性。通过使用这个语言特性来隐藏变量，可以避免覆盖其他地方使用的同名变量，理解闭包有助于编写出更有效也更简洁的代码。\n\n### <code>this</code> 关键字\n\n谈到作用域和闭包就不得不说 this 关键字，虽然它们之间关联不大，但是它们一起使用却容易让人产生疑惑。下面列出了使用 this 的大部分场景，带大家一探究竟。\n\nthis 是 JavaScript 的关键字，指函数执行时的上下文，跟函数定义时的上下文无关。随着函数使用场合的不同，this 的值会发生变化。但是有一个总的原则，那就是 this 指代的是调用函数的那个对象。\n\n#### 全局上下文\n\n在全局上下文中，也就是在任何函数体外部，this 指代全局对象。\n\n```javascript\n// 在浏览器中，this 指代全局对象 window\nconsole.log(this === window);  // true\n```\n\n#### 函数上下文\n\n在函数上下文中，也就是在任何函数体内部，this 指代调用函数的那个对象。\n\n#### 函数调用中的 this\n```javascript\nfunction f1(){\n    return this;\n}\n\nconsole.log(f1() === window); // true\n```\n\n如上代码所示，直接定义一个函数 f1()，相当于为 window 对象定义了一个属性。直接执行函数 f1()，相当于执行 window.f1()。所以函数 f1() 中的 this 指代调用函数的那个对象，也就是 window 对象。\n```javascript\nfunction f2(){\n    \"use strict\"; // 这里是严格模式\n    return this;\n}\n\nconsole.log(f2() === undefined); // true\n```\n\n#### 对象方法中的 this\n```javascript\nvar o = {\n    name: \"stone\",\n    f: function() {\n        return this.name;\n    }\n};\n\nconsole.log(o.f()); // \"stone\"\n```\n如上代码所示，对象 o 中包含一个属性 name 和一个方法 f()。当我们执行 o.f() 时，方法 f() 中的 this 指代调用函数的那个对象，也就是对象 o，所以 this.name 也就是 o.name。\n\n注意，在何处定义函数完全不会影响到 this 的行为，我们也可以首先定义函数，然后再将其附属到 o.f。这样做 this 的行为也一致。如下代码所示：\n```javascript\nvar fun = function() {\n    return this.name;\n};\n\nvar o = { name: \"stone\" };\no.f = fun;\n\nconsole.log(o.f()); // \"stone\"\n```\n类似的，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法 g() 当作对象 o.b 的函数调用。在这次执行期间，函数中的 this 将指向 o.b。事实上，这与对象本身的成员没有多大关系，最靠近的引用才是最重要的。\n```javascript\no.b = {\n    name: \"sophie\",\n    g: fun\n};\n\nconsole.log(o.b.g()); // \"sophie\"\n```\n\n#### eval() 方法中的 this\neval() 方法可以将字符串转换为 JavaScript 代码，使用 eval() 方法时，this 指向哪里呢？答案很简单，看谁在调用 eval() 方法，调用者的执行环境中的 this 就被 eval() 方法继承下来了。如下代码所示：\n\n```javascript\n// 全局上下文\nfunction f1(){\n    return eval(\"this\");\n}\nconsole.log(f1() === window); // true\n\n// 函数上下文\nvar o = {\n    name: \"stone\",\n    f: function() {\n        return eval(\"this.name\");\n    }\n};\nconsole.log(o.f()); // \"stone\"\n```\n\n#### call() 和 apply() 方法中的 this\ncall() 和 apply() 是函数对象的方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this 指代的就是这两个方法的第一个参数。\n更多apply()知识点见 <a href=\"http://www.xqiao.cc/conding/JavaScript/20160628/apply%20call%20bind.html\">apply call bind使用详解</a> 篇 \n```javascript\nvar x = 0;　　\nfunction f() {　　　　\n    console.log(this.x);　　\n}　　\nvar o = {};　　\no.x = 1;\no.m = f;　　\no.m.apply(); // 0\n```\n\ncall() 和 apply() 的参数为空时，默认调用全局对象。因此，这时的运行结果为 0，证明 this 指的是全局对象。如果把最后一行代码修改为：\n```javascript\no.m.apply(o); // 1\n```\n运行结果就变成了 1，证明了这时 this 指代的是对象 o\n\n#### bind() 方法中的 this\nECMAScript 5 引入了 Function.prototype.bind。调用 f.bind(someObject) 会创建一个与 f 具有相同函数体和作用域的函数，但是在这个新函数中，this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。如下代码所示：\n\n```javascript\nfunction f() {\n    return this.a;\n}\n\nvar g = f.bind({\n    a: \"stone\"\n});\nconsole.log(g()); // stone\n\nvar o = {\n    a: 28,\n    f: f,\n    g: g\n};\nconsole.log(o.f(), o.g()); // 28, stone\n```\n\n#### DOM 事件处理函数中的 this\n一般来讲，当函数使用 <code>addEventListener</code> 被用作事件处理函数时，它的 this 指向触发事件的元素。如下代码所示：\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <button id=\"btn\" type=\"button\">click</button>\n    <script>\n        var btn = document.getElementById(\"btn\");\n        btn.addEventListener(\"click\", function(){\n            this.style.backgroundColor = \"#A5D9F3\";\n        }, false);\n    </script>\n</body>\n</html>\n```\n\n但在 IE 浏览器中，当函数使用 <code>attachEvent</code> ，被用作事件处理函数时，它的 this 却指向 window。如下代码所示：\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <button id=\"btn\" type=\"button\">click</button>\n    <script>\n        var btn = document.getElementById(\"btn\");\n        btn.attachEvent(\"onclick\", function(){\n            console.log(this === window);  // true\n        });\n    </script>\n</body>\n</html>\n```\n\n#### 内联事件处理函数中的 this\n当代码被内联处理函数调用时，它的 this 指向监听器所在的 DOM 元素。如下代码所示：\n```html\n<button onclick=\"alert(this.tagName.toLowerCase());\">\n  Show this\n</button>\n```\n上面的 alert 会显示 button，注意只有外层代码中的 this 是这样设置的。如果 this 被包含在匿名函数中，则又是另外一种情况了。如下代码所示：\n\n```javascript\n<button onclick=\"alert((function(){return this})());\">\n  Show inner this\n</button>\n```\n\n在这种情况下，this 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。\n\n### 关卡\n仔细想想，下面代码块会输出什么结果呢？\n```javascript\n// 挑战一\nfunction func1() {\n    function func2() {\n        console.log(this)\n    }\n    return func2;\n}\nfunc1()();  // ???\n```\n\n```javascript\n// 挑战二\nscope = \"stone\";\n\nfunction Func() {\n    var scope = \"sophie\";\n\n    function inner() {\n        console.log(scope);\n    }\n    return inner;\n}\n\nvar ret = Func();\nret();    // ???\n```\n\n```javascript\n// 挑战三\nscope = \"stone\";\n\nfunction Func() {\n    var scope = \"sophie\";\n\n    function inner() {\n        console.log(scope);\n    }\n    scope = \"tommy\";\n    return inner;\n}\n\nvar ret = Func();\nret();    // ???\n```\n```javascript\n// 挑战四\nscope = \"stone\";\n\nfunction Bar() {\n    console.log(scope);\n}\n\nfunction Func() {\n    var scope = \"sophie\";\n    return Bar;\n}\n\nvar ret = Func();\nret();    // ???\n```\n\n```javascript\n// 挑战五\nvar name = \"The Window\";　　\nvar object = {　　　　\n    name: \"My Object\",\n    getNameFunc: function() {　　　　　　\n        return function() {　　　　　　　　\n            return this.name;　　　　　　\n        };　　　　\n    }　　\n};　　\nconsole.log(object.getNameFunc()());    // ???\n//提示： getNameFunc里面有一个匿名函数\nthis 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。\n```\n\n```javascript\n// 挑战六\nvar name = \"The Window\";　　\nvar object = {　　　　\n    name: \"My Object\",\n    getNameFunc: function() {　　　　　　\n        var that = this;　　　　　　\n        return function() {　　　　　　　　\n            return that.name;　　　　　　\n        };　　　　\n    }　　\n};　　\nconsole.log(object.getNameFunc()());    // ???\n```","slug":"JS作用域和闭包","published":1,"updated":"2017-02-19T09:41:58.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn6y002824uualwv1lef","content":"<p>作用域和闭包是 JavaScript 最重要的概念之一，想要进一步学习 JavaScript，就必须理解 JavaScript 作用域和闭包的工作原理。<br><a id=\"more\"></a></p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>任何程序设计语言都有作用域的概念，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在 JavaScript 中，变量的作用域有全局作用域和局部作用域两种。</p>\n<p>全局作用域（Global Scope）</p>\n<p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下三种情形拥有全局作用域：</p>\n<p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">\"global\"</span>;     <span class=\"comment\">// 显式声明一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> global;         <span class=\"comment\">// 返回全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(global);       <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);        <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，global 是全局变量，不管是在 checkscope() 函数内部还是外部，都能访问到全局变量 global。</p>\n<p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域，例如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>; <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    global = <span class=\"string\">\"global\"</span>;   <span class=\"comment\">// 隐式声明一个全局变量(不好的写法)</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(global);     <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);      <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，变量 global 未用 var 关键字定义就直接赋值，所以隐式的创建了全局变量 global，但这种写法容易造成误解，应尽量避免这种写法。</p>\n<p>3.所有 window 对象的属性拥有全局作用域</p>\n<p>一般情况下，window 对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等等。</p>\n<p>局部作用域（Local Scope）</p>\n<p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。最常见的是在函数体内定义的变量，只能在函数体内使用。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> local;         <span class=\"comment\">// 返回全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"local\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);        <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，在函数体内定义了变量 local，在函数体内是可以访问了，在函数外访问就报错了。</p>\n<p>全局和局部作用域的关系</p>\n<p>在函数体内，局部变量的优先级高于同名的全局变量。如果在函数内声明的一个局部变量或者函数参数中带有的变量和全局变量重名，那么全局变量就被局部变量所遮盖。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global\"</span>;      <span class=\"comment\">// 声明一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 声明一个同名的局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> scope;          <span class=\"comment\">// 返回局部变量的值，而不是全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"local\"</span></div><div class=\"line\">尽管在全局作用域编写代码时可以不写 <span class=\"keyword\">var</span> 语句，但声明局部变量时则必须使用 <span class=\"keyword\">var</span> 语句。思考一下如果不这样做会怎样：</div><div class=\"line\"></div><div class=\"line\">scope = <span class=\"string\">\"global\"</span>;           <span class=\"comment\">// 声明一个全局变量，甚至不用 var 来声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    scope = <span class=\"string\">\"local\"</span>;        <span class=\"comment\">// 糟糕！我们刚修改了全局变量</span></div><div class=\"line\">    myscope = <span class=\"string\">\"local\"</span>;      <span class=\"comment\">// 这里显式地声明了一个新的全局变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [scope, myscope];<span class=\"comment\">// 返回两个值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope2()); <span class=\"comment\">// [\"local\", \"local\"]，产生了副作用</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(scope);         <span class=\"comment\">// \"local\"，全局变量修改了</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myscope);       <span class=\"comment\">// \"local\"，全局命名空间搞乱了</span></div></pre></td></tr></table></figure></p>\n<p>函数定义是可以嵌套的。由于每个函数都有它自己的作用域，因此会出现几个局部作用域嵌套的情况，例如：<br>javascript<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var scope = &quot;global scope&quot;;         // 全局变量</div><div class=\"line\">function checkscope() &#123;</div><div class=\"line\">    var scope = &quot;local scope&quot;;      //局部变量 </div><div class=\"line\">    function nested() &#123;</div><div class=\"line\">        var scope = &quot;nested scope&quot;; // 嵌套作用域内的局部变量</div><div class=\"line\">        return scope;               // 返回当前作用域内的值</div><div class=\"line\">    &#125;</div><div class=\"line\">    return nested();</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(checkscope());          // &quot;nested scope&quot;</div></pre></td></tr></table></figure></p>\n<p>函数作用域和声明提前</p>\n<p>在一些类似 C 语言的编程语言中，花括号内的每一段代码都具有各自的作用域，而且变量在声明它们的代码段之外是不可见的，我们称为块级作用域（block scope），而 JavaScript 中没有块级作用域。JavaScript 取而代之地使用了函数作用域（function scope），变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p>\n<p>在如下所示的代码中，在不同位置定义了变量 i、j 和 k，它们都在同一个作用域内，这三个变量在函数体内均是有定义的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(o) &#123;</div><div class=\"line\">    var i = 0; // i在整个函数体内均是有定义的</div><div class=\"line\">    if (typeof o == &quot;object&quot;) &#123;</div><div class=\"line\">        var j = 0; // j在函数体内是有定义的，不仅仅是在这个代码段内</div><div class=\"line\">        for (var k = 0; k &lt; 10; k++) &#123; // k在函数体内是有定义的，不仅仅是在循环内</div><div class=\"line\">            console.log(k); // 输出数字0~9</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(k); // k已经定义了，输出10</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(j); // j已经定义了，但可能没有初始化</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>JavaScript 的函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript 的这个特性被非正式地称为声明提前（hoisting），即 JavaScript 函数里声明的所有变量（但不涉及赋值）都被「提前」至函数体的顶部，看一下如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);  <span class=\"comment\">// 输出\"undefined\"，而不是\"global\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local\"</span>; <span class=\"comment\">// 变量在这里赋初始值，但变量本身在函数体内任何地方均是有定义的</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);  <span class=\"comment\">// 输出\"local\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可能会误以为函数中的第一行会输出 “global”，因为代码还没有执行到 var 语句声明局部变量的地方。其实不然，由于函数作用域的特性，局部变量在整个函数体始终是有定义的，也就是说，在函数体内局部变量遮盖了同名全局变量。尽管如此，只有在程序执行到 var 语句的时候，局部变量才会被真正赋值。因此，上述过程等价于：将函数内的变量声明“提前”至函数体顶部，同时变量初始化留在原来的位置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope;          <span class=\"comment\">// 在函数顶部声明了局部变量</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope); <span class=\"comment\">// 变量存在，但其值是\"undefined\"</span></div><div class=\"line\">    scope = <span class=\"string\">\"local\"</span>;    <span class=\"comment\">// 这里将其初始化并赋值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope); <span class=\"comment\">// 这里它具有了我们所期望的值</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在具有块级作用域的编程语言中，在狭小的作用域里让变量声明和使用变量的代码尽可能靠近彼此，通常来讲，这是一个非常不错的编程习惯。由于 JavaScript 没有块级作用域，因此一些程序员特意将变量声明放在函数体顶部，而不是将声明靠近放在使用变量之处。这种做法使得他们的源代码非常清晰地反映了真实的变量作用域。</p>\n<h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>\n<p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p>\n<p>请看下面的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (color === <span class=\"string\">\"blue\"</span>)&#123;</div><div class=\"line\">        color = <span class=\"string\">\"red\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(changeColor());</div></pre></td></tr></table></figure>\n<p>在这个简单的例子中，函数 changeColor() 的作用域链包含两个对象：它自己的变量对象（其中定义着 arguments 对象）和全局环境的变量对象。可以在函数内部访问变量 color，就是因为可以在这个作用域链中找到它。</p>\n<p>此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面这个例子所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tempColor = anotherColor;</div><div class=\"line\">        anotherColor = color;</div><div class=\"line\">        color = tempColor;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 这里可以访问color、anotherColor和tempColor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里可以访问color和anotherColor，但不能访问tempColor</span></div><div class=\"line\">    swapColors();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>// 这里只能访问color<br>changeColor();<br>以上代码共涉及3个执行环境：全局环境、changeColor() 的局部环境和 swapColors() 的局部环境。全局环境中有一个变量 color 和一个函数 changeColor()。changeColor() 的局部环境中有一个名为 anotherColor 的变量和一个名为 swapColors() 的函数，但它也可以访问全局环境中的变量 color。swapColors() 的局部环境中有一个变量 tempColor，该变量只能在这个环境中访问到。无论全局环境还是 changeColor() 的局部环境都无权访问 tempColor。然而，在 swapColors() 内部则可以访问其他两个环境中的所有变量，因为那两个环境是它的父执行环境。下图形象地展示了前面这个例子的作用域链。<br><img src=\"/css/images/scope.jpg\" alt=\"\"></p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>MDN 对闭包的定义：</p>\n<p>闭包是指那些能够访问独立（自由）变量的函数（变量在本地使用，但定义在一个封闭的作用域中）。换句话说，这些函数可以「记忆」它被创建时候的环境。<br>《JavaScript 权威指南(第6版)》对闭包的定义：</p>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为闭包。</p>\n<p>《JavaScript 高级程序设计(第3版)》对闭包的定义：</p>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n<p>上面这些定义都比较晦涩难懂，阮一峰的解释稍微好理解一些：</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成定义在一个函数内部的函数。</p>\n<h4 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h4><p>闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量（作用域链），另一个就是让这些变量的值始终保持在内存中。怎么来理解这句话呢？请看下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;　　　</div><div class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        n += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> fun2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = fun();　　</div><div class=\"line\">result(); <span class=\"comment\">// 1</span></div><div class=\"line\">add();</div><div class=\"line\">result(); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>在这段代码中，result 实际上就是函数 fun2。它一共运行了两次，第一次的值是 1，第二次的值是 2。这证明了，函数 fun 中的局部变量 n 一直保存在内存中，并没有在 fun 调用后被自动清除。</p>\n<p>为什么会这样呢？原因就在于 fun 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun，因此 fun 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>\n<p>这段代码中另一个值得注意的地方，就是 add = function() { n += 1 } 这一行。首先，变量 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，和 fun2 处于同一作用域，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h4 id=\"计数器的困境\"><a href=\"#计数器的困境\" class=\"headerlink\" title=\"计数器的困境\"></a>计数器的困境</h4><p>我们再来看一个经典例子「计数器的困境」，假设你想统计一些数值，且该计数器在所有函数中都是可用的。你可以定义一个全局变量 counter 当做计数器，再定义一个 add() 函数来设置计数器递增。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> counter += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"comment\">// 计数器现在为 3</span></div></pre></td></tr></table></figure></p>\n<p>计数器数值在执行 add() 函数时发生变化。但问题来了，页面上的任何脚本都能改变计数器 counter，即便没有调用 add() 函数。如果我们将计数器 counter 定义在 add() 函数内部，就不会被外部脚本随意修改到计数器的值了。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> counter += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"comment\">// 本意是想输出 3, 但事与愿违，输出的都是 1</span></div></pre></td></tr></table></figure></p>\n<p>因为每次调用 add() 函数，计数器都会被重置为 0，输出的都是 1，这并不是我们想要的结果。闭包正好可以解决这个问题，我们在 add() 函数内部，再定义一个 plus() 内嵌函数（闭包），内嵌函数 plus() 可以访问父函数的 counter 变量。代码如下：</p>\n<p>``javascript<br>function add() {<br>    var counter = 0;<br>    var plus = function() {counter += 1;}<br>    plus();<br>    return counter;<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">接下来，只要我们能在外部访问 plus() 函数，并且确保 counter = 0 只执行一次，就能解决计数器的困境。代码如下：</div><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">var add = function() &#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    var plus = function() &#123;return counter += 1;&#125;</div><div class=\"line\">    return plus;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var puls2 = add();</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">// 计数器为 3</div></pre></td></tr></table></figure></p>\n<p>计数器 counter 受 add() 函数的作用域保护，只能通过 puls2 方法修改。<br>这里当时想了好久都没明白过来，一直理解为执行puls2()就是调用了add()这个方法，然后一直重复执行var counter = 0<br>结果是我忽略了add()方法里面的 return plus<br>那么后面每次调用plus2()实际上是执行了的plus这个方法，并非一直执行的add()</p>\n<h4 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h4><ul>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除或设置为 null，断开变量和内存的联系。</li>\n<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n<p>JavaScript 闭包是一种强大的语言特性。通过使用这个语言特性来隐藏变量，可以避免覆盖其他地方使用的同名变量，理解闭包有助于编写出更有效也更简洁的代码。</p>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字\"></a><code>this</code> 关键字</h3><p>谈到作用域和闭包就不得不说 this 关键字，虽然它们之间关联不大，但是它们一起使用却容易让人产生疑惑。下面列出了使用 this 的大部分场景，带大家一探究竟。</p>\n<p>this 是 JavaScript 的关键字，指函数执行时的上下文，跟函数定义时的上下文无关。随着函数使用场合的不同，this 的值会发生变化。但是有一个总的原则，那就是 this 指代的是调用函数的那个对象。</p>\n<h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局上下文中，也就是在任何函数体外部，this 指代全局对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在浏览器中，this 指代全局对象 window</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数上下文中，也就是在任何函数体内部，this 指代调用函数的那个对象。</p>\n<h4 id=\"函数调用中的-this\"><a href=\"#函数调用中的-this\" class=\"headerlink\" title=\"函数调用中的 this\"></a>函数调用中的 this</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f1() === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>如上代码所示，直接定义一个函数 f1()，相当于为 window 对象定义了一个属性。直接执行函数 f1()，相当于执行 window.f1()。所以函数 f1() 中的 this 指代调用函数的那个对象，也就是 window 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>; <span class=\"comment\">// 这里是严格模式</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f2() === <span class=\"literal\">undefined</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure>\n<p>如上代码所示，对象 o 中包含一个属性 name 和一个方法 f()。当我们执行 o.f() 时，方法 f() 中的 this 指代调用函数的那个对象，也就是对象 o，所以 this.name 也就是 o.name。</p>\n<p>注意，在何处定义函数完全不会影响到 this 的行为，我们也可以首先定义函数，然后再将其附属到 o.f。这样做 this 的行为也一致。如下代码所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span> &#125;;</div><div class=\"line\">o.f = fun;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure></p>\n<p>类似的，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法 g() 当作对象 o.b 的函数调用。在这次执行期间，函数中的 this 将指向 o.b。事实上，这与对象本身的成员没有多大关系，最靠近的引用才是最重要的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.b = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"sophie\"</span>,</div><div class=\"line\">    <span class=\"attr\">g</span>: fun</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.b.g()); <span class=\"comment\">// \"sophie\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"eval-方法中的-this\"><a href=\"#eval-方法中的-this\" class=\"headerlink\" title=\"eval() 方法中的 this\"></a>eval() 方法中的 this</h4><p>eval() 方法可以将字符串转换为 JavaScript 代码，使用 eval() 方法时，this 指向哪里呢？答案很简单，看谁在调用 eval() 方法，调用者的执行环境中的 this 就被 eval() 方法继承下来了。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局上下文</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">\"this\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(f1() === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数上下文</span></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">\"this.name\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"call-和-apply-方法中的-this\"><a href=\"#call-和-apply-方法中的-this\" class=\"headerlink\" title=\"call() 和 apply() 方法中的 this\"></a>call() 和 apply() 方法中的 this</h4><p>call() 和 apply() 是函数对象的方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this 指代的就是这两个方法的第一个参数。<br>更多apply()知识点见 <a href=\"http://www.xqiao.cc/conding/JavaScript/20160628/apply%20call%20bind.html\" target=\"_blank\" rel=\"external\">apply call bind使用详解</a> 篇<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;　　</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;　　　　</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);　　</div><div class=\"line\">&#125;　　</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;　　</div><div class=\"line\">o.x = <span class=\"number\">1</span>;</div><div class=\"line\">o.m = f;　　</div><div class=\"line\">o.m.apply(); <span class=\"comment\">// 0</span></div></pre></td></tr></table></figure></p>\n<p>call() 和 apply() 的参数为空时，默认调用全局对象。因此，这时的运行结果为 0，证明 this 指的是全局对象。如果把最后一行代码修改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.m.apply(o); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>运行结果就变成了 1，证明了这时 this 指代的是对象 o</p>\n<h4 id=\"bind-方法中的-this\"><a href=\"#bind-方法中的-this\" class=\"headerlink\" title=\"bind() 方法中的 this\"></a>bind() 方法中的 this</h4><p>ECMAScript 5 引入了 Function.prototype.bind。调用 f.bind(someObject) 会创建一个与 f 具有相同函数体和作用域的函数，但是在这个新函数中，this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = f.bind(&#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"stone\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(g()); <span class=\"comment\">// stone</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: f,</div><div class=\"line\">    <span class=\"attr\">g</span>: g</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f(), o.g()); <span class=\"comment\">// 28, stone</span></div></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理函数中的-this\"><a href=\"#DOM-事件处理函数中的-this\" class=\"headerlink\" title=\"DOM 事件处理函数中的 this\"></a>DOM 事件处理函数中的 this</h4><p>一般来讲，当函数使用 <code>addEventListener</code> 被用作事件处理函数时，它的 this 指向触发事件的元素。如下代码所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">        btn.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.style.backgroundColor = <span class=\"string\">\"#A5D9F3\"</span>;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但在 IE 浏览器中，当函数使用 <code>attachEvent</code> ，被用作事件处理函数时，它的 this 却指向 window。如下代码所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">        btn.attachEvent(<span class=\"string\">\"onclick\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"内联事件处理函数中的-this\"><a href=\"#内联事件处理函数中的-this\" class=\"headerlink\" title=\"内联事件处理函数中的 this\"></a>内联事件处理函数中的 this</h4><p>当代码被内联处理函数调用时，它的 this 指向监听器所在的 DOM 元素。如下代码所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert(this.tagName.toLowerCase());\"</span>&gt;</span></div><div class=\"line\">  Show this</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的 alert 会显示 button，注意只有外层代码中的 this 是这样设置的。如果 this 被包含在匿名函数中，则又是另外一种情况了。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button onclick=<span class=\"string\">\"alert((function()&#123;return this&#125;)());\"</span>&gt;</div><div class=\"line\">  Show inner <span class=\"keyword\">this</span></div><div class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></div></pre></td></tr></table></figure>\n<p>在这种情况下，this 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。</p>\n<h3 id=\"关卡\"><a href=\"#关卡\" class=\"headerlink\" title=\"关卡\"></a>关卡</h3><p>仔细想想，下面代码块会输出什么结果呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战一</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> func2;</div><div class=\"line\">&#125;</div><div class=\"line\">func1()();  <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战二</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战三</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">    &#125;</div><div class=\"line\">    scope = <span class=\"string\">\"tommy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战四</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> Bar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战五</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　　　</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;　　　　　　</div><div class=\"line\">        &#125;;　　　　</div><div class=\"line\">    &#125;　　</div><div class=\"line\">&#125;;　　</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());    <span class=\"comment\">// ???</span></div><div class=\"line\"><span class=\"comment\">//提示： getNameFunc里面有一个匿名函数</span></div><div class=\"line\"><span class=\"keyword\">this</span> 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 <span class=\"built_in\">window</span> 对象。</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战六</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　　　</div><div class=\"line\">            <span class=\"keyword\">return</span> that.name;　　　　　　</div><div class=\"line\">        &#125;;　　　　</div><div class=\"line\">    &#125;　　</div><div class=\"line\">&#125;;　　</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>","excerpt":"<p>作用域和闭包是 JavaScript 最重要的概念之一，想要进一步学习 JavaScript，就必须理解 JavaScript 作用域和闭包的工作原理。<br>","more":"</p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>任何程序设计语言都有作用域的概念，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在 JavaScript 中，变量的作用域有全局作用域和局部作用域两种。</p>\n<p>全局作用域（Global Scope）</p>\n<p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下三种情形拥有全局作用域：</p>\n<p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"string\">\"global\"</span>;     <span class=\"comment\">// 显式声明一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> global;         <span class=\"comment\">// 返回全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(global);       <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);        <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，global 是全局变量，不管是在 checkscope() 函数内部还是外部，都能访问到全局变量 global。</p>\n<p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域，例如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>; <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    global = <span class=\"string\">\"global\"</span>;   <span class=\"comment\">// 隐式声明一个全局变量(不好的写法)</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(global);     <span class=\"comment\">// \"global\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);      <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，变量 global 未用 var 关键字定义就直接赋值，所以隐式的创建了全局变量 global，但这种写法容易造成误解，应尽量避免这种写法。</p>\n<p>3.所有 window 对象的属性拥有全局作用域</p>\n<p>一般情况下，window 对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等等。</p>\n<p>局部作用域（Local Scope）</p>\n<p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。最常见的是在函数体内定义的变量，只能在函数体内使用。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 显式声明一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> local;         <span class=\"comment\">// 返回全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"local\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(local);        <span class=\"comment\">// error: local is not defined.</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，在函数体内定义了变量 local，在函数体内是可以访问了，在函数外访问就报错了。</p>\n<p>全局和局部作用域的关系</p>\n<p>在函数体内，局部变量的优先级高于同名的全局变量。如果在函数内声明的一个局部变量或者函数参数中带有的变量和全局变量重名，那么全局变量就被局部变量所遮盖。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global\"</span>;      <span class=\"comment\">// 声明一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local\"</span>;   <span class=\"comment\">// 声明一个同名的局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> scope;          <span class=\"comment\">// 返回局部变量的值，而不是全局变量的值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope()); <span class=\"comment\">// \"local\"</span></div><div class=\"line\">尽管在全局作用域编写代码时可以不写 <span class=\"keyword\">var</span> 语句，但声明局部变量时则必须使用 <span class=\"keyword\">var</span> 语句。思考一下如果不这样做会怎样：</div><div class=\"line\"></div><div class=\"line\">scope = <span class=\"string\">\"global\"</span>;           <span class=\"comment\">// 声明一个全局变量，甚至不用 var 来声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    scope = <span class=\"string\">\"local\"</span>;        <span class=\"comment\">// 糟糕！我们刚修改了全局变量</span></div><div class=\"line\">    myscope = <span class=\"string\">\"local\"</span>;      <span class=\"comment\">// 这里显式地声明了一个新的全局变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [scope, myscope];<span class=\"comment\">// 返回两个值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(checkscope2()); <span class=\"comment\">// [\"local\", \"local\"]，产生了副作用</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(scope);         <span class=\"comment\">// \"local\"，全局变量修改了</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myscope);       <span class=\"comment\">// \"local\"，全局命名空间搞乱了</span></div></pre></td></tr></table></figure></p>\n<p>函数定义是可以嵌套的。由于每个函数都有它自己的作用域，因此会出现几个局部作用域嵌套的情况，例如：<br>javascript<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var scope = &quot;global scope&quot;;         // 全局变量</div><div class=\"line\">function checkscope() &#123;</div><div class=\"line\">    var scope = &quot;local scope&quot;;      //局部变量 </div><div class=\"line\">    function nested() &#123;</div><div class=\"line\">        var scope = &quot;nested scope&quot;; // 嵌套作用域内的局部变量</div><div class=\"line\">        return scope;               // 返回当前作用域内的值</div><div class=\"line\">    &#125;</div><div class=\"line\">    return nested();</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(checkscope());          // &quot;nested scope&quot;</div></pre></td></tr></table></figure></p>\n<p>函数作用域和声明提前</p>\n<p>在一些类似 C 语言的编程语言中，花括号内的每一段代码都具有各自的作用域，而且变量在声明它们的代码段之外是不可见的，我们称为块级作用域（block scope），而 JavaScript 中没有块级作用域。JavaScript 取而代之地使用了函数作用域（function scope），变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p>\n<p>在如下所示的代码中，在不同位置定义了变量 i、j 和 k，它们都在同一个作用域内，这三个变量在函数体内均是有定义的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(o) &#123;</div><div class=\"line\">    var i = 0; // i在整个函数体内均是有定义的</div><div class=\"line\">    if (typeof o == &quot;object&quot;) &#123;</div><div class=\"line\">        var j = 0; // j在函数体内是有定义的，不仅仅是在这个代码段内</div><div class=\"line\">        for (var k = 0; k &lt; 10; k++) &#123; // k在函数体内是有定义的，不仅仅是在循环内</div><div class=\"line\">            console.log(k); // 输出数字0~9</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(k); // k已经定义了，输出10</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(j); // j已经定义了，但可能没有初始化</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>JavaScript 的函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript 的这个特性被非正式地称为声明提前（hoisting），即 JavaScript 函数里声明的所有变量（但不涉及赋值）都被「提前」至函数体的顶部，看一下如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);  <span class=\"comment\">// 输出\"undefined\"，而不是\"global\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local\"</span>; <span class=\"comment\">// 变量在这里赋初始值，但变量本身在函数体内任何地方均是有定义的</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);  <span class=\"comment\">// 输出\"local\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可能会误以为函数中的第一行会输出 “global”，因为代码还没有执行到 var 语句声明局部变量的地方。其实不然，由于函数作用域的特性，局部变量在整个函数体始终是有定义的，也就是说，在函数体内局部变量遮盖了同名全局变量。尽管如此，只有在程序执行到 var 语句的时候，局部变量才会被真正赋值。因此，上述过程等价于：将函数内的变量声明“提前”至函数体顶部，同时变量初始化留在原来的位置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope;          <span class=\"comment\">// 在函数顶部声明了局部变量</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope); <span class=\"comment\">// 变量存在，但其值是\"undefined\"</span></div><div class=\"line\">    scope = <span class=\"string\">\"local\"</span>;    <span class=\"comment\">// 这里将其初始化并赋值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope); <span class=\"comment\">// 这里它具有了我们所期望的值</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在具有块级作用域的编程语言中，在狭小的作用域里让变量声明和使用变量的代码尽可能靠近彼此，通常来讲，这是一个非常不错的编程习惯。由于 JavaScript 没有块级作用域，因此一些程序员特意将变量声明放在函数体顶部，而不是将声明靠近放在使用变量之处。这种做法使得他们的源代码非常清晰地反映了真实的变量作用域。</p>\n<h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>\n<p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p>\n<p>请看下面的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (color === <span class=\"string\">\"blue\"</span>)&#123;</div><div class=\"line\">        color = <span class=\"string\">\"red\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(changeColor());</div></pre></td></tr></table></figure>\n<p>在这个简单的例子中，函数 changeColor() 的作用域链包含两个对象：它自己的变量对象（其中定义着 arguments 对象）和全局环境的变量对象。可以在函数内部访问变量 color，就是因为可以在这个作用域链中找到它。</p>\n<p>此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面这个例子所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tempColor = anotherColor;</div><div class=\"line\">        anotherColor = color;</div><div class=\"line\">        color = tempColor;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 这里可以访问color、anotherColor和tempColor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这里可以访问color和anotherColor，但不能访问tempColor</span></div><div class=\"line\">    swapColors();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>// 这里只能访问color<br>changeColor();<br>以上代码共涉及3个执行环境：全局环境、changeColor() 的局部环境和 swapColors() 的局部环境。全局环境中有一个变量 color 和一个函数 changeColor()。changeColor() 的局部环境中有一个名为 anotherColor 的变量和一个名为 swapColors() 的函数，但它也可以访问全局环境中的变量 color。swapColors() 的局部环境中有一个变量 tempColor，该变量只能在这个环境中访问到。无论全局环境还是 changeColor() 的局部环境都无权访问 tempColor。然而，在 swapColors() 内部则可以访问其他两个环境中的所有变量，因为那两个环境是它的父执行环境。下图形象地展示了前面这个例子的作用域链。<br><img src=\"/css/images/scope.jpg\" alt=\"\"></p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>MDN 对闭包的定义：</p>\n<p>闭包是指那些能够访问独立（自由）变量的函数（变量在本地使用，但定义在一个封闭的作用域中）。换句话说，这些函数可以「记忆」它被创建时候的环境。<br>《JavaScript 权威指南(第6版)》对闭包的定义：</p>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为闭包。</p>\n<p>《JavaScript 高级程序设计(第3版)》对闭包的定义：</p>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n<p>上面这些定义都比较晦涩难懂，阮一峰的解释稍微好理解一些：</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成定义在一个函数内部的函数。</p>\n<h4 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h4><p>闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量（作用域链），另一个就是让这些变量的值始终保持在内存中。怎么来理解这句话呢？请看下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;　　　</div><div class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        n += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> fun2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = fun();　　</div><div class=\"line\">result(); <span class=\"comment\">// 1</span></div><div class=\"line\">add();</div><div class=\"line\">result(); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>在这段代码中，result 实际上就是函数 fun2。它一共运行了两次，第一次的值是 1，第二次的值是 2。这证明了，函数 fun 中的局部变量 n 一直保存在内存中，并没有在 fun 调用后被自动清除。</p>\n<p>为什么会这样呢？原因就在于 fun 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun，因此 fun 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>\n<p>这段代码中另一个值得注意的地方，就是 add = function() { n += 1 } 这一行。首先，变量 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，和 fun2 处于同一作用域，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h4 id=\"计数器的困境\"><a href=\"#计数器的困境\" class=\"headerlink\" title=\"计数器的困境\"></a>计数器的困境</h4><p>我们再来看一个经典例子「计数器的困境」，假设你想统计一些数值，且该计数器在所有函数中都是可用的。你可以定义一个全局变量 counter 当做计数器，再定义一个 add() 函数来设置计数器递增。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> counter += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"comment\">// 计数器现在为 3</span></div></pre></td></tr></table></figure></p>\n<p>计数器数值在执行 add() 函数时发生变化。但问题来了，页面上的任何脚本都能改变计数器 counter，即便没有调用 add() 函数。如果我们将计数器 counter 定义在 add() 函数内部，就不会被外部脚本随意修改到计数器的值了。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> counter += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add());</div><div class=\"line\"><span class=\"comment\">// 本意是想输出 3, 但事与愿违，输出的都是 1</span></div></pre></td></tr></table></figure></p>\n<p>因为每次调用 add() 函数，计数器都会被重置为 0，输出的都是 1，这并不是我们想要的结果。闭包正好可以解决这个问题，我们在 add() 函数内部，再定义一个 plus() 内嵌函数（闭包），内嵌函数 plus() 可以访问父函数的 counter 变量。代码如下：</p>\n<p>``javascript<br>function add() {<br>    var counter = 0;<br>    var plus = function() {counter += 1;}<br>    plus();<br>    return counter;<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">接下来，只要我们能在外部访问 plus() 函数，并且确保 counter = 0 只执行一次，就能解决计数器的困境。代码如下：</div><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">var add = function() &#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    var plus = function() &#123;return counter += 1;&#125;</div><div class=\"line\">    return plus;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var puls2 = add();</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">console.log(puls2());</div><div class=\"line\">// 计数器为 3</div></pre></td></tr></table></figure></p>\n<p>计数器 counter 受 add() 函数的作用域保护，只能通过 puls2 方法修改。<br>这里当时想了好久都没明白过来，一直理解为执行puls2()就是调用了add()这个方法，然后一直重复执行var counter = 0<br>结果是我忽略了add()方法里面的 return plus<br>那么后面每次调用plus2()实际上是执行了的plus这个方法，并非一直执行的add()</p>\n<h4 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h4><ul>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除或设置为 null，断开变量和内存的联系。</li>\n<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n<p>JavaScript 闭包是一种强大的语言特性。通过使用这个语言特性来隐藏变量，可以避免覆盖其他地方使用的同名变量，理解闭包有助于编写出更有效也更简洁的代码。</p>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字\"></a><code>this</code> 关键字</h3><p>谈到作用域和闭包就不得不说 this 关键字，虽然它们之间关联不大，但是它们一起使用却容易让人产生疑惑。下面列出了使用 this 的大部分场景，带大家一探究竟。</p>\n<p>this 是 JavaScript 的关键字，指函数执行时的上下文，跟函数定义时的上下文无关。随着函数使用场合的不同，this 的值会发生变化。但是有一个总的原则，那就是 this 指代的是调用函数的那个对象。</p>\n<h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局上下文中，也就是在任何函数体外部，this 指代全局对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在浏览器中，this 指代全局对象 window</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数上下文中，也就是在任何函数体内部，this 指代调用函数的那个对象。</p>\n<h4 id=\"函数调用中的-this\"><a href=\"#函数调用中的-this\" class=\"headerlink\" title=\"函数调用中的 this\"></a>函数调用中的 this</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f1() === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>如上代码所示，直接定义一个函数 f1()，相当于为 window 对象定义了一个属性。直接执行函数 f1()，相当于执行 window.f1()。所以函数 f1() 中的 this 指代调用函数的那个对象，也就是 window 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>; <span class=\"comment\">// 这里是严格模式</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f2() === <span class=\"literal\">undefined</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure>\n<p>如上代码所示，对象 o 中包含一个属性 name 和一个方法 f()。当我们执行 o.f() 时，方法 f() 中的 this 指代调用函数的那个对象，也就是对象 o，所以 this.name 也就是 o.name。</p>\n<p>注意，在何处定义函数完全不会影响到 this 的行为，我们也可以首先定义函数，然后再将其附属到 o.f。这样做 this 的行为也一致。如下代码所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span> &#125;;</div><div class=\"line\">o.f = fun;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure></p>\n<p>类似的，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法 g() 当作对象 o.b 的函数调用。在这次执行期间，函数中的 this 将指向 o.b。事实上，这与对象本身的成员没有多大关系，最靠近的引用才是最重要的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.b = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"sophie\"</span>,</div><div class=\"line\">    <span class=\"attr\">g</span>: fun</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.b.g()); <span class=\"comment\">// \"sophie\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"eval-方法中的-this\"><a href=\"#eval-方法中的-this\" class=\"headerlink\" title=\"eval() 方法中的 this\"></a>eval() 方法中的 this</h4><p>eval() 方法可以将字符串转换为 JavaScript 代码，使用 eval() 方法时，this 指向哪里呢？答案很简单，看谁在调用 eval() 方法，调用者的执行环境中的 this 就被 eval() 方法继承下来了。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局上下文</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">\"this\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(f1() === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数上下文</span></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"stone\"</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">\"this.name\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// \"stone\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"call-和-apply-方法中的-this\"><a href=\"#call-和-apply-方法中的-this\" class=\"headerlink\" title=\"call() 和 apply() 方法中的 this\"></a>call() 和 apply() 方法中的 this</h4><p>call() 和 apply() 是函数对象的方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this 指代的就是这两个方法的第一个参数。<br>更多apply()知识点见 <a href=\"http://www.xqiao.cc/conding/JavaScript/20160628/apply%20call%20bind.html\">apply call bind使用详解</a> 篇<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;　　</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;　　　　</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);　　</div><div class=\"line\">&#125;　　</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;　　</div><div class=\"line\">o.x = <span class=\"number\">1</span>;</div><div class=\"line\">o.m = f;　　</div><div class=\"line\">o.m.apply(); <span class=\"comment\">// 0</span></div></pre></td></tr></table></figure></p>\n<p>call() 和 apply() 的参数为空时，默认调用全局对象。因此，这时的运行结果为 0，证明 this 指的是全局对象。如果把最后一行代码修改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.m.apply(o); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>运行结果就变成了 1，证明了这时 this 指代的是对象 o</p>\n<h4 id=\"bind-方法中的-this\"><a href=\"#bind-方法中的-this\" class=\"headerlink\" title=\"bind() 方法中的 this\"></a>bind() 方法中的 this</h4><p>ECMAScript 5 引入了 Function.prototype.bind。调用 f.bind(someObject) 会创建一个与 f 具有相同函数体和作用域的函数，但是在这个新函数中，this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = f.bind(&#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">\"stone\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(g()); <span class=\"comment\">// stone</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"attr\">f</span>: f,</div><div class=\"line\">    <span class=\"attr\">g</span>: g</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.f(), o.g()); <span class=\"comment\">// 28, stone</span></div></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理函数中的-this\"><a href=\"#DOM-事件处理函数中的-this\" class=\"headerlink\" title=\"DOM 事件处理函数中的 this\"></a>DOM 事件处理函数中的 this</h4><p>一般来讲，当函数使用 <code>addEventListener</code> 被用作事件处理函数时，它的 this 指向触发事件的元素。如下代码所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">        btn.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.style.backgroundColor = <span class=\"string\">\"#A5D9F3\"</span>;</div><div class=\"line\">        &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但在 IE 浏览器中，当函数使用 <code>attachEvent</code> ，被用作事件处理函数时，它的 this 却指向 window。如下代码所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">        btn.attachEvent(<span class=\"string\">\"onclick\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"内联事件处理函数中的-this\"><a href=\"#内联事件处理函数中的-this\" class=\"headerlink\" title=\"内联事件处理函数中的 this\"></a>内联事件处理函数中的 this</h4><p>当代码被内联处理函数调用时，它的 this 指向监听器所在的 DOM 元素。如下代码所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert(this.tagName.toLowerCase());\"</span>&gt;</span></div><div class=\"line\">  Show this</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的 alert 会显示 button，注意只有外层代码中的 this 是这样设置的。如果 this 被包含在匿名函数中，则又是另外一种情况了。如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button onclick=<span class=\"string\">\"alert((function()&#123;return this&#125;)());\"</span>&gt;</div><div class=\"line\">  Show inner <span class=\"keyword\">this</span></div><div class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></div></pre></td></tr></table></figure>\n<p>在这种情况下，this 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 window 对象。</p>\n<h3 id=\"关卡\"><a href=\"#关卡\" class=\"headerlink\" title=\"关卡\"></a>关卡</h3><p>仔细想想，下面代码块会输出什么结果呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战一</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> func2;</div><div class=\"line\">&#125;</div><div class=\"line\">func1()();  <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战二</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战三</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">    &#125;</div><div class=\"line\">    scope = <span class=\"string\">\"tommy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战四</span></div><div class=\"line\">scope = <span class=\"string\">\"stone\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(scope);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">\"sophie\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> Bar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ret = Func();</div><div class=\"line\">ret();    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战五</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　　　</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;　　　　　　</div><div class=\"line\">        &#125;;　　　　</div><div class=\"line\">    &#125;　　</div><div class=\"line\">&#125;;　　</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());    <span class=\"comment\">// ???</span></div><div class=\"line\"><span class=\"comment\">//提示： getNameFunc里面有一个匿名函数</span></div><div class=\"line\"><span class=\"keyword\">this</span> 被包含在匿名函数中，相当于处于全局上下文中，所以它指向 <span class=\"built_in\">window</span> 对象。</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 挑战六</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">    <span class=\"attr\">getNameFunc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;　　　　　　</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;　　　　　　　　</div><div class=\"line\">            <span class=\"keyword\">return</span> that.name;　　　　　　</div><div class=\"line\">        &#125;;　　　　</div><div class=\"line\">    &#125;　　</div><div class=\"line\">&#125;;　　</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());    <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure>"},{"title":"react入门04-组件样式","date":"2016-12-17T14:06:11.000Z","_content":"\n\n设置组件的样式，讲解三种：\n1.内联样式\n2.对象样式\n3.选择器样式\n<!--more-->  注意：在React和HTML中设置样式时的书写格式是有区别的\n* 1.HTML以；结尾\n*   React以,结尾\n* 2.HTML中key、value都不加引号\n*   React中属于JavaScript对象，key的名字不能出现'-'，需要使用驼峰命名法.如果value为\n* \t  字符串，需要加引号\n* 3.HTML中，value如果是数字，需要带单位\n*   React中不需要带单位\n\n##### 定义一个组件类，同时使用三种设置组件样式的方式\n* 需求：定义一个组件，分为上下两行显示内容\n* < div>  内联样式：设置背景颜色，边框大小，边框颜色\n* < h1>  < /h1> 对象样式：设置背景颜色，字体颜色\n* < p>< /p> 选择器样式： 设置字休大小\n* 注意：在React中使用选择器样式设置组件样式时，属性名不能使用class使用className替换\n* 类似的：使用htmlfFor替换for\n\n```css\n.pStyle {\n  font-size: 24px;\n}\n```\n```javascript\nvar hStyle = {\n  backgroundColor: '#efe',\n  color: 'red'\n}\n\nvar ShowMessage = React.createClass({\n  render: function(){\n  return (\n      <div style = {{backgroundColor:'yellow', borderWidth:5, borderColor: '#ccc', borderStyle: 'solid'}}>\n        <h1 style = {hStyle}>{this.props.firstRow}</h1>\n        <p className = 'pStyle'>{this.props.secondRow}</p>\n      </div>\n    )\n  }\t\n})\n\nReactDOM.render(\n  <ShowMessage firstRow = 'Hello' secondRow = 'React' />,\n  document.getElementById('container')\n)\n\n```\n ","source":"_posts/react入门04-组件样式.md","raw":"---\ntitle: react入门04-组件样式\ndate: 2016-12-17 22:06:11\ncategories: \n  - 技术\n  - React\ntags: react \n---\n\n\n设置组件的样式，讲解三种：\n1.内联样式\n2.对象样式\n3.选择器样式\n<!--more-->  注意：在React和HTML中设置样式时的书写格式是有区别的\n* 1.HTML以；结尾\n*   React以,结尾\n* 2.HTML中key、value都不加引号\n*   React中属于JavaScript对象，key的名字不能出现'-'，需要使用驼峰命名法.如果value为\n* \t  字符串，需要加引号\n* 3.HTML中，value如果是数字，需要带单位\n*   React中不需要带单位\n\n##### 定义一个组件类，同时使用三种设置组件样式的方式\n* 需求：定义一个组件，分为上下两行显示内容\n* < div>  内联样式：设置背景颜色，边框大小，边框颜色\n* < h1>  < /h1> 对象样式：设置背景颜色，字体颜色\n* < p>< /p> 选择器样式： 设置字休大小\n* 注意：在React中使用选择器样式设置组件样式时，属性名不能使用class使用className替换\n* 类似的：使用htmlfFor替换for\n\n```css\n.pStyle {\n  font-size: 24px;\n}\n```\n```javascript\nvar hStyle = {\n  backgroundColor: '#efe',\n  color: 'red'\n}\n\nvar ShowMessage = React.createClass({\n  render: function(){\n  return (\n      <div style = {{backgroundColor:'yellow', borderWidth:5, borderColor: '#ccc', borderStyle: 'solid'}}>\n        <h1 style = {hStyle}>{this.props.firstRow}</h1>\n        <p className = 'pStyle'>{this.props.secondRow}</p>\n      </div>\n    )\n  }\t\n})\n\nReactDOM.render(\n  <ShowMessage firstRow = 'Hello' secondRow = 'React' />,\n  document.getElementById('container')\n)\n\n```\n ","slug":"react入门04-组件样式","published":1,"updated":"2016-12-29T05:01:27.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn73002a24uuza6mygt2","content":"<p>设置组件的样式，讲解三种：<br>1.内联样式<br>2.对象样式<br>3.选择器样式<br><a id=\"more\"></a>  注意：在React和HTML中设置样式时的书写格式是有区别的</p>\n<ul>\n<li>1.HTML以；结尾</li>\n<li>React以,结尾</li>\n<li>2.HTML中key、value都不加引号</li>\n<li>React中属于JavaScript对象，key的名字不能出现’-‘，需要使用驼峰命名法.如果value为</li>\n<li>字符串，需要加引号</li>\n<li>3.HTML中，value如果是数字，需要带单位</li>\n<li>React中不需要带单位</li>\n</ul>\n<h5 id=\"定义一个组件类，同时使用三种设置组件样式的方式\"><a href=\"#定义一个组件类，同时使用三种设置组件样式的方式\" class=\"headerlink\" title=\"定义一个组件类，同时使用三种设置组件样式的方式\"></a>定义一个组件类，同时使用三种设置组件样式的方式</h5><ul>\n<li>需求：定义一个组件，分为上下两行显示内容</li>\n<li>&lt; div&gt;  内联样式：设置背景颜色，边框大小，边框颜色</li>\n<li>&lt; h1&gt;  &lt; /h1&gt; 对象样式：设置背景颜色，字体颜色</li>\n<li>&lt; p&gt;&lt; /p&gt; 选择器样式： 设置字休大小</li>\n<li>注意：在React中使用选择器样式设置组件样式时，属性名不能使用class使用className替换</li>\n<li>类似的：使用htmlfFor替换for</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.pStyle</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hStyle = &#123;</div><div class=\"line\">  <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#efe'</span>,</div><div class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ShowMessage = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>'<span class=\"attr\">yellow</span>', <span class=\"attr\">borderWidth:5</span>, <span class=\"attr\">borderColor:</span> '#<span class=\"attr\">ccc</span>', <span class=\"attr\">borderStyle:</span> '<span class=\"attr\">solid</span>'&#125;&#125;&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span> = <span class=\"string\">&#123;hStyle&#125;</span>&gt;</span>&#123;this.props.firstRow&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span> = <span class=\"string\">'pStyle'</span>&gt;</span>&#123;this.props.secondRow&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;\t</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ShowMessage</span> <span class=\"attr\">firstRow</span> = <span class=\"string\">'Hello'</span> <span class=\"attr\">secondRow</span> = <span class=\"string\">'React'</span> /&gt;</span>,</span></div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n","excerpt":"<p>设置组件的样式，讲解三种：<br>1.内联样式<br>2.对象样式<br>3.选择器样式<br>","more":"注意：在React和HTML中设置样式时的书写格式是有区别的</p>\n<ul>\n<li>1.HTML以；结尾</li>\n<li>React以,结尾</li>\n<li>2.HTML中key、value都不加引号</li>\n<li>React中属于JavaScript对象，key的名字不能出现’-‘，需要使用驼峰命名法.如果value为</li>\n<li>字符串，需要加引号</li>\n<li>3.HTML中，value如果是数字，需要带单位</li>\n<li>React中不需要带单位</li>\n</ul>\n<h5 id=\"定义一个组件类，同时使用三种设置组件样式的方式\"><a href=\"#定义一个组件类，同时使用三种设置组件样式的方式\" class=\"headerlink\" title=\"定义一个组件类，同时使用三种设置组件样式的方式\"></a>定义一个组件类，同时使用三种设置组件样式的方式</h5><ul>\n<li>需求：定义一个组件，分为上下两行显示内容</li>\n<li>&lt; div&gt;  内联样式：设置背景颜色，边框大小，边框颜色</li>\n<li>&lt; h1&gt;  &lt; /h1&gt; 对象样式：设置背景颜色，字体颜色</li>\n<li>&lt; p&gt;&lt; /p&gt; 选择器样式： 设置字休大小</li>\n<li>注意：在React中使用选择器样式设置组件样式时，属性名不能使用class使用className替换</li>\n<li>类似的：使用htmlfFor替换for</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.pStyle</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hStyle = &#123;</div><div class=\"line\">  <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#efe'</span>,</div><div class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ShowMessage = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>'<span class=\"attr\">yellow</span>', <span class=\"attr\">borderWidth:5</span>, <span class=\"attr\">borderColor:</span> '#<span class=\"attr\">ccc</span>', <span class=\"attr\">borderStyle:</span> '<span class=\"attr\">solid</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span> = <span class=\"string\">&#123;hStyle&#125;</span>&gt;</span>&#123;this.props.firstRow&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span> = <span class=\"string\">'pStyle'</span>&gt;</span>&#123;this.props.secondRow&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;\t</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ShowMessage</span> <span class=\"attr\">firstRow</span> = <span class=\"string\">'Hello'</span> <span class=\"attr\">secondRow</span> = <span class=\"string\">'React'</span> /&gt;</span>,</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</span></div></pre></td></tr></table></figure>"},{"title":"npm常用命令及npm-install-报的那些错","date":"2017-02-20T15:49:46.000Z","_content":"\n这两天的执行npm install 这个命令后每次心都伤得巴凉巴凉的，要么一整天都没个反应，要么全是ERR\n真是要崩溃了，搞得我都想放弃react了，还好功夫不负有心人，今晚总算是把react-router的实例跑起来了，\n<!-- more -->\n当然从20:00至23点多，各种报错，准备睡了，不如再试试吧！不然睡不着呀！\n不知道怎么搞的，这次报了个: ERR！Windows_NT 6.1.7601\n\n解决办法：先设置代理为空 npm config set proxy null， 然后再npm install cnpm -g --registry=https://registry.npm.taobao.org！\n\n哇噻！再来安装react需要依赖的一些包全都成功了\n\n### 再补充个实用的 rimraf\n每次npm install 后 想删掉node_modules这个文件夹又麻烦了\n文件及文件夹太深总是删不掉\n不如试试这个 npm install rimraf -g\n安装成功后 rimraf node_modules\n\n#### 常用命令\nnpm是什么\nnpm install 安装模块\nnpm uninstall 卸载模块\nnpm update 更新模块\nnpm outdated 检查模块是否已经过时\nnpm ls 查看安装的模块\nnpm init 在项目中引导创建一个package.json文件\nnpm help 查看某条命令的详细帮助\nnpm root 查看包的安装路径\nnpm config 管理npm的配置路径\nnpm cache 管理模块的缓存\nnpm start 启动模块\nnpm stop 停止模块\nnpm restart 重新启动模块\nnpm test 测试模块\nnpm version 查看模块版本\nnpm view 查看模块的注册信息\nnpm adduser\nnpm publish 发布模块\nnpm access 在发布的包上设置访问级别\nnpm package.json的语法\n","source":"_posts/npm常用命令及npm-install-报的那些错.md","raw":"---\ntitle: npm常用命令及npm-install-报的那些错\ndate: 2017-02-20 23:49:46\ncategories: \n  - 技术\n  - npm\ntags: npm\n---\n\n这两天的执行npm install 这个命令后每次心都伤得巴凉巴凉的，要么一整天都没个反应，要么全是ERR\n真是要崩溃了，搞得我都想放弃react了，还好功夫不负有心人，今晚总算是把react-router的实例跑起来了，\n<!-- more -->\n当然从20:00至23点多，各种报错，准备睡了，不如再试试吧！不然睡不着呀！\n不知道怎么搞的，这次报了个: ERR！Windows_NT 6.1.7601\n\n解决办法：先设置代理为空 npm config set proxy null， 然后再npm install cnpm -g --registry=https://registry.npm.taobao.org！\n\n哇噻！再来安装react需要依赖的一些包全都成功了\n\n### 再补充个实用的 rimraf\n每次npm install 后 想删掉node_modules这个文件夹又麻烦了\n文件及文件夹太深总是删不掉\n不如试试这个 npm install rimraf -g\n安装成功后 rimraf node_modules\n\n#### 常用命令\nnpm是什么\nnpm install 安装模块\nnpm uninstall 卸载模块\nnpm update 更新模块\nnpm outdated 检查模块是否已经过时\nnpm ls 查看安装的模块\nnpm init 在项目中引导创建一个package.json文件\nnpm help 查看某条命令的详细帮助\nnpm root 查看包的安装路径\nnpm config 管理npm的配置路径\nnpm cache 管理模块的缓存\nnpm start 启动模块\nnpm stop 停止模块\nnpm restart 重新启动模块\nnpm test 测试模块\nnpm version 查看模块版本\nnpm view 查看模块的注册信息\nnpm adduser\nnpm publish 发布模块\nnpm access 在发布的包上设置访问级别\nnpm package.json的语法\n","slug":"npm常用命令及npm-install-报的那些错","published":1,"updated":"2017-02-21T01:39:11.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn77002f24uudxqodzyj","content":"<p>这两天的执行npm install 这个命令后每次心都伤得巴凉巴凉的，要么一整天都没个反应，要么全是ERR<br>真是要崩溃了，搞得我都想放弃react了，还好功夫不负有心人，今晚总算是把react-router的实例跑起来了，<br><a id=\"more\"></a><br>当然从20:00至23点多，各种报错，准备睡了，不如再试试吧！不然睡不着呀！<br>不知道怎么搞的，这次报了个: ERR！Windows_NT 6.1.7601</p>\n<p>解决办法：先设置代理为空 npm config set proxy null， 然后再npm install cnpm -g –registry=<a href=\"https://registry.npm.taobao.org！\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org！</a></p>\n<p>哇噻！再来安装react需要依赖的一些包全都成功了</p>\n<h3 id=\"再补充个实用的-rimraf\"><a href=\"#再补充个实用的-rimraf\" class=\"headerlink\" title=\"再补充个实用的 rimraf\"></a>再补充个实用的 rimraf</h3><p>每次npm install 后 想删掉node_modules这个文件夹又麻烦了<br>文件及文件夹太深总是删不掉<br>不如试试这个 npm install rimraf -g<br>安装成功后 rimraf node_modules</p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>npm是什么<br>npm install 安装模块<br>npm uninstall 卸载模块<br>npm update 更新模块<br>npm outdated 检查模块是否已经过时<br>npm ls 查看安装的模块<br>npm init 在项目中引导创建一个package.json文件<br>npm help 查看某条命令的详细帮助<br>npm root 查看包的安装路径<br>npm config 管理npm的配置路径<br>npm cache 管理模块的缓存<br>npm start 启动模块<br>npm stop 停止模块<br>npm restart 重新启动模块<br>npm test 测试模块<br>npm version 查看模块版本<br>npm view 查看模块的注册信息<br>npm adduser<br>npm publish 发布模块<br>npm access 在发布的包上设置访问级别<br>npm package.json的语法</p>\n","excerpt":"<p>这两天的执行npm install 这个命令后每次心都伤得巴凉巴凉的，要么一整天都没个反应，要么全是ERR<br>真是要崩溃了，搞得我都想放弃react了，还好功夫不负有心人，今晚总算是把react-router的实例跑起来了，<br>","more":"<br>当然从20:00至23点多，各种报错，准备睡了，不如再试试吧！不然睡不着呀！<br>不知道怎么搞的，这次报了个: ERR！Windows_NT 6.1.7601</p>\n<p>解决办法：先设置代理为空 npm config set proxy null， 然后再npm install cnpm -g –registry=<a href=\"https://registry.npm.taobao.org！\">https://registry.npm.taobao.org！</a></p>\n<p>哇噻！再来安装react需要依赖的一些包全都成功了</p>\n<h3 id=\"再补充个实用的-rimraf\"><a href=\"#再补充个实用的-rimraf\" class=\"headerlink\" title=\"再补充个实用的 rimraf\"></a>再补充个实用的 rimraf</h3><p>每次npm install 后 想删掉node_modules这个文件夹又麻烦了<br>文件及文件夹太深总是删不掉<br>不如试试这个 npm install rimraf -g<br>安装成功后 rimraf node_modules</p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>npm是什么<br>npm install 安装模块<br>npm uninstall 卸载模块<br>npm update 更新模块<br>npm outdated 检查模块是否已经过时<br>npm ls 查看安装的模块<br>npm init 在项目中引导创建一个package.json文件<br>npm help 查看某条命令的详细帮助<br>npm root 查看包的安装路径<br>npm config 管理npm的配置路径<br>npm cache 管理模块的缓存<br>npm start 启动模块<br>npm stop 停止模块<br>npm restart 重新启动模块<br>npm test 测试模块<br>npm version 查看模块版本<br>npm view 查看模块的注册信息<br>npm adduser<br>npm publish 发布模块<br>npm access 在发布的包上设置访问级别<br>npm package.json的语法</p>"},{"title":"react入门02-JSX语法","date":"2016-12-17T14:06:11.000Z","_content":" JSX入门\n JSX不是一门新的语言，是个语法（语法糖）\n\n 1.JSX必须借助React环境运行\n\n 2.JSX标签其实就是HTML标签，只不过我们在JavaScript中书写这些标签的时候，不用使用\"\"括起来，可以向XML一样书写\n\n 3.转换JSX语法能够让我们更直观的看到组件的DOM结构，不能直接在浏览器上运行最终会转化成JavsScript代码在浏览器上运行  \n\n 4.在JSX中运行JavaScript代码。使用 {} 括起来 {表达式}\n\n 5.例如：属性、设置样式、事件绑定等\n<!--more--> \n\n```javascript\n    ReactDOM.render(\n      React.createElement('h1', null, 'Hello React'),\n      document.getElementById('container')\n    )\n    \n    var text = 'Hello React 表达式';\n    ReactDOM.render(\n      <h1>{text}</h1>,\n      document.getElementById('container')\n    )\n\n```\n ","source":"_posts/react入门02-JSX语法.md","raw":"---\ntitle: react入门02-JSX语法\ndate: 2016-12-17 22:06:11\ncategories: \n  - 技术\n  - React\ntags: [react, JSX]\n---\n JSX入门\n JSX不是一门新的语言，是个语法（语法糖）\n\n 1.JSX必须借助React环境运行\n\n 2.JSX标签其实就是HTML标签，只不过我们在JavaScript中书写这些标签的时候，不用使用\"\"括起来，可以向XML一样书写\n\n 3.转换JSX语法能够让我们更直观的看到组件的DOM结构，不能直接在浏览器上运行最终会转化成JavsScript代码在浏览器上运行  \n\n 4.在JSX中运行JavaScript代码。使用 {} 括起来 {表达式}\n\n 5.例如：属性、设置样式、事件绑定等\n<!--more--> \n\n```javascript\n    ReactDOM.render(\n      React.createElement('h1', null, 'Hello React'),\n      document.getElementById('container')\n    )\n    \n    var text = 'Hello React 表达式';\n    ReactDOM.render(\n      <h1>{text}</h1>,\n      document.getElementById('container')\n    )\n\n```\n ","slug":"react入门02-JSX语法","published":1,"updated":"2016-12-29T05:01:27.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7b002h24uul6j6beg9","content":"<p> JSX入门<br> JSX不是一门新的语言，是个语法（语法糖）</p>\n<p> 1.JSX必须借助React环境运行</p>\n<p> 2.JSX标签其实就是HTML标签，只不过我们在JavaScript中书写这些标签的时候，不用使用””括起来，可以向XML一样书写</p>\n<p> 3.转换JSX语法能够让我们更直观的看到组件的DOM结构，不能直接在浏览器上运行最终会转化成JavsScript代码在浏览器上运行  </p>\n<p> 4.在JSX中运行JavaScript代码。使用 {} 括起来 {表达式}</p>\n<p> 5.例如：属性、设置样式、事件绑定等<br><a id=\"more\"></a> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  React.createElement(<span class=\"string\">'h1'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'Hello React'</span>),</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'Hello React 表达式'</span>;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n","excerpt":"<p> JSX入门<br> JSX不是一门新的语言，是个语法（语法糖）</p>\n<p> 1.JSX必须借助React环境运行</p>\n<p> 2.JSX标签其实就是HTML标签，只不过我们在JavaScript中书写这些标签的时候，不用使用””括起来，可以向XML一样书写</p>\n<p> 3.转换JSX语法能够让我们更直观的看到组件的DOM结构，不能直接在浏览器上运行最终会转化成JavsScript代码在浏览器上运行  </p>\n<p> 4.在JSX中运行JavaScript代码。使用 {} 括起来 {表达式}</p>\n<p> 5.例如：属性、设置样式、事件绑定等<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  React.createElement(<span class=\"string\">'h1'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'Hello React'</span>),</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'Hello React 表达式'</span>;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>"},{"title":"react入门01-创建React工程","date":"2016-12-17T14:06:11.000Z","_content":" \n创建一个React Dome<!--more-->   \n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>react入门01-创建React工程</title>\n    <!--react.js是React的核心库-->\n    <script src=\"js/react.js\"></script>\n    <!--react-dom.js的作用是提供与DOM相关的功能-->\n    <script src=\"js/react-dom.js\"></script>\n    <!--browser.min.js的作用是将JSX语法转换成javaScript语法-->\n    <script src=\"js/browser.min.js\"></script>\n  </head>\n  <body>\n    <!--React渲染的模板内容会插入到这个DOM节点中，作为一个容器-->\n    <div id=\"container\"></div>\n  </body>\n\n  <!--在React开发中，使用JSX，跟JavaScript不兼容，在使用JSX的地方，\n要设置type: text/babel-->\n  <!--babel是一个转换编译器，在ES6转成可以在浏览器中运行代码-->\n  <script type=\"text/babel\">\n    // 在此编写React代码\n    // 需求： 渲染一行标题，显示'Hello React'\n    /*\n      ReactDOM.render()\n      React的最基本方法，用于将模板转换成HTML语言，渲染DOM,并插入指定的DOM节点中\n\n      3个参数\n      第一个：模板的渲染内容(HTML形式)\n      第二个：这段模板需要插入的DOM节点(本程序中，是id为container的div节点)\n      第三个：渲染后的回调，一般不用\n\n     */\n\n    ReactDOM.render(\n      <h1>Hello React</h1>,\n      document.getElementById('container')\n    )\n\n  </script>\n</html>\n```\n<!--more--> \n\n ","source":"_posts/react入门01-创建React工程.md","raw":"---\ntitle: react入门01-创建React工程\ndate: 2016-12-17 22:06:11\ncategories: \n  - 技术\n  - React\ntags: react\n---\n \n创建一个React Dome<!--more-->   \n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>react入门01-创建React工程</title>\n    <!--react.js是React的核心库-->\n    <script src=\"js/react.js\"></script>\n    <!--react-dom.js的作用是提供与DOM相关的功能-->\n    <script src=\"js/react-dom.js\"></script>\n    <!--browser.min.js的作用是将JSX语法转换成javaScript语法-->\n    <script src=\"js/browser.min.js\"></script>\n  </head>\n  <body>\n    <!--React渲染的模板内容会插入到这个DOM节点中，作为一个容器-->\n    <div id=\"container\"></div>\n  </body>\n\n  <!--在React开发中，使用JSX，跟JavaScript不兼容，在使用JSX的地方，\n要设置type: text/babel-->\n  <!--babel是一个转换编译器，在ES6转成可以在浏览器中运行代码-->\n  <script type=\"text/babel\">\n    // 在此编写React代码\n    // 需求： 渲染一行标题，显示'Hello React'\n    /*\n      ReactDOM.render()\n      React的最基本方法，用于将模板转换成HTML语言，渲染DOM,并插入指定的DOM节点中\n\n      3个参数\n      第一个：模板的渲染内容(HTML形式)\n      第二个：这段模板需要插入的DOM节点(本程序中，是id为container的div节点)\n      第三个：渲染后的回调，一般不用\n\n     */\n\n    ReactDOM.render(\n      <h1>Hello React</h1>,\n      document.getElementById('container')\n    )\n\n  </script>\n</html>\n```\n<!--more--> \n\n ","slug":"react入门01-创建React工程","published":1,"updated":"2016-12-29T05:01:27.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7h002m24uubkzsc5gj","content":"<p>创建一个React Dome<a id=\"more\"></a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react入门01-创建React工程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--react.js是React的核心库--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--react-dom.js的作用是提供与DOM相关的功能--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--browser.min.js的作用是将JSX语法转换成javaScript语法--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--React渲染的模板内容会插入到这个DOM节点中，作为一个容器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--在React开发中，使用JSX，跟JavaScript不兼容，在使用JSX的地方，</span></div><div class=\"line\">要设置type: text/babel--&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!--babel是一个转换编译器，在ES6转成可以在浏览器中运行代码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">// 在此编写React代码</span></div><div class=\"line\">    <span class=\"comment\">// 需求： 渲染一行标题，显示'Hello React'</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">      ReactDOM.render()</div><div class=\"line\">      React的最基本方法，用于将模板转换成HTML语言，渲染DOM,并插入指定的DOM节点中</div><div class=\"line\"></div><div class=\"line\">      3个参数</div><div class=\"line\">      第一个：模板的渲染内容(HTML形式)</div><div class=\"line\">      第二个：这段模板需要插入的DOM节点(本程序中，是id为container的div节点)</div><div class=\"line\">      第三个：渲染后的回调，一般不用</div><div class=\"line\"></div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<!--more--> \n","excerpt":"<p>创建一个React Dome","more":"<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react入门01-创建React工程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--react.js是React的核心库--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--react-dom.js的作用是提供与DOM相关的功能--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--browser.min.js的作用是将JSX语法转换成javaScript语法--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--React渲染的模板内容会插入到这个DOM节点中，作为一个容器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--在React开发中，使用JSX，跟JavaScript不兼容，在使用JSX的地方，</div><div class=\"line\">要设置type: text/babel--&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--babel是一个转换编译器，在ES6转成可以在浏览器中运行代码--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"comment\">// 在此编写React代码</span></div><div class=\"line\">    <span class=\"comment\">// 需求： 渲染一行标题，显示'Hello React'</span></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">      ReactDOM.render()</div><div class=\"line\">      React的最基本方法，用于将模板转换成HTML语言，渲染DOM,并插入指定的DOM节点中</div><div class=\"line\"></div><div class=\"line\">      3个参数</div><div class=\"line\">      第一个：模板的渲染内容(HTML形式)</div><div class=\"line\">      第二个：这段模板需要插入的DOM节点(本程序中，是id为container的div节点)</div><div class=\"line\">      第三个：渲染后的回调，一般不用</div><div class=\"line\"></div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<!--more-->"},{"title":"react入门06-属性设置(props)","date":"2016-12-17T14:06:00.000Z","_content":"\nprops是组件自身的属性，一般用于嵌套的内外层组件中，负责传递信息（通常\n是由父层组件向子层组件传递）\n注意：props对象中的属性与组件的属性一一对应，不要直接去修改prpos中属性的值\n\n定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接\n分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击\n\n思路：\n1.给WebShow设置两个属性，wname,wlink\n2.WebShow的props对象增加了两个属性值\n3.WebName从WebShow的props对象中获取wname的值，即网站的名字，<!--more-->  \n```javascript\n//定义WebName组件\n var WebName = React.createClass({\n   render: function(){\n     return <h1>{this.props.webname}</h1>\n   }\n })\n\n //定义WebLink组件\n var WebLink = React.createClass({\n   render: function(){\n     return <a href={this.props.weblink}>{this.props.weblink}</a>\n   }\n })\n\n //定义WebShow组件\n var WebShow = React.createClass({\n   render: function(){\n     return (\n       <div>\n         <WebName webname = {this.props.wname} />\n         <WebLink weblink = {this.props.wlink} />\n       </div>\n     )\n   }\n })\n\n//渲染\nReactDOM.render(\n\t<WebShow wname = '百度' wlink = 'http://www.baidu.com' />,\n\tdocument.getElementById('container')\n)\n```\n...this.props\nprops提供的语法糖，可以将父组件中的全部 属性都复制给子组件\n需求：定义一个组件Link,Link组件中只包含一个< a >, 我们不给< a >设置任何属性所有属性全部从父组件复制得到\n ```javascript\nvar Link = React.createClass({\n\trender: function(){\n\t\treturn <a {...this.props}>{this.props.name}</a>\n\t}\n})\n\n//渲染\nReactDOM.render(\n\t<Link name='百度' href='http://www.baidu.com' />,\n\tdocument.getElementById('container')\n)\n```\n\n","source":"_posts/react入门06-属性设置-props.md","raw":"---\ntitle: react入门06-属性设置(props)\ndate: 2016-12-17 22:06:00\ncategories: \n  - 技术\n  - React\ntags: [react, props] \n---\n\nprops是组件自身的属性，一般用于嵌套的内外层组件中，负责传递信息（通常\n是由父层组件向子层组件传递）\n注意：props对象中的属性与组件的属性一一对应，不要直接去修改prpos中属性的值\n\n定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接\n分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击\n\n思路：\n1.给WebShow设置两个属性，wname,wlink\n2.WebShow的props对象增加了两个属性值\n3.WebName从WebShow的props对象中获取wname的值，即网站的名字，<!--more-->  \n```javascript\n//定义WebName组件\n var WebName = React.createClass({\n   render: function(){\n     return <h1>{this.props.webname}</h1>\n   }\n })\n\n //定义WebLink组件\n var WebLink = React.createClass({\n   render: function(){\n     return <a href={this.props.weblink}>{this.props.weblink}</a>\n   }\n })\n\n //定义WebShow组件\n var WebShow = React.createClass({\n   render: function(){\n     return (\n       <div>\n         <WebName webname = {this.props.wname} />\n         <WebLink weblink = {this.props.wlink} />\n       </div>\n     )\n   }\n })\n\n//渲染\nReactDOM.render(\n\t<WebShow wname = '百度' wlink = 'http://www.baidu.com' />,\n\tdocument.getElementById('container')\n)\n```\n...this.props\nprops提供的语法糖，可以将父组件中的全部 属性都复制给子组件\n需求：定义一个组件Link,Link组件中只包含一个< a >, 我们不给< a >设置任何属性所有属性全部从父组件复制得到\n ```javascript\nvar Link = React.createClass({\n\trender: function(){\n\t\treturn <a {...this.props}>{this.props.name}</a>\n\t}\n})\n\n//渲染\nReactDOM.render(\n\t<Link name='百度' href='http://www.baidu.com' />,\n\tdocument.getElementById('container')\n)\n```\n\n","slug":"react入门06-属性设置-props","published":1,"updated":"2016-12-29T05:01:27.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7j002o24uu4hm1fmc9","content":"<p>props是组件自身的属性，一般用于嵌套的内外层组件中，负责传递信息（通常<br>是由父层组件向子层组件传递）<br>注意：props对象中的属性与组件的属性一一对应，不要直接去修改prpos中属性的值</p>\n<p>定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接<br>分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击</p>\n<p>思路：<br>1.给WebShow设置两个属性，wname,wlink<br>2.WebShow的props对象增加了两个属性值<br>3.WebName从WebShow的props对象中获取wname的值，即网站的名字，<a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义WebName组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebName = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.webname&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//定义WebLink组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebLink = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;this.props.weblink&#125;</span>&gt;</span>&#123;this.props.weblink&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//定义WebShow组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebShow = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> (</div><div class=\"line\">       &lt;div&gt;</div><div class=\"line\">         &lt;WebName webname = &#123;this.props.wname&#125; /&gt;</div><div class=\"line\">         &lt;WebLink weblink = &#123;this.props.wlink&#125; /&gt;</div><div class=\"line\">       &lt;/div&gt;</div><div class=\"line\">     )</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t&lt;WebShow wname = '百度' wlink = 'http://www.baidu.com' /&gt;,</div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>…this.props<br>props提供的语法糖，可以将父组件中的全部 属性都复制给子组件<br>需求：定义一个组件Link,Link组件中只包含一个&lt; a &gt;, 我们不给&lt; a &gt;设置任何属性所有属性全部从父组件复制得到<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Link = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> &#123;<span class=\"attr\">...this.props</span>&#125;&gt;</span>&#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//渲染</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">name</span>=<span class=\"string\">'百度'</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://www.baidu.com'</span> /&gt;</span>,</span></div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>props是组件自身的属性，一般用于嵌套的内外层组件中，负责传递信息（通常<br>是由父层组件向子层组件传递）<br>注意：props对象中的属性与组件的属性一一对应，不要直接去修改prpos中属性的值</p>\n<p>定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接<br>分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击</p>\n<p>思路：<br>1.给WebShow设置两个属性，wname,wlink<br>2.WebShow的props对象增加了两个属性值<br>3.WebName从WebShow的props对象中获取wname的值，即网站的名字，","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义WebName组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebName = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.webname&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//定义WebLink组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebLink = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;this.props.weblink&#125;</span>&gt;</span>&#123;this.props.weblink&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//定义WebShow组件</span></div><div class=\"line\"> <span class=\"keyword\">var</span> WebShow = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> (</div><div class=\"line\">       &lt;div&gt;</div><div class=\"line\">         &lt;WebName webname = &#123;this.props.wname&#125; /&gt;</div><div class=\"line\">         &lt;WebLink weblink = &#123;this.props.wlink&#125; /&gt;</div><div class=\"line\">       &lt;/div&gt;</div><div class=\"line\">     )</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t&lt;WebShow wname = '百度' wlink = 'http://www.baidu.com' /&gt;,</div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>…this.props<br>props提供的语法糖，可以将父组件中的全部 属性都复制给子组件<br>需求：定义一个组件Link,Link组件中只包含一个&lt; a &gt;, 我们不给&lt; a &gt;设置任何属性所有属性全部从父组件复制得到<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Link = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> &#123;<span class=\"attr\">...this.props</span>&#125;&gt;</span>&#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//渲染</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">name</span>=<span class=\"string\">'百度'</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://www.baidu.com'</span> /&gt;</span>,</div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</span></div></pre></td></tr></table></figure></p>"},{"title":"react入门05-复合组件","date":"2016-12-17T14:06:00.000Z","_content":"\n\n复合组件也被称为组合组件，创建多个组件合成一个组件\n定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接\n分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击<!--more--> \n```javascript\n//定义WebName组件\nvar WebName = React.createClass({\n\trender: function(){\n\treturn <h1>百度</h1>\n}\n})\n\n//定义WebLink组件\nvar WebLink = React.createClass({\n\trender: function(){\n\t\treturn <a href='http://www.baidu.com'>http://www.baidu.com</a>\n\t}\n})\n\n//定义WebShow组件\nvar WebShow = React.createClass({\nrender: function(){\nreturn (\n  <div>\n  \t<WebName />\n  \t<WebLink />\n  </div>\n)\n}\n})\nReactDOM.render(\n\t<WebShow />,\n\tdocument.getElementById('container')\n)\n```\n\n ","source":"_posts/react入门05-复合组件.md","raw":"---\ntitle: react入门05-复合组件\ndate: 2016-12-17 22:06:00\ncategories: \n  - 技术\n  - React\ntags: react \n---\n\n\n复合组件也被称为组合组件，创建多个组件合成一个组件\n定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接\n分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击<!--more--> \n```javascript\n//定义WebName组件\nvar WebName = React.createClass({\n\trender: function(){\n\treturn <h1>百度</h1>\n}\n})\n\n//定义WebLink组件\nvar WebLink = React.createClass({\n\trender: function(){\n\t\treturn <a href='http://www.baidu.com'>http://www.baidu.com</a>\n\t}\n})\n\n//定义WebShow组件\nvar WebShow = React.createClass({\nrender: function(){\nreturn (\n  <div>\n  \t<WebName />\n  \t<WebLink />\n  </div>\n)\n}\n})\nReactDOM.render(\n\t<WebShow />,\n\tdocument.getElementById('container')\n)\n```\n\n ","slug":"react入门05-复合组件","published":1,"updated":"2016-12-29T05:01:27.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7n002r24uukszu8uhi","content":"<p>复合组件也被称为组合组件，创建多个组件合成一个组件<br>定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接<br>分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击<a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义WebName组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebName = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义WebLink组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebLink = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://www.baidu.com'</span>&gt;</span>http://www.baidu.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义WebShow组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebShow = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">WebName</span> /&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">WebLink</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WebShow</span> /&gt;</span>,</span></div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>复合组件也被称为组合组件，创建多个组件合成一个组件<br>定义一个组件WebShow。功能：输出网站的名字和网址，网址是一个可以点击的链接<br>分析：定义一个组件WebName负责输出网站名字，定义组件WebLink显示网站的网址，并且可以点击","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义WebName组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebName = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义WebLink组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebLink = React.createClass(&#123;</div><div class=\"line\">\t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://www.baidu.com'</span>&gt;</span>http://www.baidu.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义WebShow组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> WebShow = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">WebName</span> /&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">WebLink</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WebShow</span> /&gt;</span>,</div><div class=\"line\">\tdocument.getElementById('container')</div><div class=\"line\">)</span></div></pre></td></tr></table></figure></p>"},{"title":"react入门09-表单Dome","date":"2016-12-21T05:29:35.000Z","_content":"\n在输入框输入的内容进行实时显示\n分析： 组件与用户交互过程中，存在状态的变化，即输入框的值\n<!--more--> \n\n\n\n```javascript\nvar Input = React.createClass({\n     \tgetInitialState: function() {\n     \t\treturn {\n     \t\t\tvalue: '请输入'\n     \t\t}\n     \t},\n     \t\n     \thandleChange: function(event) {\n     \t\t//通过event.target.value读取用户输入的值\n     \t\tthis.setState({\n     \t\t\tvalue: event.target.value\n     \t\t})\n     \t},\n     \trender: function() {\n     \t\tlet value = this.state.value\n     \t\treturn (\n     \t\t\t<div>\n     \t\t\t\t<input type='text' value={value} onChange={this.handleChange} />\n     \t\t\t\t<p>{value}</p>\n     \t\t\t</div>\n     \t\t)\n     \t}\n     })\n     \n     ReactDOM.render(\n     \t<Input />,\n     \tdocument.getElementById('container')\n     )\n```\n\n\n\n","source":"_posts/react入门09-表单Dome.md","raw":"---\ntitle: react入门09-表单Dome\ndate: 2016-12-21 13:29:35\ncategories: \n     - 技术\n     - React\ntags: react\n---\n\n在输入框输入的内容进行实时显示\n分析： 组件与用户交互过程中，存在状态的变化，即输入框的值\n<!--more--> \n\n\n\n```javascript\nvar Input = React.createClass({\n     \tgetInitialState: function() {\n     \t\treturn {\n     \t\t\tvalue: '请输入'\n     \t\t}\n     \t},\n     \t\n     \thandleChange: function(event) {\n     \t\t//通过event.target.value读取用户输入的值\n     \t\tthis.setState({\n     \t\t\tvalue: event.target.value\n     \t\t})\n     \t},\n     \trender: function() {\n     \t\tlet value = this.state.value\n     \t\treturn (\n     \t\t\t<div>\n     \t\t\t\t<input type='text' value={value} onChange={this.handleChange} />\n     \t\t\t\t<p>{value}</p>\n     \t\t\t</div>\n     \t\t)\n     \t}\n     })\n     \n     ReactDOM.render(\n     \t<Input />,\n     \tdocument.getElementById('container')\n     )\n```\n\n\n\n","slug":"react入门09-表单Dome","published":1,"updated":"2016-12-29T05:01:27.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7q002v24uu3nbj0sef","content":"<p>在输入框输入的内容进行实时显示<br>分析： 组件与用户交互过程中，存在状态的变化，即输入框的值<br><a id=\"more\"></a> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Input = React.createClass(&#123;</div><div class=\"line\">     \t<span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">     \t\t\t<span class=\"attr\">value</span>: <span class=\"string\">'请输入'</span></div><div class=\"line\">     \t\t&#125;</div><div class=\"line\">     \t&#125;,</div><div class=\"line\">     \t</div><div class=\"line\">     \t<span class=\"attr\">handleChange</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"comment\">//通过event.target.value读取用户输入的值</span></div><div class=\"line\">     \t\t<span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">     \t\t\t<span class=\"attr\">value</span>: event.target.value</div><div class=\"line\">     \t\t&#125;)</div><div class=\"line\">     \t&#125;,</div><div class=\"line\">     \t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"keyword\">let</span> value = <span class=\"keyword\">this</span>.state.value</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span> (</div><div class=\"line\">     \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">     \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class=\"line\">     \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">     \t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     \t\t)</div><div class=\"line\">     \t&#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     </div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span>,</div><div class=\"line\">     \tdocument.getElementById('container')</div><div class=\"line\">     )</div></pre></td></tr></table></figure>\n","excerpt":"<p>在输入框输入的内容进行实时显示<br>分析： 组件与用户交互过程中，存在状态的变化，即输入框的值<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Input = React.createClass(&#123;</div><div class=\"line\">     \t<span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">     \t\t\t<span class=\"attr\">value</span>: <span class=\"string\">'请输入'</span></div><div class=\"line\">     \t\t&#125;</div><div class=\"line\">     \t&#125;,</div><div class=\"line\">     \t</div><div class=\"line\">     \t<span class=\"attr\">handleChange</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"comment\">//通过event.target.value读取用户输入的值</span></div><div class=\"line\">     \t\t<span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">     \t\t\t<span class=\"attr\">value</span>: event.target.value</div><div class=\"line\">     \t\t&#125;)</div><div class=\"line\">     \t&#125;,</div><div class=\"line\">     \t<span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     \t\t<span class=\"keyword\">let</span> value = <span class=\"keyword\">this</span>.state.value</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span> (</div><div class=\"line\">     \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class=\"line\">     \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">     \t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     \t\t)</div><div class=\"line\">     \t&#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\">     </div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span>,</div><div class=\"line\">     \tdocument.getElementById('container')</div><div class=\"line\">     )</span></div></pre></td></tr></table></figure>"},{"title":"react入门08-state","date":"2016-12-21T05:29:35.000Z","_content":"\n  事件处理\n  react中的事件名称首字母小写，驼峰命名法\n  案例：定义一个组件，组件中包含一个button，给button绑定onClick事件\n<!--more--> \n\n\n\n```javascript\nvar MyButton = React.createClass({\nhandleClcik: function(){\n\tconsole.log('tst')\n},\n\nrender: function(){\n\treturn (\n\t\t<button onClick={this.handleClcik}>{this.props.buttonTitle}</button>\n\t)\n}\n})\t\n//渲染\nReactDOM.render(\n<MyButton buttonTitle='按钮' />,\ndocument.getElementById('container')\n)\n\n```\n\n  state 状态\n  props 组件自身的属性\n  this.state\n  需求：创建一个CheckButton组件，包含一个checkbox类型< input >\n  复选框在选中和未选中的两种状态下会显示不同的文字，退根据状态渲染\n\n\n```javascript\nvar CheckButton = React.createClass({\ngetInitialState: function() {\n  return {\n  \t//在这个对象中设置的属性将会存储在state中\n\t\t//默认状态，未选中\n  \tisCheck: false\n  }\n},\n\n//定义事件绑定的方法\nhandleClick: function(event) {\n  this.setState({\n  \t//修改状态值，通过this.state读取设置的状态值\n  \tisCheck: !this.state.isCheck\n  })\n},\nrender: function() {\n\t//根据状态值，设置显示的文字\n \t//在JSX语法中，不能直接使用if,使用三目短运算符\n  var text = this.state.isCheck ? '已选中' : '未选中';\n  return (\n  <div>\n   <input type=\"checkbox\" onChange={this.handleClick} />\n   {text}\n   </div>\n  );\n}\n});\n\n//渲染\nReactDOM.render(\n<CheckButton />,\ndocument.getElementById('container')\n);\n\n```\n\n\n\n","source":"_posts/react入门08-state.md","raw":"---\ntitle: react入门08-state\ndate: 2016-12-21 13:29:35\ncategories: \n  - 技术\n  - React\n\ntags: react\n---\n\n  事件处理\n  react中的事件名称首字母小写，驼峰命名法\n  案例：定义一个组件，组件中包含一个button，给button绑定onClick事件\n<!--more--> \n\n\n\n```javascript\nvar MyButton = React.createClass({\nhandleClcik: function(){\n\tconsole.log('tst')\n},\n\nrender: function(){\n\treturn (\n\t\t<button onClick={this.handleClcik}>{this.props.buttonTitle}</button>\n\t)\n}\n})\t\n//渲染\nReactDOM.render(\n<MyButton buttonTitle='按钮' />,\ndocument.getElementById('container')\n)\n\n```\n\n  state 状态\n  props 组件自身的属性\n  this.state\n  需求：创建一个CheckButton组件，包含一个checkbox类型< input >\n  复选框在选中和未选中的两种状态下会显示不同的文字，退根据状态渲染\n\n\n```javascript\nvar CheckButton = React.createClass({\ngetInitialState: function() {\n  return {\n  \t//在这个对象中设置的属性将会存储在state中\n\t\t//默认状态，未选中\n  \tisCheck: false\n  }\n},\n\n//定义事件绑定的方法\nhandleClick: function(event) {\n  this.setState({\n  \t//修改状态值，通过this.state读取设置的状态值\n  \tisCheck: !this.state.isCheck\n  })\n},\nrender: function() {\n\t//根据状态值，设置显示的文字\n \t//在JSX语法中，不能直接使用if,使用三目短运算符\n  var text = this.state.isCheck ? '已选中' : '未选中';\n  return (\n  <div>\n   <input type=\"checkbox\" onChange={this.handleClick} />\n   {text}\n   </div>\n  );\n}\n});\n\n//渲染\nReactDOM.render(\n<CheckButton />,\ndocument.getElementById('container')\n);\n\n```\n\n\n\n","slug":"react入门08-state","published":1,"updated":"2016-12-29T05:01:27.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn7w002y24uumrdq6fmp","content":"<p>  事件处理<br>  react中的事件名称首字母小写，驼峰命名法<br>  案例：定义一个组件，组件中包含一个button，给button绑定onClick事件<br><a id=\"more\"></a> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyButton = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">handleClcik</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'tst'</span>)</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (</div><div class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClcik&#125;</span>&gt;</span>&#123;this.props.buttonTitle&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)\t</div><div class=\"line\"><span class=\"comment\">//渲染</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyButton</span> <span class=\"attr\">buttonTitle</span>=<span class=\"string\">'按钮'</span> /&gt;</span>,</span></div><div class=\"line\">document.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>  state 状态<br>  props 组件自身的属性<br>  this.state<br>  需求：创建一个CheckButton组件，包含一个checkbox类型&lt; input &gt;<br>  复选框在选中和未选中的两种状态下会显示不同的文字，退根据状态渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CheckButton = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">  \t<span class=\"comment\">//在这个对象中设置的属性将会存储在state中</span></div><div class=\"line\">\t\t<span class=\"comment\">//默认状态，未选中</span></div><div class=\"line\">  \tisCheck: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义事件绑定的方法</span></div><div class=\"line\">handleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">  \t<span class=\"comment\">//修改状态值，通过this.state读取设置的状态值</span></div><div class=\"line\">  \tisCheck: !<span class=\"keyword\">this</span>.state.isCheck</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//根据状态值，设置显示的文字</span></div><div class=\"line\"> \t<span class=\"comment\">//在JSX语法中，不能直接使用if,使用三目短运算符</span></div><div class=\"line\">  <span class=\"keyword\">var</span> text = <span class=\"keyword\">this</span>.state.isCheck ? <span class=\"string\">'已选中'</span> : <span class=\"string\">'未选中'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleClick&#125;</span> /&gt;</span></div><div class=\"line\">   &#123;text&#125;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CheckButton</span> /&gt;</span>,</div><div class=\"line\">document.getElementById('container')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n","excerpt":"<p>  事件处理<br>  react中的事件名称首字母小写，驼峰命名法<br>  案例：定义一个组件，组件中包含一个button，给button绑定onClick事件<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyButton = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">handleClcik</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'tst'</span>)</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (</div><div class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClcik&#125;</span>&gt;</span>&#123;this.props.buttonTitle&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">\t)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)\t</div><div class=\"line\"><span class=\"comment\">//渲染</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyButton</span> <span class=\"attr\">buttonTitle</span>=<span class=\"string\">'按钮'</span> /&gt;</span>,</div><div class=\"line\">document.getElementById('container')</div><div class=\"line\">)</span></div></pre></td></tr></table></figure>\n<p>  state 状态<br>  props 组件自身的属性<br>  this.state<br>  需求：创建一个CheckButton组件，包含一个checkbox类型&lt; input &gt;<br>  复选框在选中和未选中的两种状态下会显示不同的文字，退根据状态渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CheckButton = React.createClass(&#123;</div><div class=\"line\"><span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">  \t<span class=\"comment\">//在这个对象中设置的属性将会存储在state中</span></div><div class=\"line\">\t\t<span class=\"comment\">//默认状态，未选中</span></div><div class=\"line\">  \tisCheck: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义事件绑定的方法</span></div><div class=\"line\">handleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">  \t<span class=\"comment\">//修改状态值，通过this.state读取设置的状态值</span></div><div class=\"line\">  \tisCheck: !<span class=\"keyword\">this</span>.state.isCheck</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//根据状态值，设置显示的文字</span></div><div class=\"line\"> \t<span class=\"comment\">//在JSX语法中，不能直接使用if,使用三目短运算符</span></div><div class=\"line\">  <span class=\"keyword\">var</span> text = <span class=\"keyword\">this</span>.state.isCheck ? <span class=\"string\">'已选中'</span> : <span class=\"string\">'未选中'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleClick&#125;</span> /&gt;</span></div><div class=\"line\">   &#123;text&#125;</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CheckButton</span> /&gt;</span>,</div><div class=\"line\">document.getElementById('container')</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>"},{"title":"《JavaScript 闯关记》之原型及原型链","date":"2016-12-21T14:29:28.000Z","toc":true,"_content":"\n\n原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 <code>__proto__</code> 属性指向创建它的构造函数的 prototype（原型）属性。原型链的作用是为了实现对象的继承，要理解原型链，需要先从函数对象、constructor、new、prototype、__proto__ 这五个概念入手。\n<!--more-->\n### 函数对象\n\n前面讲过，在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。下面示例代码对「普通对象」和「函数对象」进行了区分。\n\n普通对象：\n```javascript\nvar o1 = {};\nvar o2 = new Object();\n```\n### 函数对象：\n```javascript\nfunction f1(){};\nvar f2 = function(){};\nvar f3 = new Function('str','console.log(str)');\n```\n简单的说，凡是使用 function 关键字或 Function 构造函数创建的对象都是函数对象。而且，只有函数对象才拥有 prototype （原型）属性。\n\nconstructor 构造函数\n\n函数还有一种用法，就是把它作为构造函数使用。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而自定义对象类型的属性和方法。如下代码所示：\n```javascript\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        console.log(this.name);\n    };\n}\n\nvar person1 = new Person(\"Stone\", 28, \"Software Engineer\");\nvar person2 = new Person(\"Sophie\", 29, \"English Teacher\");\n```\n在这个例子中，我们创建了一个自定义构造函数 Person()，并通过该构造函数创建了两个普通对象 person1 和 person2，这两个普通对象均包含3个属性和1个方法。\n\n你应该注意到函数名 Person 使用的是大写字母 P。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他面向对象语言，主要是为了区别于 JavaScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。\n\n","source":"_posts/《JavaScript-闯关记》之原型及原型链.md","raw":"---\ntitle: 《JavaScript 闯关记》之原型及原型链\ndate: 2016-12-21 22:29:28\ncategories: \n  - 技术\n  - JavaScript\ntags: [JavaScript, 原型链]\ntoc: true\n---\n\n\n原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 <code>__proto__</code> 属性指向创建它的构造函数的 prototype（原型）属性。原型链的作用是为了实现对象的继承，要理解原型链，需要先从函数对象、constructor、new、prototype、__proto__ 这五个概念入手。\n<!--more-->\n### 函数对象\n\n前面讲过，在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。下面示例代码对「普通对象」和「函数对象」进行了区分。\n\n普通对象：\n```javascript\nvar o1 = {};\nvar o2 = new Object();\n```\n### 函数对象：\n```javascript\nfunction f1(){};\nvar f2 = function(){};\nvar f3 = new Function('str','console.log(str)');\n```\n简单的说，凡是使用 function 关键字或 Function 构造函数创建的对象都是函数对象。而且，只有函数对象才拥有 prototype （原型）属性。\n\nconstructor 构造函数\n\n函数还有一种用法，就是把它作为构造函数使用。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而自定义对象类型的属性和方法。如下代码所示：\n```javascript\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        console.log(this.name);\n    };\n}\n\nvar person1 = new Person(\"Stone\", 28, \"Software Engineer\");\nvar person2 = new Person(\"Sophie\", 29, \"English Teacher\");\n```\n在这个例子中，我们创建了一个自定义构造函数 Person()，并通过该构造函数创建了两个普通对象 person1 和 person2，这两个普通对象均包含3个属性和1个方法。\n\n你应该注意到函数名 Person 使用的是大写字母 P。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他面向对象语言，主要是为了区别于 JavaScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。\n\n","slug":"《JavaScript-闯关记》之原型及原型链","published":1,"updated":"2016-12-29T05:01:27.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn80003224uuk20xsgdl","content":"<p>原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 <code><strong>proto</strong></code> 属性指向创建它的构造函数的 prototype（原型）属性。原型链的作用是为了实现对象的继承，要理解原型链，需要先从函数对象、constructor、new、prototype、<strong>proto</strong> 这五个概念入手。<br><a id=\"more\"></a></p>\n<h3 id=\"函数对象\"><a href=\"#函数对象\" class=\"headerlink\" title=\"函数对象\"></a>函数对象</h3><p>前面讲过，在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。下面示例代码对「普通对象」和「函数对象」进行了区分。</p>\n<p>普通对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数对象：\"><a href=\"#函数对象：\" class=\"headerlink\" title=\"函数对象：\"></a>函数对象：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> f3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'str'</span>,<span class=\"string\">'console.log(str)'</span>);</div></pre></td></tr></table></figure>\n<p>简单的说，凡是使用 function 关键字或 Function 构造函数创建的对象都是函数对象。而且，只有函数对象才拥有 prototype （原型）属性。</p>\n<p>constructor 构造函数</p>\n<p>函数还有一种用法，就是把它作为构造函数使用。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而自定义对象类型的属性和方法。如下代码所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Stone\"</span>, <span class=\"number\">28</span>, <span class=\"string\">\"Software Engineer\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Sophie\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"English Teacher\"</span>);</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们创建了一个自定义构造函数 Person()，并通过该构造函数创建了两个普通对象 person1 和 person2，这两个普通对象均包含3个属性和1个方法。</p>\n<p>你应该注意到函数名 Person 使用的是大写字母 P。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他面向对象语言，主要是为了区别于 JavaScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。</p>\n","excerpt":"<p>原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 <code><strong>proto</strong></code> 属性指向创建它的构造函数的 prototype（原型）属性。原型链的作用是为了实现对象的继承，要理解原型链，需要先从函数对象、constructor、new、prototype、<strong>proto</strong> 这五个概念入手。<br>","more":"</p>\n<h3 id=\"函数对象\"><a href=\"#函数对象\" class=\"headerlink\" title=\"函数对象\"></a>函数对象</h3><p>前面讲过，在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。下面示例代码对「普通对象」和「函数对象」进行了区分。</p>\n<p>普通对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数对象：\"><a href=\"#函数对象：\" class=\"headerlink\" title=\"函数对象：\"></a>函数对象：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> f3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'str'</span>,<span class=\"string\">'console.log(str)'</span>);</div></pre></td></tr></table></figure>\n<p>简单的说，凡是使用 function 关键字或 Function 构造函数创建的对象都是函数对象。而且，只有函数对象才拥有 prototype （原型）属性。</p>\n<p>constructor 构造函数</p>\n<p>函数还有一种用法，就是把它作为构造函数使用。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而自定义对象类型的属性和方法。如下代码所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Stone\"</span>, <span class=\"number\">28</span>, <span class=\"string\">\"Software Engineer\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Sophie\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"English Teacher\"</span>);</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们创建了一个自定义构造函数 Person()，并通过该构造函数创建了两个普通对象 person1 和 person2，这两个普通对象均包含3个属性和1个方法。</p>\n<p>你应该注意到函数名 Person 使用的是大写字母 P。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他面向对象语言，主要是为了区别于 JavaScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。</p>"},{"title":"react入门10-组件的生命周期","date":"2016-12-21T07:35:04.000Z","_content":"\n\n\n生命周期介绍\n1.组件的生命周期可分为三个状态：\n\n<code>Mounting</code>: 组件挂载，已插入真实 DOM\n\n<code>Updataing</code>: 组件更新，正在被重新渲染\n<code>Unmounting</code>: 组件移出，已经移出真实 DOM<!--more-->\n\n\n2.组件的生命周期可分为四个阶段:\n创建、实例化、更新、销毁\n\n\n3.网易新闻列表页面\n\n1.Mounting/组件挂载相关：\n\n(1) <code>componentWillMount</code>\n\n组件将要挂载。在render之前执行，但仅执行一次，即使多次重复渲染该组件，或者改变了组件的<code>state</code>\n(2) <code>componentDidMount</code>\n组件已经挂载。在render之后执行，同一个组件重复渲染只执行一次\n\n<p></p>\n2.<code>Updataing</code>/组件更新相关\n\n(1) <code>componentWillReceiveProps</code>(object nextProps)\n\n已加载组件收到新的props之前调用，注意组件初始化渲染时则不会执行\n\n(2) <code>shouldComponentUpdate</code> (object nextProps, object nextState)\n\n组件判断是滞重新渲染时调用。该接口实际是在组件接收到了新的 props 或者新的<code>state</code>的时候 会立即调用，\n然后通过返回\n\n(3) <code>componentWillUpdata</code>(object nextProps, object nextState)\n组件将要更新\n\n(4) <code>componentDidUpdata</code>(object prevProps, object prevState)\n组件已经更新\n\n\n3.<code>Unmounting</code>/组件移除相关\t\n\n(1) <code>componentWillUnmout</code>\n\n在组件要被移除之前的时间点触发，可以利用该方法执行一些必要的清理组件将要移除\n\n\n4.生命周期中与<code>props</code>和<code>state</code>相关\n\n(1) <code>getDefaultProps</code> 设置props属性默认值\n\n(2) <code>getInitialState</code> 升值state属性初始值\n\n\n```javascript\n//生命周期各阶段介绍\nvar Demo = React.createClass({\n  /*\n   一、创建阶段\n   流程：只调用getDefaultProps方法\n */\n\n  getDefaultProps: function() {\n    //创建类的时候被调用，设置this.prpos的默认值\n    console.log('getDefaultProps')\n    return {}\n  },\n\n  /*\n\t二、实例化阶段\n     流程：\n     getInitalState\n     componentWillMount\n     render\n     componentDidMount\n  */\n\n  getInitialState: function() {\n    //设置this.state的默认值\n    console.log('getInitalState')\n    return null\n  },\n  componentWillMount: function() {\n    //在render之前调用\n    console.log('componentWillMount')\n  },\n  render: function() {\n    //渲染并返回一个虚拟DOM\n    console.log('render')\n    return <div>Hello React</div>\n  },\n\n  componentDidMount: function() {\n    //在render之后调用\n    //在该方法中，React会使用render方法返回的虚拟DOM对象创建真实的DOM结构\n    console.log('componentDidMount')\n  },\n\n  /*\n\t三、更新阶段\n     流程：\n     componentWillReceiveProps\n     shouldComponentUpdate  如果返回值是false 后三个不执行\n     componentWillUpdate\n     render\n     componentDidUpata\n  */\n  componentWillReceiveProps: function() {\n    console.log('componentWillReceiveProps')\n  },\n  shouldComponentUpdate: function() {\n    //是否需要更新\n    console.log('shouldComponentUpdate')\n    return true\n  },\n  componentWillUpdate: function() {\n    console.log('componentWillUpdate')\n  },\n  componentDidUpata: function() {\n    console.log('componentDidUpata')\n  },\n\n  /*\n 四、销毁阶段\n 流程： \n componentWillUnmount\n */\n  componentWillUnmount: function() {\n    console.log('componentWillUnmount')\n  }\n})\n//第一次创建并加载组件\nReactDOM.render(\n  <Demo />,\n  document.getElementById('container')\n)\n//更新渲染组件\nReactDOM.render(\n  <Demo />,\n  document.getElementById('container')\n)\n//移出组件\nReactDOM.unmountComponentAtNode(document.getElementById('container'))\n```\n\n","source":"_posts/react入门10-组件的生命周期.md","raw":"---\ntitle: react入门10-组件的生命周期\ndate: 2016-12-21 15:35:04\ncategories: \n  - 技术\n  - React\ntags: [react, 生命周期]\n---\n\n\n\n生命周期介绍\n1.组件的生命周期可分为三个状态：\n\n<code>Mounting</code>: 组件挂载，已插入真实 DOM\n\n<code>Updataing</code>: 组件更新，正在被重新渲染\n<code>Unmounting</code>: 组件移出，已经移出真实 DOM<!--more-->\n\n\n2.组件的生命周期可分为四个阶段:\n创建、实例化、更新、销毁\n\n\n3.网易新闻列表页面\n\n1.Mounting/组件挂载相关：\n\n(1) <code>componentWillMount</code>\n\n组件将要挂载。在render之前执行，但仅执行一次，即使多次重复渲染该组件，或者改变了组件的<code>state</code>\n(2) <code>componentDidMount</code>\n组件已经挂载。在render之后执行，同一个组件重复渲染只执行一次\n\n<p></p>\n2.<code>Updataing</code>/组件更新相关\n\n(1) <code>componentWillReceiveProps</code>(object nextProps)\n\n已加载组件收到新的props之前调用，注意组件初始化渲染时则不会执行\n\n(2) <code>shouldComponentUpdate</code> (object nextProps, object nextState)\n\n组件判断是滞重新渲染时调用。该接口实际是在组件接收到了新的 props 或者新的<code>state</code>的时候 会立即调用，\n然后通过返回\n\n(3) <code>componentWillUpdata</code>(object nextProps, object nextState)\n组件将要更新\n\n(4) <code>componentDidUpdata</code>(object prevProps, object prevState)\n组件已经更新\n\n\n3.<code>Unmounting</code>/组件移除相关\t\n\n(1) <code>componentWillUnmout</code>\n\n在组件要被移除之前的时间点触发，可以利用该方法执行一些必要的清理组件将要移除\n\n\n4.生命周期中与<code>props</code>和<code>state</code>相关\n\n(1) <code>getDefaultProps</code> 设置props属性默认值\n\n(2) <code>getInitialState</code> 升值state属性初始值\n\n\n```javascript\n//生命周期各阶段介绍\nvar Demo = React.createClass({\n  /*\n   一、创建阶段\n   流程：只调用getDefaultProps方法\n */\n\n  getDefaultProps: function() {\n    //创建类的时候被调用，设置this.prpos的默认值\n    console.log('getDefaultProps')\n    return {}\n  },\n\n  /*\n\t二、实例化阶段\n     流程：\n     getInitalState\n     componentWillMount\n     render\n     componentDidMount\n  */\n\n  getInitialState: function() {\n    //设置this.state的默认值\n    console.log('getInitalState')\n    return null\n  },\n  componentWillMount: function() {\n    //在render之前调用\n    console.log('componentWillMount')\n  },\n  render: function() {\n    //渲染并返回一个虚拟DOM\n    console.log('render')\n    return <div>Hello React</div>\n  },\n\n  componentDidMount: function() {\n    //在render之后调用\n    //在该方法中，React会使用render方法返回的虚拟DOM对象创建真实的DOM结构\n    console.log('componentDidMount')\n  },\n\n  /*\n\t三、更新阶段\n     流程：\n     componentWillReceiveProps\n     shouldComponentUpdate  如果返回值是false 后三个不执行\n     componentWillUpdate\n     render\n     componentDidUpata\n  */\n  componentWillReceiveProps: function() {\n    console.log('componentWillReceiveProps')\n  },\n  shouldComponentUpdate: function() {\n    //是否需要更新\n    console.log('shouldComponentUpdate')\n    return true\n  },\n  componentWillUpdate: function() {\n    console.log('componentWillUpdate')\n  },\n  componentDidUpata: function() {\n    console.log('componentDidUpata')\n  },\n\n  /*\n 四、销毁阶段\n 流程： \n componentWillUnmount\n */\n  componentWillUnmount: function() {\n    console.log('componentWillUnmount')\n  }\n})\n//第一次创建并加载组件\nReactDOM.render(\n  <Demo />,\n  document.getElementById('container')\n)\n//更新渲染组件\nReactDOM.render(\n  <Demo />,\n  document.getElementById('container')\n)\n//移出组件\nReactDOM.unmountComponentAtNode(document.getElementById('container'))\n```\n\n","slug":"react入门10-组件的生命周期","published":1,"updated":"2017-01-06T06:44:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn83003524uuu9cy4vyx","content":"<p>生命周期介绍<br>1.组件的生命周期可分为三个状态：</p>\n<p><code>Mounting</code>: 组件挂载，已插入真实 DOM</p>\n<p><code>Updataing</code>: 组件更新，正在被重新渲染<br><code>Unmounting</code>: 组件移出，已经移出真实 DOM<a id=\"more\"></a></p>\n<p>2.组件的生命周期可分为四个阶段:<br>创建、实例化、更新、销毁</p>\n<p>3.网易新闻列表页面</p>\n<p>1.Mounting/组件挂载相关：</p>\n<p>(1) <code>componentWillMount</code></p>\n<p>组件将要挂载。在render之前执行，但仅执行一次，即使多次重复渲染该组件，或者改变了组件的<code>state</code><br>(2) <code>componentDidMount</code><br>组件已经挂载。在render之后执行，同一个组件重复渲染只执行一次</p>\n<p></p><p></p><br>2.<code>Updataing</code>/组件更新相关<p></p>\n<p>(1) <code>componentWillReceiveProps</code>(object nextProps)</p>\n<p>已加载组件收到新的props之前调用，注意组件初始化渲染时则不会执行</p>\n<p>(2) <code>shouldComponentUpdate</code> (object nextProps, object nextState)</p>\n<p>组件判断是滞重新渲染时调用。该接口实际是在组件接收到了新的 props 或者新的<code>state</code>的时候 会立即调用，<br>然后通过返回</p>\n<p>(3) <code>componentWillUpdata</code>(object nextProps, object nextState)<br>组件将要更新</p>\n<p>(4) <code>componentDidUpdata</code>(object prevProps, object prevState)<br>组件已经更新</p>\n<p>3.<code>Unmounting</code>/组件移除相关    </p>\n<p>(1) <code>componentWillUnmout</code></p>\n<p>在组件要被移除之前的时间点触发，可以利用该方法执行一些必要的清理组件将要移除</p>\n<p>4.生命周期中与<code>props</code>和<code>state</code>相关</p>\n<p>(1) <code>getDefaultProps</code> 设置props属性默认值</p>\n<p>(2) <code>getInitialState</code> 升值state属性初始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生命周期各阶段介绍</span></div><div class=\"line\"><span class=\"keyword\">var</span> Demo = React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">   一、创建阶段</div><div class=\"line\">   流程：只调用getDefaultProps方法</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">  getDefaultProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建类的时候被调用，设置this.prpos的默认值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getDefaultProps'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">\t二、实例化阶段</div><div class=\"line\">     流程：</div><div class=\"line\">     getInitalState</div><div class=\"line\">     componentWillMount</div><div class=\"line\">     render</div><div class=\"line\">     componentDidMount</div><div class=\"line\">  */</div><div class=\"line\"></div><div class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//设置this.state的默认值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getInitalState'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//在render之前调用</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillMount'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//渲染并返回一个虚拟DOM</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">componentDidMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//在render之后调用</span></div><div class=\"line\">    <span class=\"comment\">//在该方法中，React会使用render方法返回的虚拟DOM对象创建真实的DOM结构</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">\t三、更新阶段</div><div class=\"line\">     流程：</div><div class=\"line\">     componentWillReceiveProps</div><div class=\"line\">     shouldComponentUpdate  如果返回值是false 后三个不执行</div><div class=\"line\">     componentWillUpdate</div><div class=\"line\">     render</div><div class=\"line\">     componentDidUpata</div><div class=\"line\">  */</div><div class=\"line\">  componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillReceiveProps'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">shouldComponentUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//是否需要更新</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'shouldComponentUpdate'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUpdate'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentDidUpata</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidUpata'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\"> 四、销毁阶段</div><div class=\"line\"> 流程： </div><div class=\"line\"> componentWillUnmount</div><div class=\"line\"> */</div><div class=\"line\">  componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUnmount'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//第一次创建并加载组件</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span>,</span></div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div><div class=\"line\">//更新渲染组件</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span>,</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div><div class=\"line\">//移出组件</div><div class=\"line\">ReactDOM.unmountComponentAtNode(document.getElementById('container'))</div></pre></td></tr></table></figure>\n","excerpt":"<p>生命周期介绍<br>1.组件的生命周期可分为三个状态：</p>\n<p><code>Mounting</code>: 组件挂载，已插入真实 DOM</p>\n<p><code>Updataing</code>: 组件更新，正在被重新渲染<br><code>Unmounting</code>: 组件移出，已经移出真实 DOM","more":"</p>\n<p>2.组件的生命周期可分为四个阶段:<br>创建、实例化、更新、销毁</p>\n<p>3.网易新闻列表页面</p>\n<p>1.Mounting/组件挂载相关：</p>\n<p>(1) <code>componentWillMount</code></p>\n<p>组件将要挂载。在render之前执行，但仅执行一次，即使多次重复渲染该组件，或者改变了组件的<code>state</code><br>(2) <code>componentDidMount</code><br>组件已经挂载。在render之后执行，同一个组件重复渲染只执行一次</p>\n<p><p></p><br>2.<code>Updataing</code>/组件更新相关</p>\n<p>(1) <code>componentWillReceiveProps</code>(object nextProps)</p>\n<p>已加载组件收到新的props之前调用，注意组件初始化渲染时则不会执行</p>\n<p>(2) <code>shouldComponentUpdate</code> (object nextProps, object nextState)</p>\n<p>组件判断是滞重新渲染时调用。该接口实际是在组件接收到了新的 props 或者新的<code>state</code>的时候 会立即调用，<br>然后通过返回</p>\n<p>(3) <code>componentWillUpdata</code>(object nextProps, object nextState)<br>组件将要更新</p>\n<p>(4) <code>componentDidUpdata</code>(object prevProps, object prevState)<br>组件已经更新</p>\n<p>3.<code>Unmounting</code>/组件移除相关    </p>\n<p>(1) <code>componentWillUnmout</code></p>\n<p>在组件要被移除之前的时间点触发，可以利用该方法执行一些必要的清理组件将要移除</p>\n<p>4.生命周期中与<code>props</code>和<code>state</code>相关</p>\n<p>(1) <code>getDefaultProps</code> 设置props属性默认值</p>\n<p>(2) <code>getInitialState</code> 升值state属性初始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生命周期各阶段介绍</span></div><div class=\"line\"><span class=\"keyword\">var</span> Demo = React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">   一、创建阶段</div><div class=\"line\">   流程：只调用getDefaultProps方法</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\">  getDefaultProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建类的时候被调用，设置this.prpos的默认值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getDefaultProps'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">\t二、实例化阶段</div><div class=\"line\">     流程：</div><div class=\"line\">     getInitalState</div><div class=\"line\">     componentWillMount</div><div class=\"line\">     render</div><div class=\"line\">     componentDidMount</div><div class=\"line\">  */</span></div><div class=\"line\"></div><div class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//设置this.state的默认值</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getInitalState'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//在render之前调用</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillMount'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//渲染并返回一个虚拟DOM</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">componentDidMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//在render之后调用</span></div><div class=\"line\">    <span class=\"comment\">//在该方法中，React会使用render方法返回的虚拟DOM对象创建真实的DOM结构</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidMount'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">\t三、更新阶段</div><div class=\"line\">     流程：</div><div class=\"line\">     componentWillReceiveProps</div><div class=\"line\">     shouldComponentUpdate  如果返回值是false 后三个不执行</div><div class=\"line\">     componentWillUpdate</div><div class=\"line\">     render</div><div class=\"line\">     componentDidUpata</div><div class=\"line\">  */</span></div><div class=\"line\">  componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillReceiveProps'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">shouldComponentUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//是否需要更新</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'shouldComponentUpdate'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUpdate'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentDidUpata</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentDidUpata'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\"> 四、销毁阶段</div><div class=\"line\"> 流程： </div><div class=\"line\"> componentWillUnmount</div><div class=\"line\"> */</span></div><div class=\"line\">  componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUnmount'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//第一次创建并加载组件</span></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span>,</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div><div class=\"line\">//更新渲染组件</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span>,</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div><div class=\"line\">//移出组件</div><div class=\"line\">ReactDOM.unmountComponentAtNode(document.getElementById('container'))</span></div></pre></td></tr></table></figure>"},{"title":"人在囧途之火车站","date":"2015-08-29T02:04:00.000Z","_content":"\n本以为在暴风雨来临之际正好赶到检票处是多么的幸运，殊不知恶运正随着突如其来的暴风雨一步步接近。进站后的时间大约是六点四十几分，原本是19：21乘坐K317次列车到西安，然后22：10乘坐T224次列车到重庆，算来便是再过三个多小时，<!--more-->就可以坐上回重庆的T224次列车，然后在卧铺上安心睡大觉，也许一觉醒来就到家了。这样整个旅行可以说是非常顺利、完美的。然尔就是这场暴风雨，打乱了之后的所有行程。导致我们不能如期回家、不能安心睡大觉，还得整夜奔波劳累。\n\n在候车室里看着外面那倾盆大雨，我心里还在想，雨这么大，会不会导致火车晚点呢。果不其然，我们前面一班列车本该在18：42到站的，可都快七点了还没开始检票，一会儿显示屏上就显示晚点30分钟，此时心中还自喜幸好不是我们那班车晚点，但心里又总有一种不安，觉得我们的那班车也不会准时到达。不一会儿，我们乘坐的K317次列车也在显示屏上显示晚点30分钟，原本在西安站从K317次列车换乘到T224次列车，中间共有1个小时的时间。如果真的只晚点30分钟，再准时到达西安站，下车后动作速度点，还是可以赶上下一班T224次列车的。\n\n事实却并非如此，后来到达华山站的所有列车全部晚点，而且晚点时间未知，这下完蛋了吧，肯定赶不上回重庆的T224次列车了。不过心想既然是因为下暴雨导致晚点，那到西安站的车肯定也会晚点呀！我们就一直在网上查询K317和T224这两班的列车的实时动态，后来查到T244确实也晚点了，心里又总算平静了些，有了一丝希望。同时也希望两班车晚点的时间可以相对应，这样即使是晚点，至少我们还可以坐到回重庆的火车。但事实并不会同想象一般的进展下去。\n\n在华山火车站一直等到十一点才来了一班开往西安的列车，而且还不是我们买了票的那班K317次列车，准备找车站工作人员改签到已经到达华山的这班列车，后来工作人员说，只要是到西安站就全部可以上车，总算是坐上车了。这个时候再来查询T224次列车实时动态，显示的是22：58已经到站了，由于之前查的好多次列车到站信息并不准确，我多么希望T224次列车22:58到站的信息也不准确。\n\n华山到西安的正常车时是1小时38分钟，但由于暴雨，开了两个多小时，到达西安站时快凌晨两点了。出了站首先就跑到候车室外面，把显示屏上的列车扫描了一遍又遍，就是没有看到T224应该在哪个候车室。唉！估计是已经开走了吧，只能到退票处去退票了。晚点的火车比较多，这个时候了退票窗口都还有三个，每个窗口都排着长长的队，好不容易排到了，准备退票那一刻，心里还是希望T224次列车晚点还没到站。\n\n于是问了下退票员：“请问T224次列车开走了吗？“\n\n退票员的回答是：“不知道，我们没接到通知，你们可以去服务大厅问一下”\n\n让她帮忙查下，她又说她查不到。我去，都是火车站的，退票处竟然不能查火车到站情况，这信息也太不互通了吧！真是坑呀！\n\n好吧！暂时决定先不退票，又急忙跑去候车室找到服务大厅的工作人员问道：”T224次列车是否已到站开走，或是晚点还没到站“\n\n她们又说不知道，说是要找T224进站口的工作人员问才知道，有一同事找到了T224进站口的工作人员，确认该车已经开走，最后一丝希望被磨灭。\n\n这时我们看到显示屏上K544也是开往重庆的，而且正显示着晚点，那就说明K544还没到站。\n\n我们决定将T224改签到K544，这个时候选择改签，大家都明白，肯定是没位置的。四处奔波了两天一夜，已经非常疲惫了，最后还得站回家。但经过商量还是一致同意改签。\n\n又跑到售票厅找改签的地方，售票厅的人说，改签在另一方，还在候车室的那边，又是跑着到了改签窗口，改签的窗口明明写的是中转，签字（这跟改签有关系么）\n\n又一场悲剧发生了，改签的人说，我们的票是23号的，无法改到24号，只能退了票重新买。\n\n好吧！我们又跑去退票，跑着跑着谢叔叔突然说道，重新买票钱都不够了，可怎么买呢，再一想，退了票不就有钱了嘛。\n\n于是我去排退票窗口，谢叔叔排售票窗口，我硬是厚着脸皮跑到前面去插队求别人让我先退，因为我们真的特别急，好人还是多，前面人的同意让我先退，好不容易退了票，结果退票的钱是返回到卡上。\n\n我又去排售票窗口，谢叔叔去找银行取钱，好不容易队也排到了，钱也取到了，售票员说已经过了列车的到站时间，无法购买T544次列车的票；\n\n我说，这班车明明就晚点了，根本还没到站，为什么就不能买呢，说多了都是泪，总之就是不能买到票了。\n在华山到西安的路上我就在查，西安到重庆如何中转比较快、方便。\n\n方案一：西安到成都，成都到重庆，花费的时间太久了，可西安到成都车程太长；\n方案二：西安到达州，达州到重庆，时间还算合理。\n方案三：坐汽车，汽车在网上查的结果是11点才有车，而且要坐十三四个小时；\n传姐也在查中转的方案，\n方案四：西安到安康，安康到重庆，时间还算合理。\n方案五：坐飞机，一查机票太贵了，根本伤不起。\n\n问题是不管是西安到达州，还是西安到安康。都要到西安南去坐车，西安到西安南有一到两个小时的车程。\n\n后来又查到早上6：02西安南有开往重庆的一班列车，果断决定到西安南去，出租车都找好了，正准备上车了。\n\n这时我说：“车票是在这边先买起，还是到了西安南再买呢”。为了保险起见，决定先把车票买好再到西安南，我和传姐又跑去售票厅，这个时候只剩下一个窗口在售票了，人也不多了。\n\n我说：“要五张西安南到重庆的票”；\n\n售票员说：“你是要买下午的吗？”\n\n我说：“早上6点多不是有一班吗？”\n\n售票员说：“早上的已经没票了”\n\n刚刚在12306查询的明明还剩那么多票，又被12306给坑了。\n\n还好没有直接去西安南，我和传姐又跑过去告诉他们没票了，于是决定坐汽车回家，先去汽车站再说吧！我们又坐出租车到了汽车站。\n从小到大也坐过无数次车，也遇到过晚点。不管是我还是他们恐怕都从未在车站有过这般狼狈、落寞的经历。这种时候内心的情绪已经无法用语言来形容了。铁路局真TMD坑，可我们以是明知是坑，又要不断围着他转，哪怕再是掉下去。\n达到汽车站是凌晨三点过，经打听汽车站是六点才开门，这个时间点汽车站四处冷冷清清，偶尔吹过一丝丝凉风。谢叔叔说，我们已经不是难民可以形容的了，是流民。\n\n后来看到还有个叔叔也在车站门口等车，他是到安康的（本地人），那叔叔告诉我们，好像这里到重庆的汽车不多，有不有都还说不一定呢。他说我们可以先坐汽车到安康，然后安康到重庆的火车特别多。\n\n我们也在网上查了，安康到重庆的列车确实很多，9：37（ K1581）是上午最晚的一班，16：06 （K663）是下午最早的一班。上午最晚的K1581是赶不到了。只能坐下午晚早的K663那班了。\n我们在汽车站对面找了个可以坐的地方、此地摆了几排学校食堂用的的那种桌子与板凳连体的餐桌。小坐一会儿后，我决定躺下睡觉，躺在这长1米宽约15厘米的铁板凳上，我居然也可以睡得很香。谢叔叔过来看到说，这样都能睡，简直是到了一种境界呀！后来他自己也这样趟着睡了，睡了一会儿后，被冷醒了，我再把外套裹紧了继续睡。\n\n五点多的时候，被黑车司机的拉客声吵醒，听到黑车司机在喊：“到安康和什么地儿呀！“ 后来我们选择了搭黑车，因为搭黑车的话，只要路上顺利还可以赶上午K1581那班车，一辆七座的面包车，加上司机一共坐了十一个人，上车后，已经顾不得挤不挤了，又开始埋头大睡。睡醒后已经七点了，也不知还有多久才到，后来他们说还有一个多小时才能到安康，心里挺着急的，心想着还能赶上K1581吗？我又开始查票，网上显示还剩10张硬卧和无座了，08:27 K589这班车的卧铺和硬座票都还挺多，但这班车肯定是赶不上了，我开始预定k1581的卧铺，系统提示余票不足，难道又被忽悠了，反正都订不到卧铺了，也没有在网上订的必要了，直接去车站订吧，万一剩下的10张票在网上订不了是怕订了赶不到车站，才提示余票不足。一会儿去车站说不定可以定到卧铺呢，但愿到站后我的这一丝希望不要又被磨灭。\n八点十几分的时候，到了一个加油站，黑车司机说已经到了，让我们全部下车。然后叫我们去路边拦出租车到火车站，他们去路边拦车，这个位置貌似并不好打车。眼看时间一分一秒的过去，我们恳求黑车司机把我们送到火车站，刚开始他是拒绝的，找各种理由不送，我们一双双无助的眼神望着他、恳求他。加上谢叔叔的三寸不烂之舌，他终于答应送我们到火车站。这几天不管是在西安还是华山，还是这里遇到的司机都挺好的，真正感受到了北方人的耿直。\n\n上车时还觉得他人挺好，答应送我们，下车才知道又是一坑货。他让我们在出站口下了车，出站口离进站口还特别远，他反正是开车，为什么就不把我们送到进站口呢，而且进站口也不是不能停车。但不管怎样，也还是得谢谢黑车司机，如果他不答应送我们到火车站，说不定没有搭到车呢！\n\n又是一路跑到进站口，找到售票口，买票的人又是特别多，队又排了好长，我又一次厚着脸皮去插队，好人还是多，当时是个女生，我给她说明情况后她同意让我先买，结果售票员说我插队，居然不卖。真是急死人了，我又跑到后面排队去，排到窗口后，我问还有没有K1581的卧铺，售票员说还挺多，毫不犹豫的要了5张，售票员说但位置没有挨着的，还要吗？这个时候哪里还顾得挨不挨着，能买到卧铺已经是万幸了，售票员还是多好的，帮我们把位置调到尽量挨在一起，分别在2，3节车厢。拿到票的那一刻，别提多高兴了。几经波折，终于可以回家了。\n\n上车后当然又是倒头大睡了。 下午四点半终于回到了重庆，当达到重庆那一刻，仿佛一切都尘埃落定，昨晚什么事都没发生过一样。回家洗漱后，很快就入睡了，感觉整个身体都是沉重的，想起都起不来，已经好久没有过如此好的睡眠了。一觉睡到闹钟响，关了闹钟又接着睡，可又还得上班，不能任性的睡到自然醒，还是得起床准备上班，一切又恢复了正常。\n","source":"_posts/人在囧途之火车站.md","raw":"---\ntitle: 人在囧途之火车站\ndate: 2015-8-29 10:04\ntags: 人在囧途\ncategories: 生活\npermalink: \n---\n\n本以为在暴风雨来临之际正好赶到检票处是多么的幸运，殊不知恶运正随着突如其来的暴风雨一步步接近。进站后的时间大约是六点四十几分，原本是19：21乘坐K317次列车到西安，然后22：10乘坐T224次列车到重庆，算来便是再过三个多小时，<!--more-->就可以坐上回重庆的T224次列车，然后在卧铺上安心睡大觉，也许一觉醒来就到家了。这样整个旅行可以说是非常顺利、完美的。然尔就是这场暴风雨，打乱了之后的所有行程。导致我们不能如期回家、不能安心睡大觉，还得整夜奔波劳累。\n\n在候车室里看着外面那倾盆大雨，我心里还在想，雨这么大，会不会导致火车晚点呢。果不其然，我们前面一班列车本该在18：42到站的，可都快七点了还没开始检票，一会儿显示屏上就显示晚点30分钟，此时心中还自喜幸好不是我们那班车晚点，但心里又总有一种不安，觉得我们的那班车也不会准时到达。不一会儿，我们乘坐的K317次列车也在显示屏上显示晚点30分钟，原本在西安站从K317次列车换乘到T224次列车，中间共有1个小时的时间。如果真的只晚点30分钟，再准时到达西安站，下车后动作速度点，还是可以赶上下一班T224次列车的。\n\n事实却并非如此，后来到达华山站的所有列车全部晚点，而且晚点时间未知，这下完蛋了吧，肯定赶不上回重庆的T224次列车了。不过心想既然是因为下暴雨导致晚点，那到西安站的车肯定也会晚点呀！我们就一直在网上查询K317和T224这两班的列车的实时动态，后来查到T244确实也晚点了，心里又总算平静了些，有了一丝希望。同时也希望两班车晚点的时间可以相对应，这样即使是晚点，至少我们还可以坐到回重庆的火车。但事实并不会同想象一般的进展下去。\n\n在华山火车站一直等到十一点才来了一班开往西安的列车，而且还不是我们买了票的那班K317次列车，准备找车站工作人员改签到已经到达华山的这班列车，后来工作人员说，只要是到西安站就全部可以上车，总算是坐上车了。这个时候再来查询T224次列车实时动态，显示的是22：58已经到站了，由于之前查的好多次列车到站信息并不准确，我多么希望T224次列车22:58到站的信息也不准确。\n\n华山到西安的正常车时是1小时38分钟，但由于暴雨，开了两个多小时，到达西安站时快凌晨两点了。出了站首先就跑到候车室外面，把显示屏上的列车扫描了一遍又遍，就是没有看到T224应该在哪个候车室。唉！估计是已经开走了吧，只能到退票处去退票了。晚点的火车比较多，这个时候了退票窗口都还有三个，每个窗口都排着长长的队，好不容易排到了，准备退票那一刻，心里还是希望T224次列车晚点还没到站。\n\n于是问了下退票员：“请问T224次列车开走了吗？“\n\n退票员的回答是：“不知道，我们没接到通知，你们可以去服务大厅问一下”\n\n让她帮忙查下，她又说她查不到。我去，都是火车站的，退票处竟然不能查火车到站情况，这信息也太不互通了吧！真是坑呀！\n\n好吧！暂时决定先不退票，又急忙跑去候车室找到服务大厅的工作人员问道：”T224次列车是否已到站开走，或是晚点还没到站“\n\n她们又说不知道，说是要找T224进站口的工作人员问才知道，有一同事找到了T224进站口的工作人员，确认该车已经开走，最后一丝希望被磨灭。\n\n这时我们看到显示屏上K544也是开往重庆的，而且正显示着晚点，那就说明K544还没到站。\n\n我们决定将T224改签到K544，这个时候选择改签，大家都明白，肯定是没位置的。四处奔波了两天一夜，已经非常疲惫了，最后还得站回家。但经过商量还是一致同意改签。\n\n又跑到售票厅找改签的地方，售票厅的人说，改签在另一方，还在候车室的那边，又是跑着到了改签窗口，改签的窗口明明写的是中转，签字（这跟改签有关系么）\n\n又一场悲剧发生了，改签的人说，我们的票是23号的，无法改到24号，只能退了票重新买。\n\n好吧！我们又跑去退票，跑着跑着谢叔叔突然说道，重新买票钱都不够了，可怎么买呢，再一想，退了票不就有钱了嘛。\n\n于是我去排退票窗口，谢叔叔排售票窗口，我硬是厚着脸皮跑到前面去插队求别人让我先退，因为我们真的特别急，好人还是多，前面人的同意让我先退，好不容易退了票，结果退票的钱是返回到卡上。\n\n我又去排售票窗口，谢叔叔去找银行取钱，好不容易队也排到了，钱也取到了，售票员说已经过了列车的到站时间，无法购买T544次列车的票；\n\n我说，这班车明明就晚点了，根本还没到站，为什么就不能买呢，说多了都是泪，总之就是不能买到票了。\n在华山到西安的路上我就在查，西安到重庆如何中转比较快、方便。\n\n方案一：西安到成都，成都到重庆，花费的时间太久了，可西安到成都车程太长；\n方案二：西安到达州，达州到重庆，时间还算合理。\n方案三：坐汽车，汽车在网上查的结果是11点才有车，而且要坐十三四个小时；\n传姐也在查中转的方案，\n方案四：西安到安康，安康到重庆，时间还算合理。\n方案五：坐飞机，一查机票太贵了，根本伤不起。\n\n问题是不管是西安到达州，还是西安到安康。都要到西安南去坐车，西安到西安南有一到两个小时的车程。\n\n后来又查到早上6：02西安南有开往重庆的一班列车，果断决定到西安南去，出租车都找好了，正准备上车了。\n\n这时我说：“车票是在这边先买起，还是到了西安南再买呢”。为了保险起见，决定先把车票买好再到西安南，我和传姐又跑去售票厅，这个时候只剩下一个窗口在售票了，人也不多了。\n\n我说：“要五张西安南到重庆的票”；\n\n售票员说：“你是要买下午的吗？”\n\n我说：“早上6点多不是有一班吗？”\n\n售票员说：“早上的已经没票了”\n\n刚刚在12306查询的明明还剩那么多票，又被12306给坑了。\n\n还好没有直接去西安南，我和传姐又跑过去告诉他们没票了，于是决定坐汽车回家，先去汽车站再说吧！我们又坐出租车到了汽车站。\n从小到大也坐过无数次车，也遇到过晚点。不管是我还是他们恐怕都从未在车站有过这般狼狈、落寞的经历。这种时候内心的情绪已经无法用语言来形容了。铁路局真TMD坑，可我们以是明知是坑，又要不断围着他转，哪怕再是掉下去。\n达到汽车站是凌晨三点过，经打听汽车站是六点才开门，这个时间点汽车站四处冷冷清清，偶尔吹过一丝丝凉风。谢叔叔说，我们已经不是难民可以形容的了，是流民。\n\n后来看到还有个叔叔也在车站门口等车，他是到安康的（本地人），那叔叔告诉我们，好像这里到重庆的汽车不多，有不有都还说不一定呢。他说我们可以先坐汽车到安康，然后安康到重庆的火车特别多。\n\n我们也在网上查了，安康到重庆的列车确实很多，9：37（ K1581）是上午最晚的一班，16：06 （K663）是下午最早的一班。上午最晚的K1581是赶不到了。只能坐下午晚早的K663那班了。\n我们在汽车站对面找了个可以坐的地方、此地摆了几排学校食堂用的的那种桌子与板凳连体的餐桌。小坐一会儿后，我决定躺下睡觉，躺在这长1米宽约15厘米的铁板凳上，我居然也可以睡得很香。谢叔叔过来看到说，这样都能睡，简直是到了一种境界呀！后来他自己也这样趟着睡了，睡了一会儿后，被冷醒了，我再把外套裹紧了继续睡。\n\n五点多的时候，被黑车司机的拉客声吵醒，听到黑车司机在喊：“到安康和什么地儿呀！“ 后来我们选择了搭黑车，因为搭黑车的话，只要路上顺利还可以赶上午K1581那班车，一辆七座的面包车，加上司机一共坐了十一个人，上车后，已经顾不得挤不挤了，又开始埋头大睡。睡醒后已经七点了，也不知还有多久才到，后来他们说还有一个多小时才能到安康，心里挺着急的，心想着还能赶上K1581吗？我又开始查票，网上显示还剩10张硬卧和无座了，08:27 K589这班车的卧铺和硬座票都还挺多，但这班车肯定是赶不上了，我开始预定k1581的卧铺，系统提示余票不足，难道又被忽悠了，反正都订不到卧铺了，也没有在网上订的必要了，直接去车站订吧，万一剩下的10张票在网上订不了是怕订了赶不到车站，才提示余票不足。一会儿去车站说不定可以定到卧铺呢，但愿到站后我的这一丝希望不要又被磨灭。\n八点十几分的时候，到了一个加油站，黑车司机说已经到了，让我们全部下车。然后叫我们去路边拦出租车到火车站，他们去路边拦车，这个位置貌似并不好打车。眼看时间一分一秒的过去，我们恳求黑车司机把我们送到火车站，刚开始他是拒绝的，找各种理由不送，我们一双双无助的眼神望着他、恳求他。加上谢叔叔的三寸不烂之舌，他终于答应送我们到火车站。这几天不管是在西安还是华山，还是这里遇到的司机都挺好的，真正感受到了北方人的耿直。\n\n上车时还觉得他人挺好，答应送我们，下车才知道又是一坑货。他让我们在出站口下了车，出站口离进站口还特别远，他反正是开车，为什么就不把我们送到进站口呢，而且进站口也不是不能停车。但不管怎样，也还是得谢谢黑车司机，如果他不答应送我们到火车站，说不定没有搭到车呢！\n\n又是一路跑到进站口，找到售票口，买票的人又是特别多，队又排了好长，我又一次厚着脸皮去插队，好人还是多，当时是个女生，我给她说明情况后她同意让我先买，结果售票员说我插队，居然不卖。真是急死人了，我又跑到后面排队去，排到窗口后，我问还有没有K1581的卧铺，售票员说还挺多，毫不犹豫的要了5张，售票员说但位置没有挨着的，还要吗？这个时候哪里还顾得挨不挨着，能买到卧铺已经是万幸了，售票员还是多好的，帮我们把位置调到尽量挨在一起，分别在2，3节车厢。拿到票的那一刻，别提多高兴了。几经波折，终于可以回家了。\n\n上车后当然又是倒头大睡了。 下午四点半终于回到了重庆，当达到重庆那一刻，仿佛一切都尘埃落定，昨晚什么事都没发生过一样。回家洗漱后，很快就入睡了，感觉整个身体都是沉重的，想起都起不来，已经好久没有过如此好的睡眠了。一觉睡到闹钟响，关了闹钟又接着睡，可又还得上班，不能任性的睡到自然醒，还是得起床准备上班，一切又恢复了正常。\n","slug":"人在囧途之火车站","published":1,"updated":"2016-12-29T05:01:27.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn87003824uuok49zyns","content":"<p>本以为在暴风雨来临之际正好赶到检票处是多么的幸运，殊不知恶运正随着突如其来的暴风雨一步步接近。进站后的时间大约是六点四十几分，原本是19：21乘坐K317次列车到西安，然后22：10乘坐T224次列车到重庆，算来便是再过三个多小时，<a id=\"more\"></a>就可以坐上回重庆的T224次列车，然后在卧铺上安心睡大觉，也许一觉醒来就到家了。这样整个旅行可以说是非常顺利、完美的。然尔就是这场暴风雨，打乱了之后的所有行程。导致我们不能如期回家、不能安心睡大觉，还得整夜奔波劳累。</p>\n<p>在候车室里看着外面那倾盆大雨，我心里还在想，雨这么大，会不会导致火车晚点呢。果不其然，我们前面一班列车本该在18：42到站的，可都快七点了还没开始检票，一会儿显示屏上就显示晚点30分钟，此时心中还自喜幸好不是我们那班车晚点，但心里又总有一种不安，觉得我们的那班车也不会准时到达。不一会儿，我们乘坐的K317次列车也在显示屏上显示晚点30分钟，原本在西安站从K317次列车换乘到T224次列车，中间共有1个小时的时间。如果真的只晚点30分钟，再准时到达西安站，下车后动作速度点，还是可以赶上下一班T224次列车的。</p>\n<p>事实却并非如此，后来到达华山站的所有列车全部晚点，而且晚点时间未知，这下完蛋了吧，肯定赶不上回重庆的T224次列车了。不过心想既然是因为下暴雨导致晚点，那到西安站的车肯定也会晚点呀！我们就一直在网上查询K317和T224这两班的列车的实时动态，后来查到T244确实也晚点了，心里又总算平静了些，有了一丝希望。同时也希望两班车晚点的时间可以相对应，这样即使是晚点，至少我们还可以坐到回重庆的火车。但事实并不会同想象一般的进展下去。</p>\n<p>在华山火车站一直等到十一点才来了一班开往西安的列车，而且还不是我们买了票的那班K317次列车，准备找车站工作人员改签到已经到达华山的这班列车，后来工作人员说，只要是到西安站就全部可以上车，总算是坐上车了。这个时候再来查询T224次列车实时动态，显示的是22：58已经到站了，由于之前查的好多次列车到站信息并不准确，我多么希望T224次列车22:58到站的信息也不准确。</p>\n<p>华山到西安的正常车时是1小时38分钟，但由于暴雨，开了两个多小时，到达西安站时快凌晨两点了。出了站首先就跑到候车室外面，把显示屏上的列车扫描了一遍又遍，就是没有看到T224应该在哪个候车室。唉！估计是已经开走了吧，只能到退票处去退票了。晚点的火车比较多，这个时候了退票窗口都还有三个，每个窗口都排着长长的队，好不容易排到了，准备退票那一刻，心里还是希望T224次列车晚点还没到站。</p>\n<p>于是问了下退票员：“请问T224次列车开走了吗？“</p>\n<p>退票员的回答是：“不知道，我们没接到通知，你们可以去服务大厅问一下”</p>\n<p>让她帮忙查下，她又说她查不到。我去，都是火车站的，退票处竟然不能查火车到站情况，这信息也太不互通了吧！真是坑呀！</p>\n<p>好吧！暂时决定先不退票，又急忙跑去候车室找到服务大厅的工作人员问道：”T224次列车是否已到站开走，或是晚点还没到站“</p>\n<p>她们又说不知道，说是要找T224进站口的工作人员问才知道，有一同事找到了T224进站口的工作人员，确认该车已经开走，最后一丝希望被磨灭。</p>\n<p>这时我们看到显示屏上K544也是开往重庆的，而且正显示着晚点，那就说明K544还没到站。</p>\n<p>我们决定将T224改签到K544，这个时候选择改签，大家都明白，肯定是没位置的。四处奔波了两天一夜，已经非常疲惫了，最后还得站回家。但经过商量还是一致同意改签。</p>\n<p>又跑到售票厅找改签的地方，售票厅的人说，改签在另一方，还在候车室的那边，又是跑着到了改签窗口，改签的窗口明明写的是中转，签字（这跟改签有关系么）</p>\n<p>又一场悲剧发生了，改签的人说，我们的票是23号的，无法改到24号，只能退了票重新买。</p>\n<p>好吧！我们又跑去退票，跑着跑着谢叔叔突然说道，重新买票钱都不够了，可怎么买呢，再一想，退了票不就有钱了嘛。</p>\n<p>于是我去排退票窗口，谢叔叔排售票窗口，我硬是厚着脸皮跑到前面去插队求别人让我先退，因为我们真的特别急，好人还是多，前面人的同意让我先退，好不容易退了票，结果退票的钱是返回到卡上。</p>\n<p>我又去排售票窗口，谢叔叔去找银行取钱，好不容易队也排到了，钱也取到了，售票员说已经过了列车的到站时间，无法购买T544次列车的票；</p>\n<p>我说，这班车明明就晚点了，根本还没到站，为什么就不能买呢，说多了都是泪，总之就是不能买到票了。<br>在华山到西安的路上我就在查，西安到重庆如何中转比较快、方便。</p>\n<p>方案一：西安到成都，成都到重庆，花费的时间太久了，可西安到成都车程太长；<br>方案二：西安到达州，达州到重庆，时间还算合理。<br>方案三：坐汽车，汽车在网上查的结果是11点才有车，而且要坐十三四个小时；<br>传姐也在查中转的方案，<br>方案四：西安到安康，安康到重庆，时间还算合理。<br>方案五：坐飞机，一查机票太贵了，根本伤不起。</p>\n<p>问题是不管是西安到达州，还是西安到安康。都要到西安南去坐车，西安到西安南有一到两个小时的车程。</p>\n<p>后来又查到早上6：02西安南有开往重庆的一班列车，果断决定到西安南去，出租车都找好了，正准备上车了。</p>\n<p>这时我说：“车票是在这边先买起，还是到了西安南再买呢”。为了保险起见，决定先把车票买好再到西安南，我和传姐又跑去售票厅，这个时候只剩下一个窗口在售票了，人也不多了。</p>\n<p>我说：“要五张西安南到重庆的票”；</p>\n<p>售票员说：“你是要买下午的吗？”</p>\n<p>我说：“早上6点多不是有一班吗？”</p>\n<p>售票员说：“早上的已经没票了”</p>\n<p>刚刚在12306查询的明明还剩那么多票，又被12306给坑了。</p>\n<p>还好没有直接去西安南，我和传姐又跑过去告诉他们没票了，于是决定坐汽车回家，先去汽车站再说吧！我们又坐出租车到了汽车站。<br>从小到大也坐过无数次车，也遇到过晚点。不管是我还是他们恐怕都从未在车站有过这般狼狈、落寞的经历。这种时候内心的情绪已经无法用语言来形容了。铁路局真TMD坑，可我们以是明知是坑，又要不断围着他转，哪怕再是掉下去。<br>达到汽车站是凌晨三点过，经打听汽车站是六点才开门，这个时间点汽车站四处冷冷清清，偶尔吹过一丝丝凉风。谢叔叔说，我们已经不是难民可以形容的了，是流民。</p>\n<p>后来看到还有个叔叔也在车站门口等车，他是到安康的（本地人），那叔叔告诉我们，好像这里到重庆的汽车不多，有不有都还说不一定呢。他说我们可以先坐汽车到安康，然后安康到重庆的火车特别多。</p>\n<p>我们也在网上查了，安康到重庆的列车确实很多，9：37（ K1581）是上午最晚的一班，16：06 （K663）是下午最早的一班。上午最晚的K1581是赶不到了。只能坐下午晚早的K663那班了。<br>我们在汽车站对面找了个可以坐的地方、此地摆了几排学校食堂用的的那种桌子与板凳连体的餐桌。小坐一会儿后，我决定躺下睡觉，躺在这长1米宽约15厘米的铁板凳上，我居然也可以睡得很香。谢叔叔过来看到说，这样都能睡，简直是到了一种境界呀！后来他自己也这样趟着睡了，睡了一会儿后，被冷醒了，我再把外套裹紧了继续睡。</p>\n<p>五点多的时候，被黑车司机的拉客声吵醒，听到黑车司机在喊：“到安康和什么地儿呀！“ 后来我们选择了搭黑车，因为搭黑车的话，只要路上顺利还可以赶上午K1581那班车，一辆七座的面包车，加上司机一共坐了十一个人，上车后，已经顾不得挤不挤了，又开始埋头大睡。睡醒后已经七点了，也不知还有多久才到，后来他们说还有一个多小时才能到安康，心里挺着急的，心想着还能赶上K1581吗？我又开始查票，网上显示还剩10张硬卧和无座了，08:27 K589这班车的卧铺和硬座票都还挺多，但这班车肯定是赶不上了，我开始预定k1581的卧铺，系统提示余票不足，难道又被忽悠了，反正都订不到卧铺了，也没有在网上订的必要了，直接去车站订吧，万一剩下的10张票在网上订不了是怕订了赶不到车站，才提示余票不足。一会儿去车站说不定可以定到卧铺呢，但愿到站后我的这一丝希望不要又被磨灭。<br>八点十几分的时候，到了一个加油站，黑车司机说已经到了，让我们全部下车。然后叫我们去路边拦出租车到火车站，他们去路边拦车，这个位置貌似并不好打车。眼看时间一分一秒的过去，我们恳求黑车司机把我们送到火车站，刚开始他是拒绝的，找各种理由不送，我们一双双无助的眼神望着他、恳求他。加上谢叔叔的三寸不烂之舌，他终于答应送我们到火车站。这几天不管是在西安还是华山，还是这里遇到的司机都挺好的，真正感受到了北方人的耿直。</p>\n<p>上车时还觉得他人挺好，答应送我们，下车才知道又是一坑货。他让我们在出站口下了车，出站口离进站口还特别远，他反正是开车，为什么就不把我们送到进站口呢，而且进站口也不是不能停车。但不管怎样，也还是得谢谢黑车司机，如果他不答应送我们到火车站，说不定没有搭到车呢！</p>\n<p>又是一路跑到进站口，找到售票口，买票的人又是特别多，队又排了好长，我又一次厚着脸皮去插队，好人还是多，当时是个女生，我给她说明情况后她同意让我先买，结果售票员说我插队，居然不卖。真是急死人了，我又跑到后面排队去，排到窗口后，我问还有没有K1581的卧铺，售票员说还挺多，毫不犹豫的要了5张，售票员说但位置没有挨着的，还要吗？这个时候哪里还顾得挨不挨着，能买到卧铺已经是万幸了，售票员还是多好的，帮我们把位置调到尽量挨在一起，分别在2，3节车厢。拿到票的那一刻，别提多高兴了。几经波折，终于可以回家了。</p>\n<p>上车后当然又是倒头大睡了。 下午四点半终于回到了重庆，当达到重庆那一刻，仿佛一切都尘埃落定，昨晚什么事都没发生过一样。回家洗漱后，很快就入睡了，感觉整个身体都是沉重的，想起都起不来，已经好久没有过如此好的睡眠了。一觉睡到闹钟响，关了闹钟又接着睡，可又还得上班，不能任性的睡到自然醒，还是得起床准备上班，一切又恢复了正常。</p>\n","excerpt":"<p>本以为在暴风雨来临之际正好赶到检票处是多么的幸运，殊不知恶运正随着突如其来的暴风雨一步步接近。进站后的时间大约是六点四十几分，原本是19：21乘坐K317次列车到西安，然后22：10乘坐T224次列车到重庆，算来便是再过三个多小时，","more":"就可以坐上回重庆的T224次列车，然后在卧铺上安心睡大觉，也许一觉醒来就到家了。这样整个旅行可以说是非常顺利、完美的。然尔就是这场暴风雨，打乱了之后的所有行程。导致我们不能如期回家、不能安心睡大觉，还得整夜奔波劳累。</p>\n<p>在候车室里看着外面那倾盆大雨，我心里还在想，雨这么大，会不会导致火车晚点呢。果不其然，我们前面一班列车本该在18：42到站的，可都快七点了还没开始检票，一会儿显示屏上就显示晚点30分钟，此时心中还自喜幸好不是我们那班车晚点，但心里又总有一种不安，觉得我们的那班车也不会准时到达。不一会儿，我们乘坐的K317次列车也在显示屏上显示晚点30分钟，原本在西安站从K317次列车换乘到T224次列车，中间共有1个小时的时间。如果真的只晚点30分钟，再准时到达西安站，下车后动作速度点，还是可以赶上下一班T224次列车的。</p>\n<p>事实却并非如此，后来到达华山站的所有列车全部晚点，而且晚点时间未知，这下完蛋了吧，肯定赶不上回重庆的T224次列车了。不过心想既然是因为下暴雨导致晚点，那到西安站的车肯定也会晚点呀！我们就一直在网上查询K317和T224这两班的列车的实时动态，后来查到T244确实也晚点了，心里又总算平静了些，有了一丝希望。同时也希望两班车晚点的时间可以相对应，这样即使是晚点，至少我们还可以坐到回重庆的火车。但事实并不会同想象一般的进展下去。</p>\n<p>在华山火车站一直等到十一点才来了一班开往西安的列车，而且还不是我们买了票的那班K317次列车，准备找车站工作人员改签到已经到达华山的这班列车，后来工作人员说，只要是到西安站就全部可以上车，总算是坐上车了。这个时候再来查询T224次列车实时动态，显示的是22：58已经到站了，由于之前查的好多次列车到站信息并不准确，我多么希望T224次列车22:58到站的信息也不准确。</p>\n<p>华山到西安的正常车时是1小时38分钟，但由于暴雨，开了两个多小时，到达西安站时快凌晨两点了。出了站首先就跑到候车室外面，把显示屏上的列车扫描了一遍又遍，就是没有看到T224应该在哪个候车室。唉！估计是已经开走了吧，只能到退票处去退票了。晚点的火车比较多，这个时候了退票窗口都还有三个，每个窗口都排着长长的队，好不容易排到了，准备退票那一刻，心里还是希望T224次列车晚点还没到站。</p>\n<p>于是问了下退票员：“请问T224次列车开走了吗？“</p>\n<p>退票员的回答是：“不知道，我们没接到通知，你们可以去服务大厅问一下”</p>\n<p>让她帮忙查下，她又说她查不到。我去，都是火车站的，退票处竟然不能查火车到站情况，这信息也太不互通了吧！真是坑呀！</p>\n<p>好吧！暂时决定先不退票，又急忙跑去候车室找到服务大厅的工作人员问道：”T224次列车是否已到站开走，或是晚点还没到站“</p>\n<p>她们又说不知道，说是要找T224进站口的工作人员问才知道，有一同事找到了T224进站口的工作人员，确认该车已经开走，最后一丝希望被磨灭。</p>\n<p>这时我们看到显示屏上K544也是开往重庆的，而且正显示着晚点，那就说明K544还没到站。</p>\n<p>我们决定将T224改签到K544，这个时候选择改签，大家都明白，肯定是没位置的。四处奔波了两天一夜，已经非常疲惫了，最后还得站回家。但经过商量还是一致同意改签。</p>\n<p>又跑到售票厅找改签的地方，售票厅的人说，改签在另一方，还在候车室的那边，又是跑着到了改签窗口，改签的窗口明明写的是中转，签字（这跟改签有关系么）</p>\n<p>又一场悲剧发生了，改签的人说，我们的票是23号的，无法改到24号，只能退了票重新买。</p>\n<p>好吧！我们又跑去退票，跑着跑着谢叔叔突然说道，重新买票钱都不够了，可怎么买呢，再一想，退了票不就有钱了嘛。</p>\n<p>于是我去排退票窗口，谢叔叔排售票窗口，我硬是厚着脸皮跑到前面去插队求别人让我先退，因为我们真的特别急，好人还是多，前面人的同意让我先退，好不容易退了票，结果退票的钱是返回到卡上。</p>\n<p>我又去排售票窗口，谢叔叔去找银行取钱，好不容易队也排到了，钱也取到了，售票员说已经过了列车的到站时间，无法购买T544次列车的票；</p>\n<p>我说，这班车明明就晚点了，根本还没到站，为什么就不能买呢，说多了都是泪，总之就是不能买到票了。<br>在华山到西安的路上我就在查，西安到重庆如何中转比较快、方便。</p>\n<p>方案一：西安到成都，成都到重庆，花费的时间太久了，可西安到成都车程太长；<br>方案二：西安到达州，达州到重庆，时间还算合理。<br>方案三：坐汽车，汽车在网上查的结果是11点才有车，而且要坐十三四个小时；<br>传姐也在查中转的方案，<br>方案四：西安到安康，安康到重庆，时间还算合理。<br>方案五：坐飞机，一查机票太贵了，根本伤不起。</p>\n<p>问题是不管是西安到达州，还是西安到安康。都要到西安南去坐车，西安到西安南有一到两个小时的车程。</p>\n<p>后来又查到早上6：02西安南有开往重庆的一班列车，果断决定到西安南去，出租车都找好了，正准备上车了。</p>\n<p>这时我说：“车票是在这边先买起，还是到了西安南再买呢”。为了保险起见，决定先把车票买好再到西安南，我和传姐又跑去售票厅，这个时候只剩下一个窗口在售票了，人也不多了。</p>\n<p>我说：“要五张西安南到重庆的票”；</p>\n<p>售票员说：“你是要买下午的吗？”</p>\n<p>我说：“早上6点多不是有一班吗？”</p>\n<p>售票员说：“早上的已经没票了”</p>\n<p>刚刚在12306查询的明明还剩那么多票，又被12306给坑了。</p>\n<p>还好没有直接去西安南，我和传姐又跑过去告诉他们没票了，于是决定坐汽车回家，先去汽车站再说吧！我们又坐出租车到了汽车站。<br>从小到大也坐过无数次车，也遇到过晚点。不管是我还是他们恐怕都从未在车站有过这般狼狈、落寞的经历。这种时候内心的情绪已经无法用语言来形容了。铁路局真TMD坑，可我们以是明知是坑，又要不断围着他转，哪怕再是掉下去。<br>达到汽车站是凌晨三点过，经打听汽车站是六点才开门，这个时间点汽车站四处冷冷清清，偶尔吹过一丝丝凉风。谢叔叔说，我们已经不是难民可以形容的了，是流民。</p>\n<p>后来看到还有个叔叔也在车站门口等车，他是到安康的（本地人），那叔叔告诉我们，好像这里到重庆的汽车不多，有不有都还说不一定呢。他说我们可以先坐汽车到安康，然后安康到重庆的火车特别多。</p>\n<p>我们也在网上查了，安康到重庆的列车确实很多，9：37（ K1581）是上午最晚的一班，16：06 （K663）是下午最早的一班。上午最晚的K1581是赶不到了。只能坐下午晚早的K663那班了。<br>我们在汽车站对面找了个可以坐的地方、此地摆了几排学校食堂用的的那种桌子与板凳连体的餐桌。小坐一会儿后，我决定躺下睡觉，躺在这长1米宽约15厘米的铁板凳上，我居然也可以睡得很香。谢叔叔过来看到说，这样都能睡，简直是到了一种境界呀！后来他自己也这样趟着睡了，睡了一会儿后，被冷醒了，我再把外套裹紧了继续睡。</p>\n<p>五点多的时候，被黑车司机的拉客声吵醒，听到黑车司机在喊：“到安康和什么地儿呀！“ 后来我们选择了搭黑车，因为搭黑车的话，只要路上顺利还可以赶上午K1581那班车，一辆七座的面包车，加上司机一共坐了十一个人，上车后，已经顾不得挤不挤了，又开始埋头大睡。睡醒后已经七点了，也不知还有多久才到，后来他们说还有一个多小时才能到安康，心里挺着急的，心想着还能赶上K1581吗？我又开始查票，网上显示还剩10张硬卧和无座了，08:27 K589这班车的卧铺和硬座票都还挺多，但这班车肯定是赶不上了，我开始预定k1581的卧铺，系统提示余票不足，难道又被忽悠了，反正都订不到卧铺了，也没有在网上订的必要了，直接去车站订吧，万一剩下的10张票在网上订不了是怕订了赶不到车站，才提示余票不足。一会儿去车站说不定可以定到卧铺呢，但愿到站后我的这一丝希望不要又被磨灭。<br>八点十几分的时候，到了一个加油站，黑车司机说已经到了，让我们全部下车。然后叫我们去路边拦出租车到火车站，他们去路边拦车，这个位置貌似并不好打车。眼看时间一分一秒的过去，我们恳求黑车司机把我们送到火车站，刚开始他是拒绝的，找各种理由不送，我们一双双无助的眼神望着他、恳求他。加上谢叔叔的三寸不烂之舌，他终于答应送我们到火车站。这几天不管是在西安还是华山，还是这里遇到的司机都挺好的，真正感受到了北方人的耿直。</p>\n<p>上车时还觉得他人挺好，答应送我们，下车才知道又是一坑货。他让我们在出站口下了车，出站口离进站口还特别远，他反正是开车，为什么就不把我们送到进站口呢，而且进站口也不是不能停车。但不管怎样，也还是得谢谢黑车司机，如果他不答应送我们到火车站，说不定没有搭到车呢！</p>\n<p>又是一路跑到进站口，找到售票口，买票的人又是特别多，队又排了好长，我又一次厚着脸皮去插队，好人还是多，当时是个女生，我给她说明情况后她同意让我先买，结果售票员说我插队，居然不卖。真是急死人了，我又跑到后面排队去，排到窗口后，我问还有没有K1581的卧铺，售票员说还挺多，毫不犹豫的要了5张，售票员说但位置没有挨着的，还要吗？这个时候哪里还顾得挨不挨着，能买到卧铺已经是万幸了，售票员还是多好的，帮我们把位置调到尽量挨在一起，分别在2，3节车厢。拿到票的那一刻，别提多高兴了。几经波折，终于可以回家了。</p>\n<p>上车后当然又是倒头大睡了。 下午四点半终于回到了重庆，当达到重庆那一刻，仿佛一切都尘埃落定，昨晚什么事都没发生过一样。回家洗漱后，很快就入睡了，感觉整个身体都是沉重的，想起都起不来，已经好久没有过如此好的睡眠了。一觉睡到闹钟响，关了闹钟又接着睡，可又还得上班，不能任性的睡到自然醒，还是得起床准备上班，一切又恢复了正常。</p>"},{"title":"react入门03-定义组件","date":"2016-12-17T14:06:11.000Z","_content":"\n##### 创建一个组件类，用于输出Hello React\n\n1.React中创建的组件类以大写字母开头，驼峰命名法;\n2.在React中使用React.createClass方法创建一个组件类\n3.核心代码：每个组件类必须实现自己的render方法。输出定义好的组件模板。返回值:null, false, 组件模板\n<!--more-->  \n\n```javascript\n      var HelloMessage = React.createClass({\n            render: function(){\n            return <h1>定义组件</h1>\n            }\n      })\n\n      ReactDOM.render(\n            //在模板中插入<HelloMessage /> 会自动生成一个实例\n            <HelloMessage />,\n            document.getElementById('container')\n      )\n```\n\n ","source":"_posts/react入门03-定义组件.md","raw":"---\ntitle: react入门03-定义组件\ndate: 2016-12-17 22:06:11\ncategories: \n  - 技术\n  - React\ntags: react\n---\n\n##### 创建一个组件类，用于输出Hello React\n\n1.React中创建的组件类以大写字母开头，驼峰命名法;\n2.在React中使用React.createClass方法创建一个组件类\n3.核心代码：每个组件类必须实现自己的render方法。输出定义好的组件模板。返回值:null, false, 组件模板\n<!--more-->  \n\n```javascript\n      var HelloMessage = React.createClass({\n            render: function(){\n            return <h1>定义组件</h1>\n            }\n      })\n\n      ReactDOM.render(\n            //在模板中插入<HelloMessage /> 会自动生成一个实例\n            <HelloMessage />,\n            document.getElementById('container')\n      )\n```\n\n ","slug":"react入门03-定义组件","published":1,"updated":"2016-12-29T05:01:27.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8c003b24uu5hm8ccpd","content":"<h5 id=\"创建一个组件类，用于输出Hello-React\"><a href=\"#创建一个组件类，用于输出Hello-React\" class=\"headerlink\" title=\"创建一个组件类，用于输出Hello React\"></a>创建一个组件类，用于输出Hello React</h5><p>1.React中创建的组件类以大写字母开头，驼峰命名法;<br>2.在React中使用React.createClass方法创建一个组件类<br>3.核心代码：每个组件类必须实现自己的render方法。输出定义好的组件模板。返回值:null, false, 组件模板<br><a id=\"more\"></a>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</div><div class=\"line\">      <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>定义组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">      <span class=\"comment\">//在模板中插入&lt;HelloMessage /&gt; 会自动生成一个实例</span></div><div class=\"line\">      &lt;HelloMessage /&gt;,</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n","excerpt":"<h5 id=\"创建一个组件类，用于输出Hello-React\"><a href=\"#创建一个组件类，用于输出Hello-React\" class=\"headerlink\" title=\"创建一个组件类，用于输出Hello React\"></a>创建一个组件类，用于输出Hello React</h5><p>1.React中创建的组件类以大写字母开头，驼峰命名法;<br>2.在React中使用React.createClass方法创建一个组件类<br>3.核心代码：每个组件类必须实现自己的render方法。输出定义好的组件模板。返回值:null, false, 组件模板<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123;</div><div class=\"line\">      <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>定义组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">      <span class=\"comment\">//在模板中插入&lt;HelloMessage /&gt; 会自动生成一个实例</span></div><div class=\"line\">      &lt;HelloMessage /&gt;,</div><div class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>"},{"title":"前端跨域问题","date":"2017-01-05T12:27:33.000Z","_content":"\n#### 同源策略\n域名相同、端口相同、协议相同\n<!--more-->\n满足这三个条件时满足同源策略\n\n#### JSONP\nJSON With Padding : 把一段 json 数据添加进来\n\njsonp 是使用 script 来进行交互的, 因为 script 标签不受同源策略影响, 而且 script 可以执行一段 javascript 代码, 利用这个机制来绕开同源策略。\n\n##### 前端对 jsonp 的处理\n```javascript\n//声明全局函数，用来接收 jsonp 返回的数据\nfunction jsonp_callback(data){\n  console.log(data);\n}\n\n//动态创建一个 script 标签\nvar script = document.createElement(\"script\");\n//设置 src, 数据以 get 形势传递\n//最重要的是要跟上一个 get 参数 callback (参数名随意, 参数的值必须是前面自己定义的全局函数名称)\nscript.src = \"/test/jsonp?data=data&callback=jsonp_callback\";\n\n//获取一个 dom 节点\nvar body = document.getElementsByTagName(\"body\")[0];\n//把创建好的 script 添加到页面中\nbody.appendChild(script);\n```\n##### 后台对 jsonp 的处理\n\n以 node.js 为例\n```javascript\nvar express = require ('express');\nvar app = express();\n\napp.route('/test/jsonp')\n  //声明一个 get 请求\n  .get(function(req, res, next) {\n      var param = req.query;\n      //这个 key 值需要与前端沟通好\n      //关系到返回的数据是否能正常执行\n      var callbackNmae = param['callback']; \n      var data = {\n        \"success\" : true,\n        \"data\" : [\n          \"这里返回正确的数据，与正常的 ajax 交互一样\"  \n        ]\n      };\n      //以为返回的就是一个数据对象, jsonp 需要返回一段 javascript 代码, 且是立即执行的函数\n      //函数的参数为 json 数据\n      res.send(`${callbackNmae}(\"${JSON.stringify(data)}\");`);\n  }\n);\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```\n\n#### 代理模式 <code>server language</code>\n\n回到开头，我们的需求是当网站前台需要访问其它站点的接口时因为受到同源策略限制, 发起的 ajax 会失败, 后面介绍了实用 jsonp 来绕过同源策略, 假如其它站点不支持 jsonp 该怎么办呢？\n浏览器有同源策略限制，但是 后台没有限制，我们是否可以在后台这样做呢？\n\n前端发起一个请求给后台，后台接收到请求后去请求其它站点的数据，拿到数据后返回给前端。\n\n前端发起正常的 ajax\n\n```javascript\nvar xhr;\nif (window.XMLHttpRequest){\n  //支持 XMLHttpRequest 的浏览器\n    xhr=new XMLHttpRequest();\n}else{\n  //不支持 XMLHttpRequest 的浏览器使用 ActiveXObject\n    xhr=new ActiveXObject(\"Microsoft.xhr\");\n}\n\nxhr.onreadystatechange=function(){\n    if (xhr.readyState == 4){\n    console.log(xhr.responseText);\n    }\n}\nvar url = \"/test/jsonp?data=data&url=http://website/api/path\";\nxhr.open(\"GET\", url, true);\nxhr.send();\n```\n\n后台处理 ajax\n```javascript\nvar express = require ('express');\n//导入 request 模块\nvar request = require('request');\nvar app = express();\n\napp.route('/test/jsonp')\n  //声明一个 get 请求\n  .get(function(req, res, next) {\n      var param = req.query;\n      var url = param.url; //获取目标服务器地址\n      delete param.url; \n      //发起 http 请求\n      request.get({\n      url : url,\n      formData : param\n    }, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        //返回接收到的数据\n        res.send(body);\n      }\n    });\n  }\n);\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```\n\n#### 代理配置 Nginx\n\n反代理与上面的逻辑一样, 都是利用后台服务进行绕开同源策略, 上面两种方式都是需要修改后台代码的, 这种方式是在服务器层进行配置, 相对简单很多。\n\n不会安装 nginx 的请移步, 先看安装与配置文档\n\n将路由开头为 cors/api 的所有请求全部转发到另一个站点, 达到跨域请求效果\n\nnginx 配置\n```javascript\nserver {\n    server_name localhost;\n    listen 8080;\n\n    root /PATH/TO/WEBROOT/;\n    index index.html index.htm;\n\n    # 配置开头路由，只有路由中是以 cors/api 开头的都会默认为跨域请求\n    location ^~ /cors/api/ {\n        proxy_pass http://origin.website/;\n    }\n}\n```\n前端处理\n```javascript\nvar xhr;\nif (window.XMLHttpRequest){\n  //支持 XMLHttpRequest 的浏览器\n    xhr=new XMLHttpRequest();\n}else{\n  //不支持 XMLHttpRequest 的浏览器使用 ActiveXObject\n    xhr=new ActiveXObject(\"Microsoft.xhr\");\n}\n\nxhr.onreadystatechange=function(){\n    if (xhr.readyState == 4){\n    console.log(xhr.responseText);\n    }\n}\nvar url = \"/cors/api/test/getdata?data=data\";\nxhr.open(\"GET\",url,true);\nxhr.send();\n\n// 请求地址为 /cors/api/test/getdata?data=data\n// 真实请求地址为 : http://origin.website/test/getdata?data=data\n```\n\n#### Access-Control-Allow-Origin\n\n浏览器每一个请求不管是否跨域都会向服务器发送一个请求，询问是否可以访问，如果服务器告诉浏览器该接口你有全新访问，那么浏览器就会接收服务器返回的数据，否则会抛出异常\n\n以 node.js 为例，修改 response 信息\n\n```javascript\nvar express = require ('express');\nvar app = express();\n\n//设置请求的接口地址，允许 get / post\napp.all('/api/test', function(req, res) {\n  // 设置允许来置所有域下的的请求，达到跨域\n  res.set({\n    // * 为允许任何域访问\n    // 如果只允许某个域名 请设置单独的域名\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"POST,GET\",\n    \"Access-Control-Allow-Credentials\": \"true\",\n    \"Content-Type\": \"text/html; charset=utf-8\"\n  });\n\n  res.send({\n    \"success\" : true,\n    \"data\" : [ /* 返回的数据 */ ]\n  });\n});\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```","source":"_posts/前端跨域问题.md","raw":"---\ntitle: 前端跨域问题\ndate: 2017-01-05 20:27:33\ncategories: \n  - 技术\n  - JavaScript\ntags: 跨域\n---\n\n#### 同源策略\n域名相同、端口相同、协议相同\n<!--more-->\n满足这三个条件时满足同源策略\n\n#### JSONP\nJSON With Padding : 把一段 json 数据添加进来\n\njsonp 是使用 script 来进行交互的, 因为 script 标签不受同源策略影响, 而且 script 可以执行一段 javascript 代码, 利用这个机制来绕开同源策略。\n\n##### 前端对 jsonp 的处理\n```javascript\n//声明全局函数，用来接收 jsonp 返回的数据\nfunction jsonp_callback(data){\n  console.log(data);\n}\n\n//动态创建一个 script 标签\nvar script = document.createElement(\"script\");\n//设置 src, 数据以 get 形势传递\n//最重要的是要跟上一个 get 参数 callback (参数名随意, 参数的值必须是前面自己定义的全局函数名称)\nscript.src = \"/test/jsonp?data=data&callback=jsonp_callback\";\n\n//获取一个 dom 节点\nvar body = document.getElementsByTagName(\"body\")[0];\n//把创建好的 script 添加到页面中\nbody.appendChild(script);\n```\n##### 后台对 jsonp 的处理\n\n以 node.js 为例\n```javascript\nvar express = require ('express');\nvar app = express();\n\napp.route('/test/jsonp')\n  //声明一个 get 请求\n  .get(function(req, res, next) {\n      var param = req.query;\n      //这个 key 值需要与前端沟通好\n      //关系到返回的数据是否能正常执行\n      var callbackNmae = param['callback']; \n      var data = {\n        \"success\" : true,\n        \"data\" : [\n          \"这里返回正确的数据，与正常的 ajax 交互一样\"  \n        ]\n      };\n      //以为返回的就是一个数据对象, jsonp 需要返回一段 javascript 代码, 且是立即执行的函数\n      //函数的参数为 json 数据\n      res.send(`${callbackNmae}(\"${JSON.stringify(data)}\");`);\n  }\n);\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```\n\n#### 代理模式 <code>server language</code>\n\n回到开头，我们的需求是当网站前台需要访问其它站点的接口时因为受到同源策略限制, 发起的 ajax 会失败, 后面介绍了实用 jsonp 来绕过同源策略, 假如其它站点不支持 jsonp 该怎么办呢？\n浏览器有同源策略限制，但是 后台没有限制，我们是否可以在后台这样做呢？\n\n前端发起一个请求给后台，后台接收到请求后去请求其它站点的数据，拿到数据后返回给前端。\n\n前端发起正常的 ajax\n\n```javascript\nvar xhr;\nif (window.XMLHttpRequest){\n  //支持 XMLHttpRequest 的浏览器\n    xhr=new XMLHttpRequest();\n}else{\n  //不支持 XMLHttpRequest 的浏览器使用 ActiveXObject\n    xhr=new ActiveXObject(\"Microsoft.xhr\");\n}\n\nxhr.onreadystatechange=function(){\n    if (xhr.readyState == 4){\n    console.log(xhr.responseText);\n    }\n}\nvar url = \"/test/jsonp?data=data&url=http://website/api/path\";\nxhr.open(\"GET\", url, true);\nxhr.send();\n```\n\n后台处理 ajax\n```javascript\nvar express = require ('express');\n//导入 request 模块\nvar request = require('request');\nvar app = express();\n\napp.route('/test/jsonp')\n  //声明一个 get 请求\n  .get(function(req, res, next) {\n      var param = req.query;\n      var url = param.url; //获取目标服务器地址\n      delete param.url; \n      //发起 http 请求\n      request.get({\n      url : url,\n      formData : param\n    }, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        //返回接收到的数据\n        res.send(body);\n      }\n    });\n  }\n);\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```\n\n#### 代理配置 Nginx\n\n反代理与上面的逻辑一样, 都是利用后台服务进行绕开同源策略, 上面两种方式都是需要修改后台代码的, 这种方式是在服务器层进行配置, 相对简单很多。\n\n不会安装 nginx 的请移步, 先看安装与配置文档\n\n将路由开头为 cors/api 的所有请求全部转发到另一个站点, 达到跨域请求效果\n\nnginx 配置\n```javascript\nserver {\n    server_name localhost;\n    listen 8080;\n\n    root /PATH/TO/WEBROOT/;\n    index index.html index.htm;\n\n    # 配置开头路由，只有路由中是以 cors/api 开头的都会默认为跨域请求\n    location ^~ /cors/api/ {\n        proxy_pass http://origin.website/;\n    }\n}\n```\n前端处理\n```javascript\nvar xhr;\nif (window.XMLHttpRequest){\n  //支持 XMLHttpRequest 的浏览器\n    xhr=new XMLHttpRequest();\n}else{\n  //不支持 XMLHttpRequest 的浏览器使用 ActiveXObject\n    xhr=new ActiveXObject(\"Microsoft.xhr\");\n}\n\nxhr.onreadystatechange=function(){\n    if (xhr.readyState == 4){\n    console.log(xhr.responseText);\n    }\n}\nvar url = \"/cors/api/test/getdata?data=data\";\nxhr.open(\"GET\",url,true);\nxhr.send();\n\n// 请求地址为 /cors/api/test/getdata?data=data\n// 真实请求地址为 : http://origin.website/test/getdata?data=data\n```\n\n#### Access-Control-Allow-Origin\n\n浏览器每一个请求不管是否跨域都会向服务器发送一个请求，询问是否可以访问，如果服务器告诉浏览器该接口你有全新访问，那么浏览器就会接收服务器返回的数据，否则会抛出异常\n\n以 node.js 为例，修改 response 信息\n\n```javascript\nvar express = require ('express');\nvar app = express();\n\n//设置请求的接口地址，允许 get / post\napp.all('/api/test', function(req, res) {\n  // 设置允许来置所有域下的的请求，达到跨域\n  res.set({\n    // * 为允许任何域访问\n    // 如果只允许某个域名 请设置单独的域名\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"POST,GET\",\n    \"Access-Control-Allow-Credentials\": \"true\",\n    \"Content-Type\": \"text/html; charset=utf-8\"\n  });\n\n  res.send({\n    \"success\" : true,\n    \"data\" : [ /* 返回的数据 */ ]\n  });\n});\n\n\nvar server  = require('http').createServer(app);\nserver.listen(5000, \"127.0.0.1\", function() {\n  console.log('http://127.0.0.1:5000');\n});\n```","slug":"前端跨域问题","published":1,"updated":"2017-01-06T00:56:22.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8f003f24uuaq54znqp","content":"<h4 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h4><p>域名相同、端口相同、协议相同<br><a id=\"more\"></a><br>满足这三个条件时满足同源策略</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>JSON With Padding : 把一段 json 数据添加进来</p>\n<p>jsonp 是使用 script 来进行交互的, 因为 script 标签不受同源策略影响, 而且 script 可以执行一段 javascript 代码, 利用这个机制来绕开同源策略。</p>\n<h5 id=\"前端对-jsonp-的处理\"><a href=\"#前端对-jsonp-的处理\" class=\"headerlink\" title=\"前端对 jsonp 的处理\"></a>前端对 jsonp 的处理</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明全局函数，用来接收 jsonp 返回的数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp_callback</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//动态创建一个 script 标签</span></div><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\"><span class=\"comment\">//设置 src, 数据以 get 形势传递</span></div><div class=\"line\"><span class=\"comment\">//最重要的是要跟上一个 get 参数 callback (参数名随意, 参数的值必须是前面自己定义的全局函数名称)</span></div><div class=\"line\">script.src = <span class=\"string\">\"/test/jsonp?data=data&amp;callback=jsonp_callback\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取一个 dom 节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"body\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"comment\">//把创建好的 script 添加到页面中</span></div><div class=\"line\">body.appendChild(script);</div></pre></td></tr></table></figure>\n<h5 id=\"后台对-jsonp-的处理\"><a href=\"#后台对-jsonp-的处理\" class=\"headerlink\" title=\"后台对 jsonp 的处理\"></a>后台对 jsonp 的处理</h5><p>以 node.js 为例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.route(<span class=\"string\">'/test/jsonp'</span>)</div><div class=\"line\">  <span class=\"comment\">//声明一个 get 请求</span></div><div class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> param = req.query;</div><div class=\"line\">      <span class=\"comment\">//这个 key 值需要与前端沟通好</span></div><div class=\"line\">      <span class=\"comment\">//关系到返回的数据是否能正常执行</span></div><div class=\"line\">      <span class=\"keyword\">var</span> callbackNmae = param[<span class=\"string\">'callback'</span>]; </div><div class=\"line\">      <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">        <span class=\"string\">\"success\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">\"data\"</span> : [</div><div class=\"line\">          <span class=\"string\">\"这里返回正确的数据，与正常的 ajax 交互一样\"</span>  </div><div class=\"line\">        ]</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"comment\">//以为返回的就是一个数据对象, jsonp 需要返回一段 javascript 代码, 且是立即执行的函数</span></div><div class=\"line\">      <span class=\"comment\">//函数的参数为 json 数据</span></div><div class=\"line\">      res.send(<span class=\"string\">`<span class=\"subst\">$&#123;callbackNmae&#125;</span>(\"<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;</span>\");`</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"代理模式-server-language\"><a href=\"#代理模式-server-language\" class=\"headerlink\" title=\"代理模式 server language\"></a>代理模式 <code>server language</code></h4><p>回到开头，我们的需求是当网站前台需要访问其它站点的接口时因为受到同源策略限制, 发起的 ajax 会失败, 后面介绍了实用 jsonp 来绕过同源策略, 假如其它站点不支持 jsonp 该怎么办呢？<br>浏览器有同源策略限制，但是 后台没有限制，我们是否可以在后台这样做呢？</p>\n<p>前端发起一个请求给后台，后台接收到请求后去请求其它站点的数据，拿到数据后返回给前端。</p>\n<p>前端发起正常的 ajax</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</div><div class=\"line\">  <span class=\"comment\">//支持 XMLHttpRequest 的浏览器</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不支持 XMLHttpRequest 的浏览器使用 ActiveXObject</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.xhr\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"/test/jsonp?data=data&amp;url=http://website/api/path\"</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n<p>后台处理 ajax<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"comment\">//导入 request 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.route(<span class=\"string\">'/test/jsonp'</span>)</div><div class=\"line\">  <span class=\"comment\">//声明一个 get 请求</span></div><div class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> param = req.query;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = param.url; <span class=\"comment\">//获取目标服务器地址</span></div><div class=\"line\">      <span class=\"keyword\">delete</span> param.url; </div><div class=\"line\">      <span class=\"comment\">//发起 http 请求</span></div><div class=\"line\">      request.get(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span> : url,</div><div class=\"line\">      <span class=\"attr\">formData</span> : param</div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//返回接收到的数据</span></div><div class=\"line\">        res.send(body);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"代理配置-Nginx\"><a href=\"#代理配置-Nginx\" class=\"headerlink\" title=\"代理配置 Nginx\"></a>代理配置 Nginx</h4><p>反代理与上面的逻辑一样, 都是利用后台服务进行绕开同源策略, 上面两种方式都是需要修改后台代码的, 这种方式是在服务器层进行配置, 相对简单很多。</p>\n<p>不会安装 nginx 的请移步, 先看安装与配置文档</p>\n<p>将路由开头为 cors/api 的所有请求全部转发到另一个站点, 达到跨域请求效果</p>\n<p>nginx 配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    listen 8080;</div><div class=\"line\"></div><div class=\"line\">    root /PATH/TO/WEBROOT/;</div><div class=\"line\">    index index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    # 配置开头路由，只有路由中是以 cors/api 开头的都会默认为跨域请求</div><div class=\"line\">    location ^~ /cors/api/ &#123;</div><div class=\"line\">        proxy_pass http://origin.website/;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</div><div class=\"line\">  <span class=\"comment\">//支持 XMLHttpRequest 的浏览器</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不支持 XMLHttpRequest 的浏览器使用 ActiveXObject</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.xhr\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"/cors/api/test/getdata?data=data\"</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 请求地址为 /cors/api/test/getdata?data=data</span></div><div class=\"line\"><span class=\"comment\">// 真实请求地址为 : http://origin.website/test/getdata?data=data</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Access-Control-Allow-Origin\"><a href=\"#Access-Control-Allow-Origin\" class=\"headerlink\" title=\"Access-Control-Allow-Origin\"></a>Access-Control-Allow-Origin</h4><p>浏览器每一个请求不管是否跨域都会向服务器发送一个请求，询问是否可以访问，如果服务器告诉浏览器该接口你有全新访问，那么浏览器就会接收服务器返回的数据，否则会抛出异常</p>\n<p>以 node.js 为例，修改 response 信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置请求的接口地址，允许 get / post</span></div><div class=\"line\">app.all(<span class=\"string\">'/api/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 设置允许来置所有域下的的请求，达到跨域</span></div><div class=\"line\">  res.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// * 为允许任何域访问</span></div><div class=\"line\">    <span class=\"comment\">// 如果只允许某个域名 请设置单独的域名</span></div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">\"*\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>: <span class=\"string\">\"POST,GET\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Credentials\"</span>: <span class=\"string\">\"true\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html; charset=utf-8\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  res.send(&#123;</div><div class=\"line\">    <span class=\"string\">\"success\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"data\"</span> : [ <span class=\"comment\">/* 返回的数据 */</span> ]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h4><p>域名相同、端口相同、协议相同<br>","more":"<br>满足这三个条件时满足同源策略</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>JSON With Padding : 把一段 json 数据添加进来</p>\n<p>jsonp 是使用 script 来进行交互的, 因为 script 标签不受同源策略影响, 而且 script 可以执行一段 javascript 代码, 利用这个机制来绕开同源策略。</p>\n<h5 id=\"前端对-jsonp-的处理\"><a href=\"#前端对-jsonp-的处理\" class=\"headerlink\" title=\"前端对 jsonp 的处理\"></a>前端对 jsonp 的处理</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明全局函数，用来接收 jsonp 返回的数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp_callback</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//动态创建一个 script 标签</span></div><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\"><span class=\"comment\">//设置 src, 数据以 get 形势传递</span></div><div class=\"line\"><span class=\"comment\">//最重要的是要跟上一个 get 参数 callback (参数名随意, 参数的值必须是前面自己定义的全局函数名称)</span></div><div class=\"line\">script.src = <span class=\"string\">\"/test/jsonp?data=data&amp;callback=jsonp_callback\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取一个 dom 节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"body\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"comment\">//把创建好的 script 添加到页面中</span></div><div class=\"line\">body.appendChild(script);</div></pre></td></tr></table></figure>\n<h5 id=\"后台对-jsonp-的处理\"><a href=\"#后台对-jsonp-的处理\" class=\"headerlink\" title=\"后台对 jsonp 的处理\"></a>后台对 jsonp 的处理</h5><p>以 node.js 为例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.route(<span class=\"string\">'/test/jsonp'</span>)</div><div class=\"line\">  <span class=\"comment\">//声明一个 get 请求</span></div><div class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> param = req.query;</div><div class=\"line\">      <span class=\"comment\">//这个 key 值需要与前端沟通好</span></div><div class=\"line\">      <span class=\"comment\">//关系到返回的数据是否能正常执行</span></div><div class=\"line\">      <span class=\"keyword\">var</span> callbackNmae = param[<span class=\"string\">'callback'</span>]; </div><div class=\"line\">      <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">        <span class=\"string\">\"success\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">\"data\"</span> : [</div><div class=\"line\">          <span class=\"string\">\"这里返回正确的数据，与正常的 ajax 交互一样\"</span>  </div><div class=\"line\">        ]</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"comment\">//以为返回的就是一个数据对象, jsonp 需要返回一段 javascript 代码, 且是立即执行的函数</span></div><div class=\"line\">      <span class=\"comment\">//函数的参数为 json 数据</span></div><div class=\"line\">      res.send(<span class=\"string\">`<span class=\"subst\">$&#123;callbackNmae&#125;</span>(\"<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;</span>\");`</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"代理模式-server-language\"><a href=\"#代理模式-server-language\" class=\"headerlink\" title=\"代理模式 server language\"></a>代理模式 <code>server language</code></h4><p>回到开头，我们的需求是当网站前台需要访问其它站点的接口时因为受到同源策略限制, 发起的 ajax 会失败, 后面介绍了实用 jsonp 来绕过同源策略, 假如其它站点不支持 jsonp 该怎么办呢？<br>浏览器有同源策略限制，但是 后台没有限制，我们是否可以在后台这样做呢？</p>\n<p>前端发起一个请求给后台，后台接收到请求后去请求其它站点的数据，拿到数据后返回给前端。</p>\n<p>前端发起正常的 ajax</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</div><div class=\"line\">  <span class=\"comment\">//支持 XMLHttpRequest 的浏览器</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不支持 XMLHttpRequest 的浏览器使用 ActiveXObject</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.xhr\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"/test/jsonp?data=data&amp;url=http://website/api/path\"</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n<p>后台处理 ajax<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"comment\">//导入 request 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.route(<span class=\"string\">'/test/jsonp'</span>)</div><div class=\"line\">  <span class=\"comment\">//声明一个 get 请求</span></div><div class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> param = req.query;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = param.url; <span class=\"comment\">//获取目标服务器地址</span></div><div class=\"line\">      <span class=\"keyword\">delete</span> param.url; </div><div class=\"line\">      <span class=\"comment\">//发起 http 请求</span></div><div class=\"line\">      request.get(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span> : url,</div><div class=\"line\">      <span class=\"attr\">formData</span> : param</div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//返回接收到的数据</span></div><div class=\"line\">        res.send(body);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"代理配置-Nginx\"><a href=\"#代理配置-Nginx\" class=\"headerlink\" title=\"代理配置 Nginx\"></a>代理配置 Nginx</h4><p>反代理与上面的逻辑一样, 都是利用后台服务进行绕开同源策略, 上面两种方式都是需要修改后台代码的, 这种方式是在服务器层进行配置, 相对简单很多。</p>\n<p>不会安装 nginx 的请移步, 先看安装与配置文档</p>\n<p>将路由开头为 cors/api 的所有请求全部转发到另一个站点, 达到跨域请求效果</p>\n<p>nginx 配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    listen 8080;</div><div class=\"line\"></div><div class=\"line\">    root /PATH/TO/WEBROOT/;</div><div class=\"line\">    index index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    # 配置开头路由，只有路由中是以 cors/api 开头的都会默认为跨域请求</div><div class=\"line\">    location ^~ /cors/api/ &#123;</div><div class=\"line\">        proxy_pass http://origin.website/;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</div><div class=\"line\">  <span class=\"comment\">//支持 XMLHttpRequest 的浏览器</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不支持 XMLHttpRequest 的浏览器使用 ActiveXObject</span></div><div class=\"line\">    xhr=<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.xhr\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"/cors/api/test/getdata?data=data\"</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,url,<span class=\"literal\">true</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 请求地址为 /cors/api/test/getdata?data=data</span></div><div class=\"line\"><span class=\"comment\">// 真实请求地址为 : http://origin.website/test/getdata?data=data</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Access-Control-Allow-Origin\"><a href=\"#Access-Control-Allow-Origin\" class=\"headerlink\" title=\"Access-Control-Allow-Origin\"></a>Access-Control-Allow-Origin</h4><p>浏览器每一个请求不管是否跨域都会向服务器发送一个请求，询问是否可以访问，如果服务器告诉浏览器该接口你有全新访问，那么浏览器就会接收服务器返回的数据，否则会抛出异常</p>\n<p>以 node.js 为例，修改 response 信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span> (<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置请求的接口地址，允许 get / post</span></div><div class=\"line\">app.all(<span class=\"string\">'/api/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 设置允许来置所有域下的的请求，达到跨域</span></div><div class=\"line\">  res.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// * 为允许任何域访问</span></div><div class=\"line\">    <span class=\"comment\">// 如果只允许某个域名 请设置单独的域名</span></div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">\"*\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Methods\"</span>: <span class=\"string\">\"POST,GET\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Credentials\"</span>: <span class=\"string\">\"true\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html; charset=utf-8\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  res.send(&#123;</div><div class=\"line\">    <span class=\"string\">\"success\"</span> : <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"data\"</span> : [ <span class=\"comment\">/* 返回的数据 */</span> ]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(app);</div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'http://127.0.0.1:5000'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"react入门07-属性设置-children","date":"2016-12-17T14:06:00.000Z","_content":"this.props.children\nchildren是一个例外，不是跟组件的属性对应的\n表示组件的所有子节点\nHTML中有一种标签：列表 < ul > < ol > < li >\n定义一个列表组件，列表项中显示的内容，以及列表项的数量都由外部决定<!--more-->  \n \n```javascript\nvar ListComponent = React.createClass({\n  render: function(){\n    return (\n      <ul>\n        {\n          /*\n            列表项的数量以及内容不确定，在创建模板时才能确定\n            利用this.props.children从父组件获取需要展示的列表项内容\n            \n            获取到列表项内容后，需要遍历children，逐项进行设置\n            使用React.Children.map方法\n            返回值：数组对象，这里数据组中的元素是<li>\n          */\n        \n          React.Children.map(this.props.children, function(child){\n            //child是遍历得到父组件的子节点\n            return <li>{child}</li>\n          })\n        } \n      </ul>\n    )\n  }\n})\n\n//渲染\nReactDOM.render(\n  (\n    <ListComponent>\n      <h1>百度</h1>\n      <a href=\"www.baidu.com\">www.baidu.com</a>\n    </ListComponent>  \n  ),\n  document.getElementById('container')\n)\n```\n<!--more-->  \n","source":"_posts/react入门07-属性设置-children.md","raw":"---\ntitle: react入门07-属性设置-children\ndate: 2016-12-17 22:06:00\ncategories: \n  - 技术\n  - React\ntag: react\n---\nthis.props.children\nchildren是一个例外，不是跟组件的属性对应的\n表示组件的所有子节点\nHTML中有一种标签：列表 < ul > < ol > < li >\n定义一个列表组件，列表项中显示的内容，以及列表项的数量都由外部决定<!--more-->  \n \n```javascript\nvar ListComponent = React.createClass({\n  render: function(){\n    return (\n      <ul>\n        {\n          /*\n            列表项的数量以及内容不确定，在创建模板时才能确定\n            利用this.props.children从父组件获取需要展示的列表项内容\n            \n            获取到列表项内容后，需要遍历children，逐项进行设置\n            使用React.Children.map方法\n            返回值：数组对象，这里数据组中的元素是<li>\n          */\n        \n          React.Children.map(this.props.children, function(child){\n            //child是遍历得到父组件的子节点\n            return <li>{child}</li>\n          })\n        } \n      </ul>\n    )\n  }\n})\n\n//渲染\nReactDOM.render(\n  (\n    <ListComponent>\n      <h1>百度</h1>\n      <a href=\"www.baidu.com\">www.baidu.com</a>\n    </ListComponent>  \n  ),\n  document.getElementById('container')\n)\n```\n<!--more-->  \n","slug":"react入门07-属性设置-children","published":1,"updated":"2016-12-29T05:01:27.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8i003i24uu3kgb2hrp","content":"<p>this.props.children<br>children是一个例外，不是跟组件的属性对应的<br>表示组件的所有子节点<br>HTML中有一种标签：列表 &lt; ul &gt; &lt; ol &gt; &lt; li &gt;<br>定义一个列表组件，列表项中显示的内容，以及列表项的数量都由外部决定<a id=\"more\"></a>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ListComponent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">          /*</div><div class=\"line\">            列表项的数量以及内容不确定，在创建模板时才能确定</div><div class=\"line\">            利用this.props.children从父组件获取需要展示的列表项内容</div><div class=\"line\">            </div><div class=\"line\">            获取到列表项内容后，需要遍历children，逐项进行设置</div><div class=\"line\">            使用React.Children.map方法</div><div class=\"line\">            返回值：数组对象，这里数据组中的元素是<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          */</div><div class=\"line\">        </div><div class=\"line\">          React.Children.map(this.props.children, function(child)&#123;</div><div class=\"line\">            //child是遍历得到父组件的子节点</div><div class=\"line\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;child&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125; </div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  (</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListComponent</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"www.baidu.com\"</span>&gt;</span>www.baidu.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListComponent</span>&gt;</span>  </div><div class=\"line\">  ),</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<!--more-->  \n","excerpt":"<p>this.props.children<br>children是一个例外，不是跟组件的属性对应的<br>表示组件的所有子节点<br>HTML中有一种标签：列表 &lt; ul &gt; &lt; ol &gt; &lt; li &gt;<br>定义一个列表组件，列表项中显示的内容，以及列表项的数量都由外部决定","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ListComponent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        &#123;</div><div class=\"line\">          /*</div><div class=\"line\">            列表项的数量以及内容不确定，在创建模板时才能确定</div><div class=\"line\">            利用this.props.children从父组件获取需要展示的列表项内容</div><div class=\"line\">            </div><div class=\"line\">            获取到列表项内容后，需要遍历children，逐项进行设置</div><div class=\"line\">            使用React.Children.map方法</div><div class=\"line\">            返回值：数组对象，这里数据组中的元素是<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          */</div><div class=\"line\">        </div><div class=\"line\">          React.Children.map(this.props.children, function(child)&#123;</div><div class=\"line\">            //child是遍历得到父组件的子节点</div><div class=\"line\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;child&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125; </div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">//渲染</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  (</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListComponent</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"www.baidu.com\"</span>&gt;</span>www.baidu.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListComponent</span>&gt;</span>  </div><div class=\"line\">  ),</div><div class=\"line\">  document.getElementById('container')</div><div class=\"line\">)</span></div></pre></td></tr></table></figure>\n<!--more-->"},{"title":"值传递和引用引用传递","date":"2017-01-04T15:29:40.000Z","_content":"\n值传递和引用引用传递 ,对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】\n\n<!--more--> \n\n\n```javascript\nfunction test1(){\n      var a = \"1\";  \n      var b = a; //值传递 只要类型不是对象[数组，object] 就会重新复制一份值 赋值给 等号 左边的变量\n      console.log(1, a);\n      console.log(1, b);\n\n      b = 2;\n\n      console.log(2, a);\n      console.log(2, b);\n\n      function fun(c){\n        c = \"c\";\n        console.log(\"c : \",c);\n        console.log(\"a : \",a);\n      }\n\n      fun(a);\n    }\n\n\n    function test2(){\n      var a = [\"a\",\"b\",\"c\"]; //创建了新的数组，赋值了给 a\n      var b = a;  //如果在赋值的时候 右边的变量的类型是对象，就不是值传递，而是引用传递\n\n      console.log(\"a : \", a);\n      console.log(\"b : \", b);\n\n      b[0] = \"我是新元素\";\n\n      console.log(\"a : \", a);\n      console.log(\"b : \", b);\n\n      function fun(c){\n        c[0] = \"在函数里面修改了对象的值\";\n\n        console.log(\"c : \", c);\n        console.log(\"a : \", a);\n        console.log(\"b : \", b);\n      }\n\n      //fun(a);\n      a = [\"a\",\"b\",\"c\"];\n\n      console.log(\"new a : \",a);\n      console.log(\"b : \", b); // ??\n\n      // js 垃圾回收站会自己去把没用的内存清除掉\n      a = []; //清空的 是给 a 一个新的内存空间, 这个空间是一个空值\n      //性能会高一些\n      a.length = 0; // 在原来的空间把现有的值清空\n    }\n\n    // test2();\n    // js 值传递，引用传递\n    // js 对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】\n\n\n    function test3(){\n        var a = {\n          \"a\" : \"1\"\n        };\n\n        var b = a; //直接是引用传递，后果 ： 修改 b 的时候 a 会变化, 修改 a  的时候 b 会变化\n\n        // 我们需要的效果是赋值后，a 与 b 没有任何关联\n\n        var c = {\n          \"c\" : \"c\",\n          \"c1\" : [\"1\",\"2\",\"3\"]\n        };\n        // Object.assing 拷贝对象时，如果遇到元素值的类型是对象时，不会真的拷贝，而是引用传递\n        /*浅拷贝*/\n        b = Object.assign({}, c, {\n          \"a\" : 3\n        }, a);\n        //利用 JSON.stringify 把一个对象转换成字符串\n        //在把 转换后的字符串 转换成对象 【这里会创建一个新对象出来】\n        //把转换后得到的 “新对象赋值”给 b, 这个新对象跟原先的就不存在关联了\n\n        /*这个是真正的深拷贝*/\n        b = JSON.parse(JSON.stringify(b));\n\n\n\n        c[\"c1\"][1] = \"c2\"; \n\n        console.log(b);\n        console.log(c);\n    }\n\n\n    test3();\n\n```\nhttps://www.zhihu.com/question/27114726","source":"_posts/值传递和引用引用传递.md","raw":"---\ntitle: 值传递和引用引用传递\ndate: 2017-01-04 23:29:40\ncategories: \n  - 技术\n  - JavaScript\ntags: 值传递\n---\n\n值传递和引用引用传递 ,对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】\n\n<!--more--> \n\n\n```javascript\nfunction test1(){\n      var a = \"1\";  \n      var b = a; //值传递 只要类型不是对象[数组，object] 就会重新复制一份值 赋值给 等号 左边的变量\n      console.log(1, a);\n      console.log(1, b);\n\n      b = 2;\n\n      console.log(2, a);\n      console.log(2, b);\n\n      function fun(c){\n        c = \"c\";\n        console.log(\"c : \",c);\n        console.log(\"a : \",a);\n      }\n\n      fun(a);\n    }\n\n\n    function test2(){\n      var a = [\"a\",\"b\",\"c\"]; //创建了新的数组，赋值了给 a\n      var b = a;  //如果在赋值的时候 右边的变量的类型是对象，就不是值传递，而是引用传递\n\n      console.log(\"a : \", a);\n      console.log(\"b : \", b);\n\n      b[0] = \"我是新元素\";\n\n      console.log(\"a : \", a);\n      console.log(\"b : \", b);\n\n      function fun(c){\n        c[0] = \"在函数里面修改了对象的值\";\n\n        console.log(\"c : \", c);\n        console.log(\"a : \", a);\n        console.log(\"b : \", b);\n      }\n\n      //fun(a);\n      a = [\"a\",\"b\",\"c\"];\n\n      console.log(\"new a : \",a);\n      console.log(\"b : \", b); // ??\n\n      // js 垃圾回收站会自己去把没用的内存清除掉\n      a = []; //清空的 是给 a 一个新的内存空间, 这个空间是一个空值\n      //性能会高一些\n      a.length = 0; // 在原来的空间把现有的值清空\n    }\n\n    // test2();\n    // js 值传递，引用传递\n    // js 对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】\n\n\n    function test3(){\n        var a = {\n          \"a\" : \"1\"\n        };\n\n        var b = a; //直接是引用传递，后果 ： 修改 b 的时候 a 会变化, 修改 a  的时候 b 会变化\n\n        // 我们需要的效果是赋值后，a 与 b 没有任何关联\n\n        var c = {\n          \"c\" : \"c\",\n          \"c1\" : [\"1\",\"2\",\"3\"]\n        };\n        // Object.assing 拷贝对象时，如果遇到元素值的类型是对象时，不会真的拷贝，而是引用传递\n        /*浅拷贝*/\n        b = Object.assign({}, c, {\n          \"a\" : 3\n        }, a);\n        //利用 JSON.stringify 把一个对象转换成字符串\n        //在把 转换后的字符串 转换成对象 【这里会创建一个新对象出来】\n        //把转换后得到的 “新对象赋值”给 b, 这个新对象跟原先的就不存在关联了\n\n        /*这个是真正的深拷贝*/\n        b = JSON.parse(JSON.stringify(b));\n\n\n\n        c[\"c1\"][1] = \"c2\"; \n\n        console.log(b);\n        console.log(c);\n    }\n\n\n    test3();\n\n```\nhttps://www.zhihu.com/question/27114726","slug":"值传递和引用引用传递","published":1,"updated":"2017-01-05T00:57:31.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8q003l24uuz5wc9qmq","content":"<p>值传递和引用引用传递 ,对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】</p>\n<a id=\"more\"></a> \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">      <span class=\"keyword\">var</span> b = a; <span class=\"comment\">//值传递 只要类型不是对象[数组，object] 就会重新复制一份值 赋值给 等号 左边的变量</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, b);</div><div class=\"line\"></div><div class=\"line\">      b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>, b);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">        c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c : \"</span>,c);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>,a);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      fun(a);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>]; <span class=\"comment\">//创建了新的数组，赋值了给 a</span></div><div class=\"line\">      <span class=\"keyword\">var</span> b = a;  <span class=\"comment\">//如果在赋值的时候 右边的变量的类型是对象，就不是值传递，而是引用传递</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\"></div><div class=\"line\">      b[<span class=\"number\">0</span>] = <span class=\"string\">\"我是新元素\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"string\">\"在函数里面修改了对象的值\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c : \"</span>, c);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//fun(a);</span></div><div class=\"line\">      a = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"new a : \"</span>,a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b); <span class=\"comment\">// ??</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// js 垃圾回收站会自己去把没用的内存清除掉</span></div><div class=\"line\">      a = []; <span class=\"comment\">//清空的 是给 a 一个新的内存空间, 这个空间是一个空值</span></div><div class=\"line\">      <span class=\"comment\">//性能会高一些</span></div><div class=\"line\">      a.length = <span class=\"number\">0</span>; <span class=\"comment\">// 在原来的空间把现有的值清空</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// test2();</span></div><div class=\"line\">    <span class=\"comment\">// js 值传递，引用传递</span></div><div class=\"line\">    <span class=\"comment\">// js 对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">          <span class=\"string\">\"a\"</span> : <span class=\"string\">\"1\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> b = a; <span class=\"comment\">//直接是引用传递，后果 ： 修改 b 的时候 a 会变化, 修改 a  的时候 b 会变化</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 我们需要的效果是赋值后，a 与 b 没有任何关联</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> c = &#123;</div><div class=\"line\">          <span class=\"string\">\"c\"</span> : <span class=\"string\">\"c\"</span>,</div><div class=\"line\">          <span class=\"string\">\"c1\"</span> : [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>]</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// Object.assing 拷贝对象时，如果遇到元素值的类型是对象时，不会真的拷贝，而是引用传递</span></div><div class=\"line\">        <span class=\"comment\">/*浅拷贝*/</span></div><div class=\"line\">        b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, c, &#123;</div><div class=\"line\">          <span class=\"string\">\"a\"</span> : <span class=\"number\">3</span></div><div class=\"line\">        &#125;, a);</div><div class=\"line\">        <span class=\"comment\">//利用 JSON.stringify 把一个对象转换成字符串</span></div><div class=\"line\">        <span class=\"comment\">//在把 转换后的字符串 转换成对象 【这里会创建一个新对象出来】</span></div><div class=\"line\">        <span class=\"comment\">//把转换后得到的 “新对象赋值”给 b, 这个新对象跟原先的就不存在关联了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*这个是真正的深拷贝*/</span></div><div class=\"line\">        b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(b));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        c[<span class=\"string\">\"c1\"</span>][<span class=\"number\">1</span>] = <span class=\"string\">\"c2\"</span>; </div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(b);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    test3();</div></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/question/27114726\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/27114726</a></p>\n","excerpt":"<p>值传递和引用引用传递 ,对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">      <span class=\"keyword\">var</span> b = a; <span class=\"comment\">//值传递 只要类型不是对象[数组，object] 就会重新复制一份值 赋值给 等号 左边的变量</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, b);</div><div class=\"line\"></div><div class=\"line\">      b = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>, b);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">        c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c : \"</span>,c);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>,a);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      fun(a);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>]; <span class=\"comment\">//创建了新的数组，赋值了给 a</span></div><div class=\"line\">      <span class=\"keyword\">var</span> b = a;  <span class=\"comment\">//如果在赋值的时候 右边的变量的类型是对象，就不是值传递，而是引用传递</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\"></div><div class=\"line\">      b[<span class=\"number\">0</span>] = <span class=\"string\">\"我是新元素\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"string\">\"在函数里面修改了对象的值\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c : \"</span>, c);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a : \"</span>, a);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//fun(a);</span></div><div class=\"line\">      a = [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"new a : \"</span>,a);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b : \"</span>, b); <span class=\"comment\">// ??</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// js 垃圾回收站会自己去把没用的内存清除掉</span></div><div class=\"line\">      a = []; <span class=\"comment\">//清空的 是给 a 一个新的内存空间, 这个空间是一个空值</span></div><div class=\"line\">      <span class=\"comment\">//性能会高一些</span></div><div class=\"line\">      a.length = <span class=\"number\">0</span>; <span class=\"comment\">// 在原来的空间把现有的值清空</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// test2();</span></div><div class=\"line\">    <span class=\"comment\">// js 值传递，引用传递</span></div><div class=\"line\">    <span class=\"comment\">// js 对象深拷贝 浅拷贝  【引用传递就是浅拷贝的一种】</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">          <span class=\"string\">\"a\"</span> : <span class=\"string\">\"1\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> b = a; <span class=\"comment\">//直接是引用传递，后果 ： 修改 b 的时候 a 会变化, 修改 a  的时候 b 会变化</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 我们需要的效果是赋值后，a 与 b 没有任何关联</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> c = &#123;</div><div class=\"line\">          <span class=\"string\">\"c\"</span> : <span class=\"string\">\"c\"</span>,</div><div class=\"line\">          <span class=\"string\">\"c1\"</span> : [<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>]</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// Object.assing 拷贝对象时，如果遇到元素值的类型是对象时，不会真的拷贝，而是引用传递</span></div><div class=\"line\">        <span class=\"comment\">/*浅拷贝*/</span></div><div class=\"line\">        b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, c, &#123;</div><div class=\"line\">          <span class=\"string\">\"a\"</span> : <span class=\"number\">3</span></div><div class=\"line\">        &#125;, a);</div><div class=\"line\">        <span class=\"comment\">//利用 JSON.stringify 把一个对象转换成字符串</span></div><div class=\"line\">        <span class=\"comment\">//在把 转换后的字符串 转换成对象 【这里会创建一个新对象出来】</span></div><div class=\"line\">        <span class=\"comment\">//把转换后得到的 “新对象赋值”给 b, 这个新对象跟原先的就不存在关联了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*这个是真正的深拷贝*/</span></div><div class=\"line\">        b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(b));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        c[<span class=\"string\">\"c1\"</span>][<span class=\"number\">1</span>] = <span class=\"string\">\"c2\"</span>; </div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(b);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    test3();</div></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/question/27114726\">https://www.zhihu.com/question/27114726</a></p>"},{"title":"每一段旅途都有他的意义[一]","date":"2015-08-28T15:29:10.000Z","_content":" \n恍恍惚之间，又一个暑假来临，朋友圈当然少不了一些晒出游的照片。唉！我只能感叹，暑假与我缘分已尽，都各自散去。出来工作也快一年了，这一年里难免会怀恋在学校每年一次外出写生的经历；每个暑假父母总会抽空带着我们去旅游几天；或是盼着能有个毕业旅行。\n<!--more-->\n\n与暑假告别后， 庆幸的是，部门经理为我们争取到公司福利。让我们技术部自己定时间出游三天，缓解下工作压力吧！由于一直没选好目的地，出游这事拖了许久，直到8月初终于 确定了地方，西安（因为西安是中国历史文化比较强烈的一个城市），华山（都说华山险，有挑战性，网上的风景照也非常吸引人）。确定目的地后，开始规划行 程，预定车票，查看旅游攻略。由于一些个人原因及公事原因，出游时间最终定在了8月21-23日三天。我只能说：“计划真的是永远赶不上化“  \n\n此次旅行比以往任何一次都有意义，也许将会成为终身难忘的一次旅行。\n\n8 月20日下班后，各自回家吃完晚饭，然后重庆北站集合，21:53乘坐 K820次列车。恰好今天又是七夕情人节，嘿嘿...有一火车的人一起过节了。8月21日早上七点多，我们在渭南站下了火车，当来到一个陌生的城市，感觉 一切都是那么的新奇。先找了个地方吃早餐，每人点了一碗稀饭，一个包子，东北的稀饭居然是小米粥，包子的样式挺好看的，不过看着没什么食欲，吃到嘴里才发 现味道真棒、真好吃。吃完早餐就正式开始向景点出发。\n\n在 西安一共待了将近两天的时间。我们去了秦陵地宫、秦始皇兵马俑、回民街、西安古城墙、陕西博物馆。在西安的景点也就是走走看看，拍拍照什么滴。几个景点大 部分都是关于西安古代历史的，对于一个不怎么了解历史的我，也觉得没什么好留恋和记录的东西了，唯独能有点记录的就数西安古城墙，西安古城墙是中国现存规 模最大、保存最完整的古代城墙。现存城墙为明代建筑，全长13.72公里。\n\n我 们是21号晚上七点多去的古城墙，这个时间点去就不会感受那烈日的暴晒了，城墙一共四个门，分别是长乐门（东门）、永宁门（南门）、安定门（西门）、安远 门（北门），我们从西门进的，进入城墙后，拍照肯定是少不了的，在城墙下面拍够照片后，就到城墙上面去租了自行车，三个男同事，每人租了辆单人车，传姐不 会骑自行车，我和她就租了个双人车。这个时候骑自行车的人不算太多，在城墙宽阔的道路上，迎着城墙上吹拂过的一阵阵微风，我们自由自在的骑行着，不用想任 何事，将所有烦恼抛之脑后，尽情的放松，尽情的享受着这一刻。岂是一个爽字可以形容。到了天黑的时候，墙外灯火通明，墙内古色古香，墙外是繁华的西安，那 么墙内就是当年的盛世长安城了。不过刚开始是嗨翻、爽翻了，骑到后面已不是一个累字能了结，即使再累，我们也一心想要的奔向终点，但在奔向终点的途中仿佛 是迷了路，感觉城墙内都是一个样子，每经过一个点都似曾来过，又似曾从未经过，不知道终点究竟还有多远，前方的道路还有多长，但我们依然坚持向前骑行且乐 在其中。我们围着城墙转了一圈零四分之一  [ 西门（进城）— 南门 — 东门 —北门 — 西门 — 南门（出城）]。整个过程用了将近两小时。下车后，个个都喊屁股疼、腿软、已累得筋疲力尽，但这其中的累似乎也是种享受。\n\n![](http://b101.photo.store.qq.com/psb?/V105GT1029YVtn/nAnNbYjarjnVF53s5RHYkVCb6Z.OJwoNJxmnqf64Ee0!/b/dGUAAAAAAAAA&ek=1&kp=1&pt=0&bo=gALAAwAAAAAFAGI!&su=0247099265&tm=1482580800&sce=0-12-12&rf=2-9)","source":"_posts/每一段旅途都有他的意义[一].md","raw":"---\ntitle: '每一段旅途都有他的意义[一]'\ndate: 2015-08-28 23:29:10\ncategories: 生活\ntags: 旅途 \n---\n \n恍恍惚之间，又一个暑假来临，朋友圈当然少不了一些晒出游的照片。唉！我只能感叹，暑假与我缘分已尽，都各自散去。出来工作也快一年了，这一年里难免会怀恋在学校每年一次外出写生的经历；每个暑假父母总会抽空带着我们去旅游几天；或是盼着能有个毕业旅行。\n<!--more-->\n\n与暑假告别后， 庆幸的是，部门经理为我们争取到公司福利。让我们技术部自己定时间出游三天，缓解下工作压力吧！由于一直没选好目的地，出游这事拖了许久，直到8月初终于 确定了地方，西安（因为西安是中国历史文化比较强烈的一个城市），华山（都说华山险，有挑战性，网上的风景照也非常吸引人）。确定目的地后，开始规划行 程，预定车票，查看旅游攻略。由于一些个人原因及公事原因，出游时间最终定在了8月21-23日三天。我只能说：“计划真的是永远赶不上化“  \n\n此次旅行比以往任何一次都有意义，也许将会成为终身难忘的一次旅行。\n\n8 月20日下班后，各自回家吃完晚饭，然后重庆北站集合，21:53乘坐 K820次列车。恰好今天又是七夕情人节，嘿嘿...有一火车的人一起过节了。8月21日早上七点多，我们在渭南站下了火车，当来到一个陌生的城市，感觉 一切都是那么的新奇。先找了个地方吃早餐，每人点了一碗稀饭，一个包子，东北的稀饭居然是小米粥，包子的样式挺好看的，不过看着没什么食欲，吃到嘴里才发 现味道真棒、真好吃。吃完早餐就正式开始向景点出发。\n\n在 西安一共待了将近两天的时间。我们去了秦陵地宫、秦始皇兵马俑、回民街、西安古城墙、陕西博物馆。在西安的景点也就是走走看看，拍拍照什么滴。几个景点大 部分都是关于西安古代历史的，对于一个不怎么了解历史的我，也觉得没什么好留恋和记录的东西了，唯独能有点记录的就数西安古城墙，西安古城墙是中国现存规 模最大、保存最完整的古代城墙。现存城墙为明代建筑，全长13.72公里。\n\n我 们是21号晚上七点多去的古城墙，这个时间点去就不会感受那烈日的暴晒了，城墙一共四个门，分别是长乐门（东门）、永宁门（南门）、安定门（西门）、安远 门（北门），我们从西门进的，进入城墙后，拍照肯定是少不了的，在城墙下面拍够照片后，就到城墙上面去租了自行车，三个男同事，每人租了辆单人车，传姐不 会骑自行车，我和她就租了个双人车。这个时候骑自行车的人不算太多，在城墙宽阔的道路上，迎着城墙上吹拂过的一阵阵微风，我们自由自在的骑行着，不用想任 何事，将所有烦恼抛之脑后，尽情的放松，尽情的享受着这一刻。岂是一个爽字可以形容。到了天黑的时候，墙外灯火通明，墙内古色古香，墙外是繁华的西安，那 么墙内就是当年的盛世长安城了。不过刚开始是嗨翻、爽翻了，骑到后面已不是一个累字能了结，即使再累，我们也一心想要的奔向终点，但在奔向终点的途中仿佛 是迷了路，感觉城墙内都是一个样子，每经过一个点都似曾来过，又似曾从未经过，不知道终点究竟还有多远，前方的道路还有多长，但我们依然坚持向前骑行且乐 在其中。我们围着城墙转了一圈零四分之一  [ 西门（进城）— 南门 — 东门 —北门 — 西门 — 南门（出城）]。整个过程用了将近两小时。下车后，个个都喊屁股疼、腿软、已累得筋疲力尽，但这其中的累似乎也是种享受。\n\n![](http://b101.photo.store.qq.com/psb?/V105GT1029YVtn/nAnNbYjarjnVF53s5RHYkVCb6Z.OJwoNJxmnqf64Ee0!/b/dGUAAAAAAAAA&ek=1&kp=1&pt=0&bo=gALAAwAAAAAFAGI!&su=0247099265&tm=1482580800&sce=0-12-12&rf=2-9)","slug":"每一段旅途都有他的意义[一]","published":1,"updated":"2016-12-29T05:01:27.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8t003n24uudl8umvek","content":"<p>恍恍惚之间，又一个暑假来临，朋友圈当然少不了一些晒出游的照片。唉！我只能感叹，暑假与我缘分已尽，都各自散去。出来工作也快一年了，这一年里难免会怀恋在学校每年一次外出写生的经历；每个暑假父母总会抽空带着我们去旅游几天；或是盼着能有个毕业旅行。<br><a id=\"more\"></a></p>\n<p>与暑假告别后， 庆幸的是，部门经理为我们争取到公司福利。让我们技术部自己定时间出游三天，缓解下工作压力吧！由于一直没选好目的地，出游这事拖了许久，直到8月初终于 确定了地方，西安（因为西安是中国历史文化比较强烈的一个城市），华山（都说华山险，有挑战性，网上的风景照也非常吸引人）。确定目的地后，开始规划行 程，预定车票，查看旅游攻略。由于一些个人原因及公事原因，出游时间最终定在了8月21-23日三天。我只能说：“计划真的是永远赶不上化“  </p>\n<p>此次旅行比以往任何一次都有意义，也许将会成为终身难忘的一次旅行。</p>\n<p>8 月20日下班后，各自回家吃完晚饭，然后重庆北站集合，21:53乘坐 K820次列车。恰好今天又是七夕情人节，嘿嘿…有一火车的人一起过节了。8月21日早上七点多，我们在渭南站下了火车，当来到一个陌生的城市，感觉 一切都是那么的新奇。先找了个地方吃早餐，每人点了一碗稀饭，一个包子，东北的稀饭居然是小米粥，包子的样式挺好看的，不过看着没什么食欲，吃到嘴里才发 现味道真棒、真好吃。吃完早餐就正式开始向景点出发。</p>\n<p>在 西安一共待了将近两天的时间。我们去了秦陵地宫、秦始皇兵马俑、回民街、西安古城墙、陕西博物馆。在西安的景点也就是走走看看，拍拍照什么滴。几个景点大 部分都是关于西安古代历史的，对于一个不怎么了解历史的我，也觉得没什么好留恋和记录的东西了，唯独能有点记录的就数西安古城墙，西安古城墙是中国现存规 模最大、保存最完整的古代城墙。现存城墙为明代建筑，全长13.72公里。</p>\n<p>我 们是21号晚上七点多去的古城墙，这个时间点去就不会感受那烈日的暴晒了，城墙一共四个门，分别是长乐门（东门）、永宁门（南门）、安定门（西门）、安远 门（北门），我们从西门进的，进入城墙后，拍照肯定是少不了的，在城墙下面拍够照片后，就到城墙上面去租了自行车，三个男同事，每人租了辆单人车，传姐不 会骑自行车，我和她就租了个双人车。这个时候骑自行车的人不算太多，在城墙宽阔的道路上，迎着城墙上吹拂过的一阵阵微风，我们自由自在的骑行着，不用想任 何事，将所有烦恼抛之脑后，尽情的放松，尽情的享受着这一刻。岂是一个爽字可以形容。到了天黑的时候，墙外灯火通明，墙内古色古香，墙外是繁华的西安，那 么墙内就是当年的盛世长安城了。不过刚开始是嗨翻、爽翻了，骑到后面已不是一个累字能了结，即使再累，我们也一心想要的奔向终点，但在奔向终点的途中仿佛 是迷了路，感觉城墙内都是一个样子，每经过一个点都似曾来过，又似曾从未经过，不知道终点究竟还有多远，前方的道路还有多长，但我们依然坚持向前骑行且乐 在其中。我们围着城墙转了一圈零四分之一  [ 西门（进城）— 南门 — 东门 —北门 — 西门 — 南门（出城）]。整个过程用了将近两小时。下车后，个个都喊屁股疼、腿软、已累得筋疲力尽，但这其中的累似乎也是种享受。</p>\n<p><img src=\"http://b101.photo.store.qq.com/psb?/V105GT1029YVtn/nAnNbYjarjnVF53s5RHYkVCb6Z.OJwoNJxmnqf64Ee0!/b/dGUAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gALAAwAAAAAFAGI!&amp;su=0247099265&amp;tm=1482580800&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n","excerpt":"<p>恍恍惚之间，又一个暑假来临，朋友圈当然少不了一些晒出游的照片。唉！我只能感叹，暑假与我缘分已尽，都各自散去。出来工作也快一年了，这一年里难免会怀恋在学校每年一次外出写生的经历；每个暑假父母总会抽空带着我们去旅游几天；或是盼着能有个毕业旅行。<br>","more":"</p>\n<p>与暑假告别后， 庆幸的是，部门经理为我们争取到公司福利。让我们技术部自己定时间出游三天，缓解下工作压力吧！由于一直没选好目的地，出游这事拖了许久，直到8月初终于 确定了地方，西安（因为西安是中国历史文化比较强烈的一个城市），华山（都说华山险，有挑战性，网上的风景照也非常吸引人）。确定目的地后，开始规划行 程，预定车票，查看旅游攻略。由于一些个人原因及公事原因，出游时间最终定在了8月21-23日三天。我只能说：“计划真的是永远赶不上化“  </p>\n<p>此次旅行比以往任何一次都有意义，也许将会成为终身难忘的一次旅行。</p>\n<p>8 月20日下班后，各自回家吃完晚饭，然后重庆北站集合，21:53乘坐 K820次列车。恰好今天又是七夕情人节，嘿嘿…有一火车的人一起过节了。8月21日早上七点多，我们在渭南站下了火车，当来到一个陌生的城市，感觉 一切都是那么的新奇。先找了个地方吃早餐，每人点了一碗稀饭，一个包子，东北的稀饭居然是小米粥，包子的样式挺好看的，不过看着没什么食欲，吃到嘴里才发 现味道真棒、真好吃。吃完早餐就正式开始向景点出发。</p>\n<p>在 西安一共待了将近两天的时间。我们去了秦陵地宫、秦始皇兵马俑、回民街、西安古城墙、陕西博物馆。在西安的景点也就是走走看看，拍拍照什么滴。几个景点大 部分都是关于西安古代历史的，对于一个不怎么了解历史的我，也觉得没什么好留恋和记录的东西了，唯独能有点记录的就数西安古城墙，西安古城墙是中国现存规 模最大、保存最完整的古代城墙。现存城墙为明代建筑，全长13.72公里。</p>\n<p>我 们是21号晚上七点多去的古城墙，这个时间点去就不会感受那烈日的暴晒了，城墙一共四个门，分别是长乐门（东门）、永宁门（南门）、安定门（西门）、安远 门（北门），我们从西门进的，进入城墙后，拍照肯定是少不了的，在城墙下面拍够照片后，就到城墙上面去租了自行车，三个男同事，每人租了辆单人车，传姐不 会骑自行车，我和她就租了个双人车。这个时候骑自行车的人不算太多，在城墙宽阔的道路上，迎着城墙上吹拂过的一阵阵微风，我们自由自在的骑行着，不用想任 何事，将所有烦恼抛之脑后，尽情的放松，尽情的享受着这一刻。岂是一个爽字可以形容。到了天黑的时候，墙外灯火通明，墙内古色古香，墙外是繁华的西安，那 么墙内就是当年的盛世长安城了。不过刚开始是嗨翻、爽翻了，骑到后面已不是一个累字能了结，即使再累，我们也一心想要的奔向终点，但在奔向终点的途中仿佛 是迷了路，感觉城墙内都是一个样子，每经过一个点都似曾来过，又似曾从未经过，不知道终点究竟还有多远，前方的道路还有多长，但我们依然坚持向前骑行且乐 在其中。我们围着城墙转了一圈零四分之一  [ 西门（进城）— 南门 — 东门 —北门 — 西门 — 南门（出城）]。整个过程用了将近两小时。下车后，个个都喊屁股疼、腿软、已累得筋疲力尽，但这其中的累似乎也是种享受。</p>\n<p><img src=\"http://b101.photo.store.qq.com/psb?/V105GT1029YVtn/nAnNbYjarjnVF53s5RHYkVCb6Z.OJwoNJxmnqf64Ee0!/b/dGUAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gALAAwAAAAAFAGI!&amp;su=0247099265&amp;tm=1482580800&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>"},{"title":"年终了，这一年都干了些啥！！","date":"2016-12-24T05:51:57.000Z","toc":true,"_content":"\n#### 【前言】\n\n2016年剩余的天数已屈指可数了，往往每到这个时候总会感叹时间过得真快呀！一年又完了。不过今年我似乎没有时间过得快的感叹！但也不觉得慢。只觉得今年是这二十三年以来最苦逼却又是最有意义的一年。<!--more-->\n\n从小到大一直都生活在迷茫之中，没有目标，也从未真正努力过，而这一年似乎没有那么迷茫了。\n\n来说奇怪， 现在脑海里只留下了四月之后的所有经历。四月之前的记忆仿佛被抹掉了一样，或许是四月之前 仍然是生活得没有一点意义吧！四月之后可以说是我人生的又一大 转折点。\n\n#### 【远离舒适安逸的现状】\n![](/css/images/1478248872.jpg)\n毕业之后就一直在一家10来余人的私企互联网公司做前端，每天早九晚六，半年调一次薪资，工作相当轻松，每天在后台管理生成下文章，偶尔写一两个HTML页面；不忙的时候可能也就一周会写一个HTML页面，一个CSS样式，JS基本上不会自己写，都是网上copy下来改。当然 偶尔还是会忙上一段时间，比如公司网站的PC端需要迭代改版，要新开发移动端、做webApp，就又要做设计又要coding，不过时间节点都相当充裕。除了忙公司的事之外，我们还自己做过三个项目，那期间忙起来可比忙公事忙多了，但一个也没成功过，渐渐的也对我们个Team失去了信心。在这样的环境下我也感觉不到任何压力，这种状态很不好，再这样下去，生活只会越来越浑浑噩噩，不求进取。于是乎有了辞职的念头。\n\n在辞职之前，先是在几个前端群里解了下现在前端找工作的趋势，当我在一个群里说想换工作的时候，群里面有上很6的高级前端看到了(后来拜了这个很6的高级前端为师)，师傅说他可以内推我到他们公司(中移物联网)去面试。之后问了我几个关于前端的问题：\n\n用过transform，animation吗？\n\n了解AMD或CMD规范吗？\n\n知道\"use strict\"吗？\n\n能说下对闭包的理解吗？\n\n用过SVN没？\n\n阿西八！只知道transform，animation是CSS3的属性且还很少用过。其他的是些什么鬼，第一次听说。后来师傅说，以你目前的水平，还是先别跳槽吧！先在公司花两个月时间好好学习提升下自己，免得到时面试尴尬！后来在网上看了下前端岗位的招聘要求，才知道自己在前端这个行业脱节的已经不是点吧点了，甚至都觉得自己根本不是前端。工作后的这一年半，我真不知道自己一天都在干嘛，看似很努力，实际上还是在浑浑噩噩的渡过每一天，我也从来没真正去了解过前端这个行业所有掌握的知识领域。去年说要好好学下JQuery最终也半途而废了。\n\n即使知道自己在前端这个行业已经脱节了，我也并没有选择继续留在公司花一两个小时间来学习，或许是觉得留在这里也并不会好好学习的，清明节假期一过，我便提出辞职！告别了我人生第一份工作。\n\n辞职之后花了一个星期的时间补了下JS的基础知识，这期间师傅教先了我怎么用SVN，说下家公司肯定用得着。\n\n####  【仿佛回到刚毕业】\n\n![](/css/images/1453345771.jpg)\n\n当我再次面临找工作的时候，仿佛回到了刚的毕业找工作的情景，感觉自己什么都不会，唯一不同的就是简历上的内容能丰富些了，实则这些丰富了简历的内容并没有什么含金量。共投了十来份简历，面试了四家。\t\n\n面试的时候经常会遇到对于面试官问的问题一脸懵逼，面试的第一家公司问会不会Sass, gulp, Angular等技能，what ?  这都是些啥， 一个都不会。虽然对于面试问题的回答都是不会、不知道，最终面试还是通过了。当时是面试完了就直接给我说：如果我愿意来明天就可以来上班，其他都好薪资比之前要低，这就什么都不好了，但又想谁叫自己现在技术这么low呢？能有公司收留我就很不错了，而且面试的刘老师说的是：只要我在试用期间掌握了他说的那些技术，转正后的工资可以翻倍涨。所以暂时可以先把工资抛一边，能学东西最重要。 本来是打算就在这家公司上班，后面的面试都没打算去了。但想到薪资心里始终还是有些不甘心，而且这才面一家，说不定多面两家会有更好的选择呢？\n\n接着又面试了 第二，三家，这两次的面试也就那样，面试后来也没结果。\n\n第四家公司的面试是我工作以来所有面试中最正式的一家，填完表后先做了一套逻辑题，然后人事面试问了各种问题，再是技术的Leader来面试。 这家技术上的问题相比第一家公司的问题要简单些，至少有些问题我能回答得上来，有些也是有连蒙带猜才答对，也有不知道、不会、忘记了一系列的回答。\n\n面试完后让我回家等结果，说到时会通知是复试或直接入职。其实当时还是很想来这家公司上班的，但自我感觉肯定没戏。面试的时候说了不少的不会、不知道，而且期望薪资还要还不低。感谢上帝，五点多钟人事打来电话说面试通过了。然后谈下了公司的福利及薪资待遇，薪资可以开到我的期望薪资，而且转正了还可根据能力往上调。我有点小激动了！真没想到能收到这家公司的offer。\n\n#### 【陷入选择困难症】\n\n不过收到了第四家的offer后又挺纠结的，本来开始已经打算就去第一家公司入职的，这下到要选择哪家呢？考虑了半天，还抛了硬币，还是薪资高的的有诱惑力些，最终选择了第四家。\n\n周一准时来到公司报道，公司的小伙伴们大多都是90后，对新同事也相当的热情。公司氛围还不错，来到新公司师傅教的SVN首先就派上了用场，一来就先装SVN更新代码，然后小组长分配任务，分配的任务是以前从来没接触过完全不会做，为了完成任务就只能不断去请教同事，每个同事好像也都忙得不可开交，我实在不忍心打扰，但又不得不问。在同事的帮助下加班到9：30，才完成了自己的工作任务。第二天，我发现我昨天写的代码小组长又全部重写了一遍，但他啥也没说。看了之后好过意不去，那明明是我的工作，我不但要麻烦他来教我，最后搞得他还得重做一遍，而且大家都挺忙的。后来又得知我们这个项目的时间节点就快到了，感觉压力山大，不但帮不到项目组，反倒还会拖累项目进度。\n\n经过这两天的事，第二天我便想辞职了，或许是不知道该如何来缓解这种压力，而选择了逃避吧！也或许是觉得得不到的才是最好的，结果失去了才想要珍惜。\n\n心想着如果去第一家公司会不会好一点呢，面试的刘老师给我说的是，试用期就安排我写点页面，力所能及的事，其余时间让我自学。于是我又给第一家公司打了电话，问他们招到合适的前端没，厚脸皮的说我还是想去他们那上班， 是否还有这个机会，结果还可以去。通完电话后我在QQ上给在职公司的技术leader黄老师说了离职的事，当时黄老师很忙，给我回复了一句 \"解决问题的方法不止一个，等他忙完面谈\"\n\n面谈过程中，黄老师问到我离职的原因，我说了这两天的工作情况以及自己的一些想法，自己技术太low,项目赶时间，自己一点忙都帮不上，还麻烦别人影响他人开发进度。黄老师说：\"你才上班第二天，新人都有个适应过程，现在不会也没关系，Ajax也不难，很快就学会了，项目上让小组长先给我安排些我能做的任务，让我不必着急做决定辞职，如果工作一周后还不适应再做决定也不迟\"  其实当时是走是留我又犹豫了，如果再等一 周第一家公司肯定是去不了了。后来还是执意选择了离开。如果当时打电话第一家公司说不要了，在这家公司不论再怎么艰难我都会坚持下去的。\n\n中午下班后就离开了公司来到面试的第一家公司，来到新公司后，可能是反反复复的说不来然后又来的原因吧，给同事的留下的第一印象肯定遭透了，如果是因为这个原因留下了不好印象，我也会在以后的工作中好好努力，能有个好的印象。感觉同事们对我都不理不彩的，也许是自己想多了，之前公司的小伙伴那么热情，两家公司同事的态度对比太大，心里有那么一丢丢失落。但我只是个来工作的新人，又不是重要人物，凭什么人家都要热情欢迎你呢。\n\n#### 【后悔当初的离开】\n\n![](/css/images/1451784209.jpg)\n\n来到新公司又感觉特别压抑，第二天加班到十点半，九点多的时候妈妈打来电话问新下班没，我说还在加班，妈妈关心到这么晚了还在加班，说着说着，差点哭了，因为在忙，没说两句就挂了，下班后给妈妈回了电话，在车上说着说着泪水又开始打转，我强忍着没哭，一下了车就忍不住了，哭得个稀里哗啦的，哭不是因为加班太累而哭，而是因为这两天经历，在新的公司上了两天班，我又后悔离开了上一家公司。我恨自己做出的这些选择，为什么总是有诸多不满，不管什么结果都是自己选择的还好意思哭。妈妈安慰着我说，不想去上班就不去，你就在家耍着，耍够了想上班了再找工作，本来之前就叫你辞了职在家不着急找工作，是你自己硬要着急找工作，妈妈越是这么纵然我，就哭得越伤心了，跟妈妈通完电话，擦干泪水，跟一闺蜜打了电话倾了一翻，闺蜜也说做得 不开心就不做了，别委屈了自己，这个月不准急着找工作了，等完五一再找工作，后来我也决定不去了。\n\n第二天一早，给刘老师了发了条QQ信息，说了辞职的事。\n\n他问是不是因为加班才要辞职，如果是加班，可以尽量不安排我加班，我说跟加班没关系.\n\n他又问是不是薪资问题，我回答说：跟薪资还是有点关系，觉得太低了。\n\n后来刘老师说，待遇可以给我调下，试用期在原来的基础上涨1K，等掌握一些技能后再涨，如果觉得可以，吃完中午下午就去回公司来上班。\n\n我想着，就算辞了我肯定不会耍到五一后再找工作，而且毕竟现在技术有限呀！下午竟然又厚着脸皮回到了公司。\n\n#### 【再次辞职】\n\n在这家公司始终有诸多不适，才做了一个月就又想辞职，但那个时候公司又忙，正是用人之际，也就没提，刚好做满两个月，又新招了两个前端，我提出了辞职了，提出辞职的时候，刘老师又说是不是因为加班，或是薪资的原因，他说薪资可以再次给我调整了，其实说到涨薪资犹豫了一下还要不要辞，毕竟工作也不好找，经过深思熟虑，还是辞职了。\n\n这两个月里一边工作一边学习，还是有了不少收获，学会使用浏览器的控制台调试JS； sass, gulp ,ionic angular这些都入门简单的都会用了。也掌握了更多做移动端的知识。\n\n这次辞职之后也没着急找工作，甚至不想做前端了，也就没有投简历，但简历还是在几个招聘网公开了，有主动联系的就去面试看看。\n\n刚好周五辞职，周未就收到两家公司周一的面试邀请，上午一家下午一家，本想着如果这两家公司面试不过，就真不做前端了，去做点自己想做的事，不巧的是两家公司面试都通过了，经过上一次的教训，这次可要慎重选择了，最后选择了海云数据。\n\n####  【又开始了新的工作】\n\n周二入职开始上班，进公司前半个月，先熟悉公司的项目，项目所需要掌握的技术，公司产品（图易）的使用。前端组的小伙伴大部分都是今年毕业的，但看他们一个个coding都比我6。感觉自己是前端组最low的一个。而且刚开始在公司接触的人学历要么本科要么研究生，难道就我一个是专科？后来才知道还是有一部分人也是专科毕业。但这次我不会因为这些原因而感到有压力又干个一两天就辞职了。\n\n八月初公司一个新项目启动了，新项目组刚开始前端安排了三个人，后来人员调动只有两个前端我是其中之一。安排到了新项目真是悲喜交加呀！这个项目是公司重庆这边打头阵的一个新项目，因此Leader都比较重视。我生 怕自己做不好，但不管做不做得好，来公司总得做活路吧！\n\n嗯！拿到需求就干不要怂。\n\n进入开发模式第一步：定义接口，哇哦！不怂才怪，什么是接口？怎么定义？听说是要自己先写一份能跑起来的JSON格式的数据，呐哩！JOSN又是什么鬼，这个名字好像以前倒是听过，不但不知道格式长什么的。不会不知道不代表不做呀！问呗！问着问着终于定义好了一份像样的接口。只是看着像样，后来跟后端讨论的时候漏洞百出。\n\n第二步：还原设计稿，这一步倒是没什么问题。\n\n第三步：功能开发，功能开发的时候也没少折腾，首先使用图易开发不能用JQuery,只能用原生JS来开发功能，这下玩儿完了，对原生JS掌握程度为10%甚至不到10%， 一开始要用Ajax发请求拿数据都被困住了，然后参考了之前项目的代码，知道了怎么使用Ajax的GET发请求了。结果向后端发请求的时候还需要传参数，又不知道怎么传参数了，问呀！遇到问题赶紧求救。原来是把参数带到url里面就可以，结果有一个功能点需要把GET请求换成POST，问题又来了，总之在这一环节问题解决一波又来一波。\n\n这期间可没少加班呀！记得开发地图钻取功能的时候，有一天打开淘宝准备买个东西，结果在搜索框里输了个 “地图下钻”。有时候一回家倒床就睡了，凌晨两三点醒来才发现自己还没洗漱。\n\n#### 【项目初验】\n\n![](/css/images/1453689666.jpg)\n\n8月底，项目要初验，PM下午过来查看项目情况，PM看过之后提了几个严重的bug。毕竟明天就要验收了，还有这么明显的bug的，PM有些生气了，PM生气的问我们这个怎么怎么。。。这个怎么怎么。。。 虽然说是对事不对人，但因为有些问题并不是我的的原因，当时我就觉得特别委屈。都不敢开口回答为什么了，因为一说话就要崩泪。其实这个时候我有一种冲动，走人不干了，大不了这个月工资不要了。但这样也太没责任心了吧，毕竟项目到这个节骨眼儿上了，要走也得等这个项目完结吧！\n\n后来问着问着我实在忍不住跑去了厕所，厕所居然没灯黑漆漆一片，找了个角落蹲了下来，这时泪水再也忍不住了，两眼不停的漏水，哭完之后，擦干泪水洗把脸，回去继续改bug，同事拿来晚饭叫我吃了饭再改 ，这个时候哪里还吃得下饭呀！也不敢跟他们说话，又说话就又要漏水。对于现在这个结果我真的是已经尽我所能去完成了。后来我改了几个简单的bug就让我先回去了，可怜项目组的另一个前端了，好像加班到挺晚的。\n\n回家的路上又反思了下自己，不能动不动就想着辞职，工作嘛在哪儿都会受点委屈的，咬咬牙就过去了，遇到问题就想办法解决问题。\n\n第二天的初验如期进行，初验那天真是心惊胆战呀！初验之后，客户又提了新需求，之后一边开发新需求一边改bug做优化，总之每天问题多多，问白老师、问帮主、问同事、不会就会问。最后几经波折，客户终于在合同上签字了。\n\n#### 【跌跌撞撞到年底】\n\n第一个项目结束后，还是收获不少，后面的参与的项目也会不断的遇到问题，但解决问题的能力也有了逐步提高，coding逻辑更加清晰了，常用的一些JS方法也熟练些了，再后来慢慢的学会了用使得sea.js将代码模块化，使用D3.js绘制一些Echarts不能实现的图表。\n\n当然在这家公司也有时候被项目搞得焦头烂额的时候 又有过过辞职的念头，不过一想到有问题还有大神级别的白老师在，工作压抑的时候有幽默的帮主活跃氛围，还有一群相互帮助的小伙伴，每周还有技术分享。就又有了坚持下来的动力，而且不能总是遇到问题就选择逃避吧，要勇敢面对才能成长。\n\n四月之后这几个月的生活真是瞬息万变呀！有时候我会想拿着比去年高了那么一丢丢的工资，生活得却比去年艰辛了N倍， 这是在自虐么？其若不然，我更享受现在这样的生活状态，每天都会面对不同的挑战，享受每天都在进步的感觉，所谓痛并快乐吧！也从未后悔离开了那舒适安逸的环境，如若不是辞职就犹如笼子里的小鸟，永远不知道外面的林子有多大。\n\n这一年的经历真是给我的狠狠的一个教训，决不要在该奋斗的年龄选择安逸的生活。一定要督促自己不断进步，享受生命的成长过程，但愿能创造美好未来送给自己。相信会越努力越幸运，越简单越快乐！\n\n能从最初的不会编程一直坚持到现在，真的非常感谢师傅、白老师、帮主及同事的技术指导，家人朋友的的支持与鼓励。感谢上帝、感谢所有帮助过我的人。新的一年愿家人朋友及身边所有人身体健康，天天开心快乐！鸡年大吉！\n\n![](/css/images/1468981737.jpg)\n\n#### 【新年小目标】\n\n2017年暂定目标：\n\ncoding 666 !\n\n先学好React，用D3.js画几个炫哭的图吧\n\n多看书，今年在当当买的书好像一本也没看完\n\n多记笔记，更新博客\n\n多运行，减肥，瘦瘦痩！\n\n要不来个自媒体吧！\n\n","source":"_posts/年终了，这一年都干了些啥！！.md","raw":"---\ntitle: 年终了，这一年都干了些啥！！\ndate: 2016-12-24 13:51:57\ntags: 年总结\ncategories: 生活\ntoc: true\n---\n\n#### 【前言】\n\n2016年剩余的天数已屈指可数了，往往每到这个时候总会感叹时间过得真快呀！一年又完了。不过今年我似乎没有时间过得快的感叹！但也不觉得慢。只觉得今年是这二十三年以来最苦逼却又是最有意义的一年。<!--more-->\n\n从小到大一直都生活在迷茫之中，没有目标，也从未真正努力过，而这一年似乎没有那么迷茫了。\n\n来说奇怪， 现在脑海里只留下了四月之后的所有经历。四月之前的记忆仿佛被抹掉了一样，或许是四月之前 仍然是生活得没有一点意义吧！四月之后可以说是我人生的又一大 转折点。\n\n#### 【远离舒适安逸的现状】\n![](/css/images/1478248872.jpg)\n毕业之后就一直在一家10来余人的私企互联网公司做前端，每天早九晚六，半年调一次薪资，工作相当轻松，每天在后台管理生成下文章，偶尔写一两个HTML页面；不忙的时候可能也就一周会写一个HTML页面，一个CSS样式，JS基本上不会自己写，都是网上copy下来改。当然 偶尔还是会忙上一段时间，比如公司网站的PC端需要迭代改版，要新开发移动端、做webApp，就又要做设计又要coding，不过时间节点都相当充裕。除了忙公司的事之外，我们还自己做过三个项目，那期间忙起来可比忙公事忙多了，但一个也没成功过，渐渐的也对我们个Team失去了信心。在这样的环境下我也感觉不到任何压力，这种状态很不好，再这样下去，生活只会越来越浑浑噩噩，不求进取。于是乎有了辞职的念头。\n\n在辞职之前，先是在几个前端群里解了下现在前端找工作的趋势，当我在一个群里说想换工作的时候，群里面有上很6的高级前端看到了(后来拜了这个很6的高级前端为师)，师傅说他可以内推我到他们公司(中移物联网)去面试。之后问了我几个关于前端的问题：\n\n用过transform，animation吗？\n\n了解AMD或CMD规范吗？\n\n知道\"use strict\"吗？\n\n能说下对闭包的理解吗？\n\n用过SVN没？\n\n阿西八！只知道transform，animation是CSS3的属性且还很少用过。其他的是些什么鬼，第一次听说。后来师傅说，以你目前的水平，还是先别跳槽吧！先在公司花两个月时间好好学习提升下自己，免得到时面试尴尬！后来在网上看了下前端岗位的招聘要求，才知道自己在前端这个行业脱节的已经不是点吧点了，甚至都觉得自己根本不是前端。工作后的这一年半，我真不知道自己一天都在干嘛，看似很努力，实际上还是在浑浑噩噩的渡过每一天，我也从来没真正去了解过前端这个行业所有掌握的知识领域。去年说要好好学下JQuery最终也半途而废了。\n\n即使知道自己在前端这个行业已经脱节了，我也并没有选择继续留在公司花一两个小时间来学习，或许是觉得留在这里也并不会好好学习的，清明节假期一过，我便提出辞职！告别了我人生第一份工作。\n\n辞职之后花了一个星期的时间补了下JS的基础知识，这期间师傅教先了我怎么用SVN，说下家公司肯定用得着。\n\n####  【仿佛回到刚毕业】\n\n![](/css/images/1453345771.jpg)\n\n当我再次面临找工作的时候，仿佛回到了刚的毕业找工作的情景，感觉自己什么都不会，唯一不同的就是简历上的内容能丰富些了，实则这些丰富了简历的内容并没有什么含金量。共投了十来份简历，面试了四家。\t\n\n面试的时候经常会遇到对于面试官问的问题一脸懵逼，面试的第一家公司问会不会Sass, gulp, Angular等技能，what ?  这都是些啥， 一个都不会。虽然对于面试问题的回答都是不会、不知道，最终面试还是通过了。当时是面试完了就直接给我说：如果我愿意来明天就可以来上班，其他都好薪资比之前要低，这就什么都不好了，但又想谁叫自己现在技术这么low呢？能有公司收留我就很不错了，而且面试的刘老师说的是：只要我在试用期间掌握了他说的那些技术，转正后的工资可以翻倍涨。所以暂时可以先把工资抛一边，能学东西最重要。 本来是打算就在这家公司上班，后面的面试都没打算去了。但想到薪资心里始终还是有些不甘心，而且这才面一家，说不定多面两家会有更好的选择呢？\n\n接着又面试了 第二，三家，这两次的面试也就那样，面试后来也没结果。\n\n第四家公司的面试是我工作以来所有面试中最正式的一家，填完表后先做了一套逻辑题，然后人事面试问了各种问题，再是技术的Leader来面试。 这家技术上的问题相比第一家公司的问题要简单些，至少有些问题我能回答得上来，有些也是有连蒙带猜才答对，也有不知道、不会、忘记了一系列的回答。\n\n面试完后让我回家等结果，说到时会通知是复试或直接入职。其实当时还是很想来这家公司上班的，但自我感觉肯定没戏。面试的时候说了不少的不会、不知道，而且期望薪资还要还不低。感谢上帝，五点多钟人事打来电话说面试通过了。然后谈下了公司的福利及薪资待遇，薪资可以开到我的期望薪资，而且转正了还可根据能力往上调。我有点小激动了！真没想到能收到这家公司的offer。\n\n#### 【陷入选择困难症】\n\n不过收到了第四家的offer后又挺纠结的，本来开始已经打算就去第一家公司入职的，这下到要选择哪家呢？考虑了半天，还抛了硬币，还是薪资高的的有诱惑力些，最终选择了第四家。\n\n周一准时来到公司报道，公司的小伙伴们大多都是90后，对新同事也相当的热情。公司氛围还不错，来到新公司师傅教的SVN首先就派上了用场，一来就先装SVN更新代码，然后小组长分配任务，分配的任务是以前从来没接触过完全不会做，为了完成任务就只能不断去请教同事，每个同事好像也都忙得不可开交，我实在不忍心打扰，但又不得不问。在同事的帮助下加班到9：30，才完成了自己的工作任务。第二天，我发现我昨天写的代码小组长又全部重写了一遍，但他啥也没说。看了之后好过意不去，那明明是我的工作，我不但要麻烦他来教我，最后搞得他还得重做一遍，而且大家都挺忙的。后来又得知我们这个项目的时间节点就快到了，感觉压力山大，不但帮不到项目组，反倒还会拖累项目进度。\n\n经过这两天的事，第二天我便想辞职了，或许是不知道该如何来缓解这种压力，而选择了逃避吧！也或许是觉得得不到的才是最好的，结果失去了才想要珍惜。\n\n心想着如果去第一家公司会不会好一点呢，面试的刘老师给我说的是，试用期就安排我写点页面，力所能及的事，其余时间让我自学。于是我又给第一家公司打了电话，问他们招到合适的前端没，厚脸皮的说我还是想去他们那上班， 是否还有这个机会，结果还可以去。通完电话后我在QQ上给在职公司的技术leader黄老师说了离职的事，当时黄老师很忙，给我回复了一句 \"解决问题的方法不止一个，等他忙完面谈\"\n\n面谈过程中，黄老师问到我离职的原因，我说了这两天的工作情况以及自己的一些想法，自己技术太low,项目赶时间，自己一点忙都帮不上，还麻烦别人影响他人开发进度。黄老师说：\"你才上班第二天，新人都有个适应过程，现在不会也没关系，Ajax也不难，很快就学会了，项目上让小组长先给我安排些我能做的任务，让我不必着急做决定辞职，如果工作一周后还不适应再做决定也不迟\"  其实当时是走是留我又犹豫了，如果再等一 周第一家公司肯定是去不了了。后来还是执意选择了离开。如果当时打电话第一家公司说不要了，在这家公司不论再怎么艰难我都会坚持下去的。\n\n中午下班后就离开了公司来到面试的第一家公司，来到新公司后，可能是反反复复的说不来然后又来的原因吧，给同事的留下的第一印象肯定遭透了，如果是因为这个原因留下了不好印象，我也会在以后的工作中好好努力，能有个好的印象。感觉同事们对我都不理不彩的，也许是自己想多了，之前公司的小伙伴那么热情，两家公司同事的态度对比太大，心里有那么一丢丢失落。但我只是个来工作的新人，又不是重要人物，凭什么人家都要热情欢迎你呢。\n\n#### 【后悔当初的离开】\n\n![](/css/images/1451784209.jpg)\n\n来到新公司又感觉特别压抑，第二天加班到十点半，九点多的时候妈妈打来电话问新下班没，我说还在加班，妈妈关心到这么晚了还在加班，说着说着，差点哭了，因为在忙，没说两句就挂了，下班后给妈妈回了电话，在车上说着说着泪水又开始打转，我强忍着没哭，一下了车就忍不住了，哭得个稀里哗啦的，哭不是因为加班太累而哭，而是因为这两天经历，在新的公司上了两天班，我又后悔离开了上一家公司。我恨自己做出的这些选择，为什么总是有诸多不满，不管什么结果都是自己选择的还好意思哭。妈妈安慰着我说，不想去上班就不去，你就在家耍着，耍够了想上班了再找工作，本来之前就叫你辞了职在家不着急找工作，是你自己硬要着急找工作，妈妈越是这么纵然我，就哭得越伤心了，跟妈妈通完电话，擦干泪水，跟一闺蜜打了电话倾了一翻，闺蜜也说做得 不开心就不做了，别委屈了自己，这个月不准急着找工作了，等完五一再找工作，后来我也决定不去了。\n\n第二天一早，给刘老师了发了条QQ信息，说了辞职的事。\n\n他问是不是因为加班才要辞职，如果是加班，可以尽量不安排我加班，我说跟加班没关系.\n\n他又问是不是薪资问题，我回答说：跟薪资还是有点关系，觉得太低了。\n\n后来刘老师说，待遇可以给我调下，试用期在原来的基础上涨1K，等掌握一些技能后再涨，如果觉得可以，吃完中午下午就去回公司来上班。\n\n我想着，就算辞了我肯定不会耍到五一后再找工作，而且毕竟现在技术有限呀！下午竟然又厚着脸皮回到了公司。\n\n#### 【再次辞职】\n\n在这家公司始终有诸多不适，才做了一个月就又想辞职，但那个时候公司又忙，正是用人之际，也就没提，刚好做满两个月，又新招了两个前端，我提出了辞职了，提出辞职的时候，刘老师又说是不是因为加班，或是薪资的原因，他说薪资可以再次给我调整了，其实说到涨薪资犹豫了一下还要不要辞，毕竟工作也不好找，经过深思熟虑，还是辞职了。\n\n这两个月里一边工作一边学习，还是有了不少收获，学会使用浏览器的控制台调试JS； sass, gulp ,ionic angular这些都入门简单的都会用了。也掌握了更多做移动端的知识。\n\n这次辞职之后也没着急找工作，甚至不想做前端了，也就没有投简历，但简历还是在几个招聘网公开了，有主动联系的就去面试看看。\n\n刚好周五辞职，周未就收到两家公司周一的面试邀请，上午一家下午一家，本想着如果这两家公司面试不过，就真不做前端了，去做点自己想做的事，不巧的是两家公司面试都通过了，经过上一次的教训，这次可要慎重选择了，最后选择了海云数据。\n\n####  【又开始了新的工作】\n\n周二入职开始上班，进公司前半个月，先熟悉公司的项目，项目所需要掌握的技术，公司产品（图易）的使用。前端组的小伙伴大部分都是今年毕业的，但看他们一个个coding都比我6。感觉自己是前端组最low的一个。而且刚开始在公司接触的人学历要么本科要么研究生，难道就我一个是专科？后来才知道还是有一部分人也是专科毕业。但这次我不会因为这些原因而感到有压力又干个一两天就辞职了。\n\n八月初公司一个新项目启动了，新项目组刚开始前端安排了三个人，后来人员调动只有两个前端我是其中之一。安排到了新项目真是悲喜交加呀！这个项目是公司重庆这边打头阵的一个新项目，因此Leader都比较重视。我生 怕自己做不好，但不管做不做得好，来公司总得做活路吧！\n\n嗯！拿到需求就干不要怂。\n\n进入开发模式第一步：定义接口，哇哦！不怂才怪，什么是接口？怎么定义？听说是要自己先写一份能跑起来的JSON格式的数据，呐哩！JOSN又是什么鬼，这个名字好像以前倒是听过，不但不知道格式长什么的。不会不知道不代表不做呀！问呗！问着问着终于定义好了一份像样的接口。只是看着像样，后来跟后端讨论的时候漏洞百出。\n\n第二步：还原设计稿，这一步倒是没什么问题。\n\n第三步：功能开发，功能开发的时候也没少折腾，首先使用图易开发不能用JQuery,只能用原生JS来开发功能，这下玩儿完了，对原生JS掌握程度为10%甚至不到10%， 一开始要用Ajax发请求拿数据都被困住了，然后参考了之前项目的代码，知道了怎么使用Ajax的GET发请求了。结果向后端发请求的时候还需要传参数，又不知道怎么传参数了，问呀！遇到问题赶紧求救。原来是把参数带到url里面就可以，结果有一个功能点需要把GET请求换成POST，问题又来了，总之在这一环节问题解决一波又来一波。\n\n这期间可没少加班呀！记得开发地图钻取功能的时候，有一天打开淘宝准备买个东西，结果在搜索框里输了个 “地图下钻”。有时候一回家倒床就睡了，凌晨两三点醒来才发现自己还没洗漱。\n\n#### 【项目初验】\n\n![](/css/images/1453689666.jpg)\n\n8月底，项目要初验，PM下午过来查看项目情况，PM看过之后提了几个严重的bug。毕竟明天就要验收了，还有这么明显的bug的，PM有些生气了，PM生气的问我们这个怎么怎么。。。这个怎么怎么。。。 虽然说是对事不对人，但因为有些问题并不是我的的原因，当时我就觉得特别委屈。都不敢开口回答为什么了，因为一说话就要崩泪。其实这个时候我有一种冲动，走人不干了，大不了这个月工资不要了。但这样也太没责任心了吧，毕竟项目到这个节骨眼儿上了，要走也得等这个项目完结吧！\n\n后来问着问着我实在忍不住跑去了厕所，厕所居然没灯黑漆漆一片，找了个角落蹲了下来，这时泪水再也忍不住了，两眼不停的漏水，哭完之后，擦干泪水洗把脸，回去继续改bug，同事拿来晚饭叫我吃了饭再改 ，这个时候哪里还吃得下饭呀！也不敢跟他们说话，又说话就又要漏水。对于现在这个结果我真的是已经尽我所能去完成了。后来我改了几个简单的bug就让我先回去了，可怜项目组的另一个前端了，好像加班到挺晚的。\n\n回家的路上又反思了下自己，不能动不动就想着辞职，工作嘛在哪儿都会受点委屈的，咬咬牙就过去了，遇到问题就想办法解决问题。\n\n第二天的初验如期进行，初验那天真是心惊胆战呀！初验之后，客户又提了新需求，之后一边开发新需求一边改bug做优化，总之每天问题多多，问白老师、问帮主、问同事、不会就会问。最后几经波折，客户终于在合同上签字了。\n\n#### 【跌跌撞撞到年底】\n\n第一个项目结束后，还是收获不少，后面的参与的项目也会不断的遇到问题，但解决问题的能力也有了逐步提高，coding逻辑更加清晰了，常用的一些JS方法也熟练些了，再后来慢慢的学会了用使得sea.js将代码模块化，使用D3.js绘制一些Echarts不能实现的图表。\n\n当然在这家公司也有时候被项目搞得焦头烂额的时候 又有过过辞职的念头，不过一想到有问题还有大神级别的白老师在，工作压抑的时候有幽默的帮主活跃氛围，还有一群相互帮助的小伙伴，每周还有技术分享。就又有了坚持下来的动力，而且不能总是遇到问题就选择逃避吧，要勇敢面对才能成长。\n\n四月之后这几个月的生活真是瞬息万变呀！有时候我会想拿着比去年高了那么一丢丢的工资，生活得却比去年艰辛了N倍， 这是在自虐么？其若不然，我更享受现在这样的生活状态，每天都会面对不同的挑战，享受每天都在进步的感觉，所谓痛并快乐吧！也从未后悔离开了那舒适安逸的环境，如若不是辞职就犹如笼子里的小鸟，永远不知道外面的林子有多大。\n\n这一年的经历真是给我的狠狠的一个教训，决不要在该奋斗的年龄选择安逸的生活。一定要督促自己不断进步，享受生命的成长过程，但愿能创造美好未来送给自己。相信会越努力越幸运，越简单越快乐！\n\n能从最初的不会编程一直坚持到现在，真的非常感谢师傅、白老师、帮主及同事的技术指导，家人朋友的的支持与鼓励。感谢上帝、感谢所有帮助过我的人。新的一年愿家人朋友及身边所有人身体健康，天天开心快乐！鸡年大吉！\n\n![](/css/images/1468981737.jpg)\n\n#### 【新年小目标】\n\n2017年暂定目标：\n\ncoding 666 !\n\n先学好React，用D3.js画几个炫哭的图吧\n\n多看书，今年在当当买的书好像一本也没看完\n\n多记笔记，更新博客\n\n多运行，减肥，瘦瘦痩！\n\n要不来个自媒体吧！\n\n","slug":"年终了，这一年都干了些啥！！","published":1,"updated":"2016-12-29T05:01:27.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn8y003r24uuphf6euyo","content":"<h4 id=\"【前言】\"><a href=\"#【前言】\" class=\"headerlink\" title=\"【前言】\"></a>【前言】</h4><p>2016年剩余的天数已屈指可数了，往往每到这个时候总会感叹时间过得真快呀！一年又完了。不过今年我似乎没有时间过得快的感叹！但也不觉得慢。只觉得今年是这二十三年以来最苦逼却又是最有意义的一年。<a id=\"more\"></a></p>\n<p>从小到大一直都生活在迷茫之中，没有目标，也从未真正努力过，而这一年似乎没有那么迷茫了。</p>\n<p>来说奇怪， 现在脑海里只留下了四月之后的所有经历。四月之前的记忆仿佛被抹掉了一样，或许是四月之前 仍然是生活得没有一点意义吧！四月之后可以说是我人生的又一大 转折点。</p>\n<h4 id=\"【远离舒适安逸的现状】\"><a href=\"#【远离舒适安逸的现状】\" class=\"headerlink\" title=\"【远离舒适安逸的现状】\"></a>【远离舒适安逸的现状】</h4><p><img src=\"/css/images/1478248872.jpg\" alt=\"\"><br>毕业之后就一直在一家10来余人的私企互联网公司做前端，每天早九晚六，半年调一次薪资，工作相当轻松，每天在后台管理生成下文章，偶尔写一两个HTML页面；不忙的时候可能也就一周会写一个HTML页面，一个CSS样式，JS基本上不会自己写，都是网上copy下来改。当然 偶尔还是会忙上一段时间，比如公司网站的PC端需要迭代改版，要新开发移动端、做webApp，就又要做设计又要coding，不过时间节点都相当充裕。除了忙公司的事之外，我们还自己做过三个项目，那期间忙起来可比忙公事忙多了，但一个也没成功过，渐渐的也对我们个Team失去了信心。在这样的环境下我也感觉不到任何压力，这种状态很不好，再这样下去，生活只会越来越浑浑噩噩，不求进取。于是乎有了辞职的念头。</p>\n<p>在辞职之前，先是在几个前端群里解了下现在前端找工作的趋势，当我在一个群里说想换工作的时候，群里面有上很6的高级前端看到了(后来拜了这个很6的高级前端为师)，师傅说他可以内推我到他们公司(中移物联网)去面试。之后问了我几个关于前端的问题：</p>\n<p>用过transform，animation吗？</p>\n<p>了解AMD或CMD规范吗？</p>\n<p>知道”use strict”吗？</p>\n<p>能说下对闭包的理解吗？</p>\n<p>用过SVN没？</p>\n<p>阿西八！只知道transform，animation是CSS3的属性且还很少用过。其他的是些什么鬼，第一次听说。后来师傅说，以你目前的水平，还是先别跳槽吧！先在公司花两个月时间好好学习提升下自己，免得到时面试尴尬！后来在网上看了下前端岗位的招聘要求，才知道自己在前端这个行业脱节的已经不是点吧点了，甚至都觉得自己根本不是前端。工作后的这一年半，我真不知道自己一天都在干嘛，看似很努力，实际上还是在浑浑噩噩的渡过每一天，我也从来没真正去了解过前端这个行业所有掌握的知识领域。去年说要好好学下JQuery最终也半途而废了。</p>\n<p>即使知道自己在前端这个行业已经脱节了，我也并没有选择继续留在公司花一两个小时间来学习，或许是觉得留在这里也并不会好好学习的，清明节假期一过，我便提出辞职！告别了我人生第一份工作。</p>\n<p>辞职之后花了一个星期的时间补了下JS的基础知识，这期间师傅教先了我怎么用SVN，说下家公司肯定用得着。</p>\n<h4 id=\"【仿佛回到刚毕业】\"><a href=\"#【仿佛回到刚毕业】\" class=\"headerlink\" title=\"【仿佛回到刚毕业】\"></a>【仿佛回到刚毕业】</h4><p><img src=\"/css/images/1453345771.jpg\" alt=\"\"></p>\n<p>当我再次面临找工作的时候，仿佛回到了刚的毕业找工作的情景，感觉自己什么都不会，唯一不同的就是简历上的内容能丰富些了，实则这些丰富了简历的内容并没有什么含金量。共投了十来份简历，面试了四家。    </p>\n<p>面试的时候经常会遇到对于面试官问的问题一脸懵逼，面试的第一家公司问会不会Sass, gulp, Angular等技能，what ?  这都是些啥， 一个都不会。虽然对于面试问题的回答都是不会、不知道，最终面试还是通过了。当时是面试完了就直接给我说：如果我愿意来明天就可以来上班，其他都好薪资比之前要低，这就什么都不好了，但又想谁叫自己现在技术这么low呢？能有公司收留我就很不错了，而且面试的刘老师说的是：只要我在试用期间掌握了他说的那些技术，转正后的工资可以翻倍涨。所以暂时可以先把工资抛一边，能学东西最重要。 本来是打算就在这家公司上班，后面的面试都没打算去了。但想到薪资心里始终还是有些不甘心，而且这才面一家，说不定多面两家会有更好的选择呢？</p>\n<p>接着又面试了 第二，三家，这两次的面试也就那样，面试后来也没结果。</p>\n<p>第四家公司的面试是我工作以来所有面试中最正式的一家，填完表后先做了一套逻辑题，然后人事面试问了各种问题，再是技术的Leader来面试。 这家技术上的问题相比第一家公司的问题要简单些，至少有些问题我能回答得上来，有些也是有连蒙带猜才答对，也有不知道、不会、忘记了一系列的回答。</p>\n<p>面试完后让我回家等结果，说到时会通知是复试或直接入职。其实当时还是很想来这家公司上班的，但自我感觉肯定没戏。面试的时候说了不少的不会、不知道，而且期望薪资还要还不低。感谢上帝，五点多钟人事打来电话说面试通过了。然后谈下了公司的福利及薪资待遇，薪资可以开到我的期望薪资，而且转正了还可根据能力往上调。我有点小激动了！真没想到能收到这家公司的offer。</p>\n<h4 id=\"【陷入选择困难症】\"><a href=\"#【陷入选择困难症】\" class=\"headerlink\" title=\"【陷入选择困难症】\"></a>【陷入选择困难症】</h4><p>不过收到了第四家的offer后又挺纠结的，本来开始已经打算就去第一家公司入职的，这下到要选择哪家呢？考虑了半天，还抛了硬币，还是薪资高的的有诱惑力些，最终选择了第四家。</p>\n<p>周一准时来到公司报道，公司的小伙伴们大多都是90后，对新同事也相当的热情。公司氛围还不错，来到新公司师傅教的SVN首先就派上了用场，一来就先装SVN更新代码，然后小组长分配任务，分配的任务是以前从来没接触过完全不会做，为了完成任务就只能不断去请教同事，每个同事好像也都忙得不可开交，我实在不忍心打扰，但又不得不问。在同事的帮助下加班到9：30，才完成了自己的工作任务。第二天，我发现我昨天写的代码小组长又全部重写了一遍，但他啥也没说。看了之后好过意不去，那明明是我的工作，我不但要麻烦他来教我，最后搞得他还得重做一遍，而且大家都挺忙的。后来又得知我们这个项目的时间节点就快到了，感觉压力山大，不但帮不到项目组，反倒还会拖累项目进度。</p>\n<p>经过这两天的事，第二天我便想辞职了，或许是不知道该如何来缓解这种压力，而选择了逃避吧！也或许是觉得得不到的才是最好的，结果失去了才想要珍惜。</p>\n<p>心想着如果去第一家公司会不会好一点呢，面试的刘老师给我说的是，试用期就安排我写点页面，力所能及的事，其余时间让我自学。于是我又给第一家公司打了电话，问他们招到合适的前端没，厚脸皮的说我还是想去他们那上班， 是否还有这个机会，结果还可以去。通完电话后我在QQ上给在职公司的技术leader黄老师说了离职的事，当时黄老师很忙，给我回复了一句 “解决问题的方法不止一个，等他忙完面谈”</p>\n<p>面谈过程中，黄老师问到我离职的原因，我说了这两天的工作情况以及自己的一些想法，自己技术太low,项目赶时间，自己一点忙都帮不上，还麻烦别人影响他人开发进度。黄老师说：”你才上班第二天，新人都有个适应过程，现在不会也没关系，Ajax也不难，很快就学会了，项目上让小组长先给我安排些我能做的任务，让我不必着急做决定辞职，如果工作一周后还不适应再做决定也不迟”  其实当时是走是留我又犹豫了，如果再等一 周第一家公司肯定是去不了了。后来还是执意选择了离开。如果当时打电话第一家公司说不要了，在这家公司不论再怎么艰难我都会坚持下去的。</p>\n<p>中午下班后就离开了公司来到面试的第一家公司，来到新公司后，可能是反反复复的说不来然后又来的原因吧，给同事的留下的第一印象肯定遭透了，如果是因为这个原因留下了不好印象，我也会在以后的工作中好好努力，能有个好的印象。感觉同事们对我都不理不彩的，也许是自己想多了，之前公司的小伙伴那么热情，两家公司同事的态度对比太大，心里有那么一丢丢失落。但我只是个来工作的新人，又不是重要人物，凭什么人家都要热情欢迎你呢。</p>\n<h4 id=\"【后悔当初的离开】\"><a href=\"#【后悔当初的离开】\" class=\"headerlink\" title=\"【后悔当初的离开】\"></a>【后悔当初的离开】</h4><p><img src=\"/css/images/1451784209.jpg\" alt=\"\"></p>\n<p>来到新公司又感觉特别压抑，第二天加班到十点半，九点多的时候妈妈打来电话问新下班没，我说还在加班，妈妈关心到这么晚了还在加班，说着说着，差点哭了，因为在忙，没说两句就挂了，下班后给妈妈回了电话，在车上说着说着泪水又开始打转，我强忍着没哭，一下了车就忍不住了，哭得个稀里哗啦的，哭不是因为加班太累而哭，而是因为这两天经历，在新的公司上了两天班，我又后悔离开了上一家公司。我恨自己做出的这些选择，为什么总是有诸多不满，不管什么结果都是自己选择的还好意思哭。妈妈安慰着我说，不想去上班就不去，你就在家耍着，耍够了想上班了再找工作，本来之前就叫你辞了职在家不着急找工作，是你自己硬要着急找工作，妈妈越是这么纵然我，就哭得越伤心了，跟妈妈通完电话，擦干泪水，跟一闺蜜打了电话倾了一翻，闺蜜也说做得 不开心就不做了，别委屈了自己，这个月不准急着找工作了，等完五一再找工作，后来我也决定不去了。</p>\n<p>第二天一早，给刘老师了发了条QQ信息，说了辞职的事。</p>\n<p>他问是不是因为加班才要辞职，如果是加班，可以尽量不安排我加班，我说跟加班没关系.</p>\n<p>他又问是不是薪资问题，我回答说：跟薪资还是有点关系，觉得太低了。</p>\n<p>后来刘老师说，待遇可以给我调下，试用期在原来的基础上涨1K，等掌握一些技能后再涨，如果觉得可以，吃完中午下午就去回公司来上班。</p>\n<p>我想着，就算辞了我肯定不会耍到五一后再找工作，而且毕竟现在技术有限呀！下午竟然又厚着脸皮回到了公司。</p>\n<h4 id=\"【再次辞职】\"><a href=\"#【再次辞职】\" class=\"headerlink\" title=\"【再次辞职】\"></a>【再次辞职】</h4><p>在这家公司始终有诸多不适，才做了一个月就又想辞职，但那个时候公司又忙，正是用人之际，也就没提，刚好做满两个月，又新招了两个前端，我提出了辞职了，提出辞职的时候，刘老师又说是不是因为加班，或是薪资的原因，他说薪资可以再次给我调整了，其实说到涨薪资犹豫了一下还要不要辞，毕竟工作也不好找，经过深思熟虑，还是辞职了。</p>\n<p>这两个月里一边工作一边学习，还是有了不少收获，学会使用浏览器的控制台调试JS； sass, gulp ,ionic angular这些都入门简单的都会用了。也掌握了更多做移动端的知识。</p>\n<p>这次辞职之后也没着急找工作，甚至不想做前端了，也就没有投简历，但简历还是在几个招聘网公开了，有主动联系的就去面试看看。</p>\n<p>刚好周五辞职，周未就收到两家公司周一的面试邀请，上午一家下午一家，本想着如果这两家公司面试不过，就真不做前端了，去做点自己想做的事，不巧的是两家公司面试都通过了，经过上一次的教训，这次可要慎重选择了，最后选择了海云数据。</p>\n<h4 id=\"【又开始了新的工作】\"><a href=\"#【又开始了新的工作】\" class=\"headerlink\" title=\"【又开始了新的工作】\"></a>【又开始了新的工作】</h4><p>周二入职开始上班，进公司前半个月，先熟悉公司的项目，项目所需要掌握的技术，公司产品（图易）的使用。前端组的小伙伴大部分都是今年毕业的，但看他们一个个coding都比我6。感觉自己是前端组最low的一个。而且刚开始在公司接触的人学历要么本科要么研究生，难道就我一个是专科？后来才知道还是有一部分人也是专科毕业。但这次我不会因为这些原因而感到有压力又干个一两天就辞职了。</p>\n<p>八月初公司一个新项目启动了，新项目组刚开始前端安排了三个人，后来人员调动只有两个前端我是其中之一。安排到了新项目真是悲喜交加呀！这个项目是公司重庆这边打头阵的一个新项目，因此Leader都比较重视。我生 怕自己做不好，但不管做不做得好，来公司总得做活路吧！</p>\n<p>嗯！拿到需求就干不要怂。</p>\n<p>进入开发模式第一步：定义接口，哇哦！不怂才怪，什么是接口？怎么定义？听说是要自己先写一份能跑起来的JSON格式的数据，呐哩！JOSN又是什么鬼，这个名字好像以前倒是听过，不但不知道格式长什么的。不会不知道不代表不做呀！问呗！问着问着终于定义好了一份像样的接口。只是看着像样，后来跟后端讨论的时候漏洞百出。</p>\n<p>第二步：还原设计稿，这一步倒是没什么问题。</p>\n<p>第三步：功能开发，功能开发的时候也没少折腾，首先使用图易开发不能用JQuery,只能用原生JS来开发功能，这下玩儿完了，对原生JS掌握程度为10%甚至不到10%， 一开始要用Ajax发请求拿数据都被困住了，然后参考了之前项目的代码，知道了怎么使用Ajax的GET发请求了。结果向后端发请求的时候还需要传参数，又不知道怎么传参数了，问呀！遇到问题赶紧求救。原来是把参数带到url里面就可以，结果有一个功能点需要把GET请求换成POST，问题又来了，总之在这一环节问题解决一波又来一波。</p>\n<p>这期间可没少加班呀！记得开发地图钻取功能的时候，有一天打开淘宝准备买个东西，结果在搜索框里输了个 “地图下钻”。有时候一回家倒床就睡了，凌晨两三点醒来才发现自己还没洗漱。</p>\n<h4 id=\"【项目初验】\"><a href=\"#【项目初验】\" class=\"headerlink\" title=\"【项目初验】\"></a>【项目初验】</h4><p><img src=\"/css/images/1453689666.jpg\" alt=\"\"></p>\n<p>8月底，项目要初验，PM下午过来查看项目情况，PM看过之后提了几个严重的bug。毕竟明天就要验收了，还有这么明显的bug的，PM有些生气了，PM生气的问我们这个怎么怎么。。。这个怎么怎么。。。 虽然说是对事不对人，但因为有些问题并不是我的的原因，当时我就觉得特别委屈。都不敢开口回答为什么了，因为一说话就要崩泪。其实这个时候我有一种冲动，走人不干了，大不了这个月工资不要了。但这样也太没责任心了吧，毕竟项目到这个节骨眼儿上了，要走也得等这个项目完结吧！</p>\n<p>后来问着问着我实在忍不住跑去了厕所，厕所居然没灯黑漆漆一片，找了个角落蹲了下来，这时泪水再也忍不住了，两眼不停的漏水，哭完之后，擦干泪水洗把脸，回去继续改bug，同事拿来晚饭叫我吃了饭再改 ，这个时候哪里还吃得下饭呀！也不敢跟他们说话，又说话就又要漏水。对于现在这个结果我真的是已经尽我所能去完成了。后来我改了几个简单的bug就让我先回去了，可怜项目组的另一个前端了，好像加班到挺晚的。</p>\n<p>回家的路上又反思了下自己，不能动不动就想着辞职，工作嘛在哪儿都会受点委屈的，咬咬牙就过去了，遇到问题就想办法解决问题。</p>\n<p>第二天的初验如期进行，初验那天真是心惊胆战呀！初验之后，客户又提了新需求，之后一边开发新需求一边改bug做优化，总之每天问题多多，问白老师、问帮主、问同事、不会就会问。最后几经波折，客户终于在合同上签字了。</p>\n<h4 id=\"【跌跌撞撞到年底】\"><a href=\"#【跌跌撞撞到年底】\" class=\"headerlink\" title=\"【跌跌撞撞到年底】\"></a>【跌跌撞撞到年底】</h4><p>第一个项目结束后，还是收获不少，后面的参与的项目也会不断的遇到问题，但解决问题的能力也有了逐步提高，coding逻辑更加清晰了，常用的一些JS方法也熟练些了，再后来慢慢的学会了用使得sea.js将代码模块化，使用D3.js绘制一些Echarts不能实现的图表。</p>\n<p>当然在这家公司也有时候被项目搞得焦头烂额的时候 又有过过辞职的念头，不过一想到有问题还有大神级别的白老师在，工作压抑的时候有幽默的帮主活跃氛围，还有一群相互帮助的小伙伴，每周还有技术分享。就又有了坚持下来的动力，而且不能总是遇到问题就选择逃避吧，要勇敢面对才能成长。</p>\n<p>四月之后这几个月的生活真是瞬息万变呀！有时候我会想拿着比去年高了那么一丢丢的工资，生活得却比去年艰辛了N倍， 这是在自虐么？其若不然，我更享受现在这样的生活状态，每天都会面对不同的挑战，享受每天都在进步的感觉，所谓痛并快乐吧！也从未后悔离开了那舒适安逸的环境，如若不是辞职就犹如笼子里的小鸟，永远不知道外面的林子有多大。</p>\n<p>这一年的经历真是给我的狠狠的一个教训，决不要在该奋斗的年龄选择安逸的生活。一定要督促自己不断进步，享受生命的成长过程，但愿能创造美好未来送给自己。相信会越努力越幸运，越简单越快乐！</p>\n<p>能从最初的不会编程一直坚持到现在，真的非常感谢师傅、白老师、帮主及同事的技术指导，家人朋友的的支持与鼓励。感谢上帝、感谢所有帮助过我的人。新的一年愿家人朋友及身边所有人身体健康，天天开心快乐！鸡年大吉！</p>\n<p><img src=\"/css/images/1468981737.jpg\" alt=\"\"></p>\n<h4 id=\"【新年小目标】\"><a href=\"#【新年小目标】\" class=\"headerlink\" title=\"【新年小目标】\"></a>【新年小目标】</h4><p>2017年暂定目标：</p>\n<p>coding 666 !</p>\n<p>先学好React，用D3.js画几个炫哭的图吧</p>\n<p>多看书，今年在当当买的书好像一本也没看完</p>\n<p>多记笔记，更新博客</p>\n<p>多运行，减肥，瘦瘦痩！</p>\n<p>要不来个自媒体吧！</p>\n","excerpt":"<h4 id=\"【前言】\"><a href=\"#【前言】\" class=\"headerlink\" title=\"【前言】\"></a>【前言】</h4><p>2016年剩余的天数已屈指可数了，往往每到这个时候总会感叹时间过得真快呀！一年又完了。不过今年我似乎没有时间过得快的感叹！但也不觉得慢。只觉得今年是这二十三年以来最苦逼却又是最有意义的一年。","more":"</p>\n<p>从小到大一直都生活在迷茫之中，没有目标，也从未真正努力过，而这一年似乎没有那么迷茫了。</p>\n<p>来说奇怪， 现在脑海里只留下了四月之后的所有经历。四月之前的记忆仿佛被抹掉了一样，或许是四月之前 仍然是生活得没有一点意义吧！四月之后可以说是我人生的又一大 转折点。</p>\n<h4 id=\"【远离舒适安逸的现状】\"><a href=\"#【远离舒适安逸的现状】\" class=\"headerlink\" title=\"【远离舒适安逸的现状】\"></a>【远离舒适安逸的现状】</h4><p><img src=\"/css/images/1478248872.jpg\" alt=\"\"><br>毕业之后就一直在一家10来余人的私企互联网公司做前端，每天早九晚六，半年调一次薪资，工作相当轻松，每天在后台管理生成下文章，偶尔写一两个HTML页面；不忙的时候可能也就一周会写一个HTML页面，一个CSS样式，JS基本上不会自己写，都是网上copy下来改。当然 偶尔还是会忙上一段时间，比如公司网站的PC端需要迭代改版，要新开发移动端、做webApp，就又要做设计又要coding，不过时间节点都相当充裕。除了忙公司的事之外，我们还自己做过三个项目，那期间忙起来可比忙公事忙多了，但一个也没成功过，渐渐的也对我们个Team失去了信心。在这样的环境下我也感觉不到任何压力，这种状态很不好，再这样下去，生活只会越来越浑浑噩噩，不求进取。于是乎有了辞职的念头。</p>\n<p>在辞职之前，先是在几个前端群里解了下现在前端找工作的趋势，当我在一个群里说想换工作的时候，群里面有上很6的高级前端看到了(后来拜了这个很6的高级前端为师)，师傅说他可以内推我到他们公司(中移物联网)去面试。之后问了我几个关于前端的问题：</p>\n<p>用过transform，animation吗？</p>\n<p>了解AMD或CMD规范吗？</p>\n<p>知道”use strict”吗？</p>\n<p>能说下对闭包的理解吗？</p>\n<p>用过SVN没？</p>\n<p>阿西八！只知道transform，animation是CSS3的属性且还很少用过。其他的是些什么鬼，第一次听说。后来师傅说，以你目前的水平，还是先别跳槽吧！先在公司花两个月时间好好学习提升下自己，免得到时面试尴尬！后来在网上看了下前端岗位的招聘要求，才知道自己在前端这个行业脱节的已经不是点吧点了，甚至都觉得自己根本不是前端。工作后的这一年半，我真不知道自己一天都在干嘛，看似很努力，实际上还是在浑浑噩噩的渡过每一天，我也从来没真正去了解过前端这个行业所有掌握的知识领域。去年说要好好学下JQuery最终也半途而废了。</p>\n<p>即使知道自己在前端这个行业已经脱节了，我也并没有选择继续留在公司花一两个小时间来学习，或许是觉得留在这里也并不会好好学习的，清明节假期一过，我便提出辞职！告别了我人生第一份工作。</p>\n<p>辞职之后花了一个星期的时间补了下JS的基础知识，这期间师傅教先了我怎么用SVN，说下家公司肯定用得着。</p>\n<h4 id=\"【仿佛回到刚毕业】\"><a href=\"#【仿佛回到刚毕业】\" class=\"headerlink\" title=\"【仿佛回到刚毕业】\"></a>【仿佛回到刚毕业】</h4><p><img src=\"/css/images/1453345771.jpg\" alt=\"\"></p>\n<p>当我再次面临找工作的时候，仿佛回到了刚的毕业找工作的情景，感觉自己什么都不会，唯一不同的就是简历上的内容能丰富些了，实则这些丰富了简历的内容并没有什么含金量。共投了十来份简历，面试了四家。    </p>\n<p>面试的时候经常会遇到对于面试官问的问题一脸懵逼，面试的第一家公司问会不会Sass, gulp, Angular等技能，what ?  这都是些啥， 一个都不会。虽然对于面试问题的回答都是不会、不知道，最终面试还是通过了。当时是面试完了就直接给我说：如果我愿意来明天就可以来上班，其他都好薪资比之前要低，这就什么都不好了，但又想谁叫自己现在技术这么low呢？能有公司收留我就很不错了，而且面试的刘老师说的是：只要我在试用期间掌握了他说的那些技术，转正后的工资可以翻倍涨。所以暂时可以先把工资抛一边，能学东西最重要。 本来是打算就在这家公司上班，后面的面试都没打算去了。但想到薪资心里始终还是有些不甘心，而且这才面一家，说不定多面两家会有更好的选择呢？</p>\n<p>接着又面试了 第二，三家，这两次的面试也就那样，面试后来也没结果。</p>\n<p>第四家公司的面试是我工作以来所有面试中最正式的一家，填完表后先做了一套逻辑题，然后人事面试问了各种问题，再是技术的Leader来面试。 这家技术上的问题相比第一家公司的问题要简单些，至少有些问题我能回答得上来，有些也是有连蒙带猜才答对，也有不知道、不会、忘记了一系列的回答。</p>\n<p>面试完后让我回家等结果，说到时会通知是复试或直接入职。其实当时还是很想来这家公司上班的，但自我感觉肯定没戏。面试的时候说了不少的不会、不知道，而且期望薪资还要还不低。感谢上帝，五点多钟人事打来电话说面试通过了。然后谈下了公司的福利及薪资待遇，薪资可以开到我的期望薪资，而且转正了还可根据能力往上调。我有点小激动了！真没想到能收到这家公司的offer。</p>\n<h4 id=\"【陷入选择困难症】\"><a href=\"#【陷入选择困难症】\" class=\"headerlink\" title=\"【陷入选择困难症】\"></a>【陷入选择困难症】</h4><p>不过收到了第四家的offer后又挺纠结的，本来开始已经打算就去第一家公司入职的，这下到要选择哪家呢？考虑了半天，还抛了硬币，还是薪资高的的有诱惑力些，最终选择了第四家。</p>\n<p>周一准时来到公司报道，公司的小伙伴们大多都是90后，对新同事也相当的热情。公司氛围还不错，来到新公司师傅教的SVN首先就派上了用场，一来就先装SVN更新代码，然后小组长分配任务，分配的任务是以前从来没接触过完全不会做，为了完成任务就只能不断去请教同事，每个同事好像也都忙得不可开交，我实在不忍心打扰，但又不得不问。在同事的帮助下加班到9：30，才完成了自己的工作任务。第二天，我发现我昨天写的代码小组长又全部重写了一遍，但他啥也没说。看了之后好过意不去，那明明是我的工作，我不但要麻烦他来教我，最后搞得他还得重做一遍，而且大家都挺忙的。后来又得知我们这个项目的时间节点就快到了，感觉压力山大，不但帮不到项目组，反倒还会拖累项目进度。</p>\n<p>经过这两天的事，第二天我便想辞职了，或许是不知道该如何来缓解这种压力，而选择了逃避吧！也或许是觉得得不到的才是最好的，结果失去了才想要珍惜。</p>\n<p>心想着如果去第一家公司会不会好一点呢，面试的刘老师给我说的是，试用期就安排我写点页面，力所能及的事，其余时间让我自学。于是我又给第一家公司打了电话，问他们招到合适的前端没，厚脸皮的说我还是想去他们那上班， 是否还有这个机会，结果还可以去。通完电话后我在QQ上给在职公司的技术leader黄老师说了离职的事，当时黄老师很忙，给我回复了一句 “解决问题的方法不止一个，等他忙完面谈”</p>\n<p>面谈过程中，黄老师问到我离职的原因，我说了这两天的工作情况以及自己的一些想法，自己技术太low,项目赶时间，自己一点忙都帮不上，还麻烦别人影响他人开发进度。黄老师说：”你才上班第二天，新人都有个适应过程，现在不会也没关系，Ajax也不难，很快就学会了，项目上让小组长先给我安排些我能做的任务，让我不必着急做决定辞职，如果工作一周后还不适应再做决定也不迟”  其实当时是走是留我又犹豫了，如果再等一 周第一家公司肯定是去不了了。后来还是执意选择了离开。如果当时打电话第一家公司说不要了，在这家公司不论再怎么艰难我都会坚持下去的。</p>\n<p>中午下班后就离开了公司来到面试的第一家公司，来到新公司后，可能是反反复复的说不来然后又来的原因吧，给同事的留下的第一印象肯定遭透了，如果是因为这个原因留下了不好印象，我也会在以后的工作中好好努力，能有个好的印象。感觉同事们对我都不理不彩的，也许是自己想多了，之前公司的小伙伴那么热情，两家公司同事的态度对比太大，心里有那么一丢丢失落。但我只是个来工作的新人，又不是重要人物，凭什么人家都要热情欢迎你呢。</p>\n<h4 id=\"【后悔当初的离开】\"><a href=\"#【后悔当初的离开】\" class=\"headerlink\" title=\"【后悔当初的离开】\"></a>【后悔当初的离开】</h4><p><img src=\"/css/images/1451784209.jpg\" alt=\"\"></p>\n<p>来到新公司又感觉特别压抑，第二天加班到十点半，九点多的时候妈妈打来电话问新下班没，我说还在加班，妈妈关心到这么晚了还在加班，说着说着，差点哭了，因为在忙，没说两句就挂了，下班后给妈妈回了电话，在车上说着说着泪水又开始打转，我强忍着没哭，一下了车就忍不住了，哭得个稀里哗啦的，哭不是因为加班太累而哭，而是因为这两天经历，在新的公司上了两天班，我又后悔离开了上一家公司。我恨自己做出的这些选择，为什么总是有诸多不满，不管什么结果都是自己选择的还好意思哭。妈妈安慰着我说，不想去上班就不去，你就在家耍着，耍够了想上班了再找工作，本来之前就叫你辞了职在家不着急找工作，是你自己硬要着急找工作，妈妈越是这么纵然我，就哭得越伤心了，跟妈妈通完电话，擦干泪水，跟一闺蜜打了电话倾了一翻，闺蜜也说做得 不开心就不做了，别委屈了自己，这个月不准急着找工作了，等完五一再找工作，后来我也决定不去了。</p>\n<p>第二天一早，给刘老师了发了条QQ信息，说了辞职的事。</p>\n<p>他问是不是因为加班才要辞职，如果是加班，可以尽量不安排我加班，我说跟加班没关系.</p>\n<p>他又问是不是薪资问题，我回答说：跟薪资还是有点关系，觉得太低了。</p>\n<p>后来刘老师说，待遇可以给我调下，试用期在原来的基础上涨1K，等掌握一些技能后再涨，如果觉得可以，吃完中午下午就去回公司来上班。</p>\n<p>我想着，就算辞了我肯定不会耍到五一后再找工作，而且毕竟现在技术有限呀！下午竟然又厚着脸皮回到了公司。</p>\n<h4 id=\"【再次辞职】\"><a href=\"#【再次辞职】\" class=\"headerlink\" title=\"【再次辞职】\"></a>【再次辞职】</h4><p>在这家公司始终有诸多不适，才做了一个月就又想辞职，但那个时候公司又忙，正是用人之际，也就没提，刚好做满两个月，又新招了两个前端，我提出了辞职了，提出辞职的时候，刘老师又说是不是因为加班，或是薪资的原因，他说薪资可以再次给我调整了，其实说到涨薪资犹豫了一下还要不要辞，毕竟工作也不好找，经过深思熟虑，还是辞职了。</p>\n<p>这两个月里一边工作一边学习，还是有了不少收获，学会使用浏览器的控制台调试JS； sass, gulp ,ionic angular这些都入门简单的都会用了。也掌握了更多做移动端的知识。</p>\n<p>这次辞职之后也没着急找工作，甚至不想做前端了，也就没有投简历，但简历还是在几个招聘网公开了，有主动联系的就去面试看看。</p>\n<p>刚好周五辞职，周未就收到两家公司周一的面试邀请，上午一家下午一家，本想着如果这两家公司面试不过，就真不做前端了，去做点自己想做的事，不巧的是两家公司面试都通过了，经过上一次的教训，这次可要慎重选择了，最后选择了海云数据。</p>\n<h4 id=\"【又开始了新的工作】\"><a href=\"#【又开始了新的工作】\" class=\"headerlink\" title=\"【又开始了新的工作】\"></a>【又开始了新的工作】</h4><p>周二入职开始上班，进公司前半个月，先熟悉公司的项目，项目所需要掌握的技术，公司产品（图易）的使用。前端组的小伙伴大部分都是今年毕业的，但看他们一个个coding都比我6。感觉自己是前端组最low的一个。而且刚开始在公司接触的人学历要么本科要么研究生，难道就我一个是专科？后来才知道还是有一部分人也是专科毕业。但这次我不会因为这些原因而感到有压力又干个一两天就辞职了。</p>\n<p>八月初公司一个新项目启动了，新项目组刚开始前端安排了三个人，后来人员调动只有两个前端我是其中之一。安排到了新项目真是悲喜交加呀！这个项目是公司重庆这边打头阵的一个新项目，因此Leader都比较重视。我生 怕自己做不好，但不管做不做得好，来公司总得做活路吧！</p>\n<p>嗯！拿到需求就干不要怂。</p>\n<p>进入开发模式第一步：定义接口，哇哦！不怂才怪，什么是接口？怎么定义？听说是要自己先写一份能跑起来的JSON格式的数据，呐哩！JOSN又是什么鬼，这个名字好像以前倒是听过，不但不知道格式长什么的。不会不知道不代表不做呀！问呗！问着问着终于定义好了一份像样的接口。只是看着像样，后来跟后端讨论的时候漏洞百出。</p>\n<p>第二步：还原设计稿，这一步倒是没什么问题。</p>\n<p>第三步：功能开发，功能开发的时候也没少折腾，首先使用图易开发不能用JQuery,只能用原生JS来开发功能，这下玩儿完了，对原生JS掌握程度为10%甚至不到10%， 一开始要用Ajax发请求拿数据都被困住了，然后参考了之前项目的代码，知道了怎么使用Ajax的GET发请求了。结果向后端发请求的时候还需要传参数，又不知道怎么传参数了，问呀！遇到问题赶紧求救。原来是把参数带到url里面就可以，结果有一个功能点需要把GET请求换成POST，问题又来了，总之在这一环节问题解决一波又来一波。</p>\n<p>这期间可没少加班呀！记得开发地图钻取功能的时候，有一天打开淘宝准备买个东西，结果在搜索框里输了个 “地图下钻”。有时候一回家倒床就睡了，凌晨两三点醒来才发现自己还没洗漱。</p>\n<h4 id=\"【项目初验】\"><a href=\"#【项目初验】\" class=\"headerlink\" title=\"【项目初验】\"></a>【项目初验】</h4><p><img src=\"/css/images/1453689666.jpg\" alt=\"\"></p>\n<p>8月底，项目要初验，PM下午过来查看项目情况，PM看过之后提了几个严重的bug。毕竟明天就要验收了，还有这么明显的bug的，PM有些生气了，PM生气的问我们这个怎么怎么。。。这个怎么怎么。。。 虽然说是对事不对人，但因为有些问题并不是我的的原因，当时我就觉得特别委屈。都不敢开口回答为什么了，因为一说话就要崩泪。其实这个时候我有一种冲动，走人不干了，大不了这个月工资不要了。但这样也太没责任心了吧，毕竟项目到这个节骨眼儿上了，要走也得等这个项目完结吧！</p>\n<p>后来问着问着我实在忍不住跑去了厕所，厕所居然没灯黑漆漆一片，找了个角落蹲了下来，这时泪水再也忍不住了，两眼不停的漏水，哭完之后，擦干泪水洗把脸，回去继续改bug，同事拿来晚饭叫我吃了饭再改 ，这个时候哪里还吃得下饭呀！也不敢跟他们说话，又说话就又要漏水。对于现在这个结果我真的是已经尽我所能去完成了。后来我改了几个简单的bug就让我先回去了，可怜项目组的另一个前端了，好像加班到挺晚的。</p>\n<p>回家的路上又反思了下自己，不能动不动就想着辞职，工作嘛在哪儿都会受点委屈的，咬咬牙就过去了，遇到问题就想办法解决问题。</p>\n<p>第二天的初验如期进行，初验那天真是心惊胆战呀！初验之后，客户又提了新需求，之后一边开发新需求一边改bug做优化，总之每天问题多多，问白老师、问帮主、问同事、不会就会问。最后几经波折，客户终于在合同上签字了。</p>\n<h4 id=\"【跌跌撞撞到年底】\"><a href=\"#【跌跌撞撞到年底】\" class=\"headerlink\" title=\"【跌跌撞撞到年底】\"></a>【跌跌撞撞到年底】</h4><p>第一个项目结束后，还是收获不少，后面的参与的项目也会不断的遇到问题，但解决问题的能力也有了逐步提高，coding逻辑更加清晰了，常用的一些JS方法也熟练些了，再后来慢慢的学会了用使得sea.js将代码模块化，使用D3.js绘制一些Echarts不能实现的图表。</p>\n<p>当然在这家公司也有时候被项目搞得焦头烂额的时候 又有过过辞职的念头，不过一想到有问题还有大神级别的白老师在，工作压抑的时候有幽默的帮主活跃氛围，还有一群相互帮助的小伙伴，每周还有技术分享。就又有了坚持下来的动力，而且不能总是遇到问题就选择逃避吧，要勇敢面对才能成长。</p>\n<p>四月之后这几个月的生活真是瞬息万变呀！有时候我会想拿着比去年高了那么一丢丢的工资，生活得却比去年艰辛了N倍， 这是在自虐么？其若不然，我更享受现在这样的生活状态，每天都会面对不同的挑战，享受每天都在进步的感觉，所谓痛并快乐吧！也从未后悔离开了那舒适安逸的环境，如若不是辞职就犹如笼子里的小鸟，永远不知道外面的林子有多大。</p>\n<p>这一年的经历真是给我的狠狠的一个教训，决不要在该奋斗的年龄选择安逸的生活。一定要督促自己不断进步，享受生命的成长过程，但愿能创造美好未来送给自己。相信会越努力越幸运，越简单越快乐！</p>\n<p>能从最初的不会编程一直坚持到现在，真的非常感谢师傅、白老师、帮主及同事的技术指导，家人朋友的的支持与鼓励。感谢上帝、感谢所有帮助过我的人。新的一年愿家人朋友及身边所有人身体健康，天天开心快乐！鸡年大吉！</p>\n<p><img src=\"/css/images/1468981737.jpg\" alt=\"\"></p>\n<h4 id=\"【新年小目标】\"><a href=\"#【新年小目标】\" class=\"headerlink\" title=\"【新年小目标】\"></a>【新年小目标】</h4><p>2017年暂定目标：</p>\n<p>coding 666 !</p>\n<p>先学好React，用D3.js画几个炫哭的图吧</p>\n<p>多看书，今年在当当买的书好像一本也没看完</p>\n<p>多记笔记，更新博客</p>\n<p>多运行，减肥，瘦瘦痩！</p>\n<p>要不来个自媒体吧！</p>"},{"title":"react评论框实例","date":"2017-02-20T13:58:41.000Z","_content":"\n我们将建立一个你可以放进博客的简单却真实的评论框，一个 Disqus、LiveFyre 或 Facebook comments 提供的实时评论的基础版本。\n\n我们将提供：\n\n一个所有评论的视图\n一个用于提交评论的表单\n为你提供制定后台的挂钩(Hooks)\n同时也会有一些简洁的功能：\n\n优化的评论： 评论在它们保存到服务器之前就显示在列表里,所以感觉很快。\n实时更新： 其他用户的评论被实时浮现到评论中。\nMarkdown格式化： 用户可以用Markdown格式化它们的文字。\n想要跳过所有内容，只查看源代码？\n全在 GitHub .\n\n运行服务器\n为了开始本教程，我们将要需要一个运行着的服务器。这将是我们纯粹用来获取和保存数据的伺服终端。为了让这尽可能的容易，我们已经用许多不同的语言编写了简单的服务器，它正好完成我们需要的事。 你可以查看源代码 或者 下载 zip 文件 包括了所有你开始学习需要的东西\n\n为了简单起见，我们将要运行的服务器使用 JSON 文件作为数据库。你不会在生产环境运行这个，但是它让我们更容易模拟使用一个API时你可能会做的事。一旦你启动服务器，它将会支持我们的API终端,同时也将伺服我们需要的静态页面。\n\n### 开始\n对于此教程,我们将使它尽可能的容易。被包括在上面讨论的服务器包里的是一个我们将在其中工作的 HTML 文件。在你最喜欢的编辑器里打开 public/index.html。它应该看起来像这样 （可能有一些小的不同，稍后我们将添加一个额外的 <code> script </code> 标签）：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>React Tutorial</title>\n    <script src=\"https://npmcdn.com/react@15.3.1/dist/react.js\"></script>\n    <script src=\"https://npmcdn.com/react-dom@15.3.1/dist/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n    <script src=\"https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js\"></script>\n    <script src=\"https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"content\"></div>\n    <script type=\"text/babel\" src=\"scripts/example.js\"></script>\n    <script type=\"text/babel\">\n      // To get started with this tutorial running your own code, simply remove\n      // the script tag loading scripts/example.js and start writing code here.\n    </script>\n  </body>\n</html>\n\n```\n\n在本教程剩余的部分，我们将在此 script 标签中编写我们的 JavaScript 代码。我们没有任何高级的实时加载所以在保存以后你需要刷新你的浏览器来观察更新。通过在浏览器打开 http://localhost:3000 关注你的进展。当你没有任何修改第一次加载时，你将看到我们将要准备建立的已经完成的产品。当你准备开始工作，请删除前面的 <script> 标签然后你就可以继续了。\n\n注意：\n我们在这里引入 jQuery 是因为我们想简化我们未来的 ajax 请求，但这对React的正常工作 不是 必要的。\n\n","source":"_posts/react评论框实例.md","raw":"---\ntitle: react评论框实例\ndate: 2017-02-20 21:58:41\ntags:\n---\n\n我们将建立一个你可以放进博客的简单却真实的评论框，一个 Disqus、LiveFyre 或 Facebook comments 提供的实时评论的基础版本。\n\n我们将提供：\n\n一个所有评论的视图\n一个用于提交评论的表单\n为你提供制定后台的挂钩(Hooks)\n同时也会有一些简洁的功能：\n\n优化的评论： 评论在它们保存到服务器之前就显示在列表里,所以感觉很快。\n实时更新： 其他用户的评论被实时浮现到评论中。\nMarkdown格式化： 用户可以用Markdown格式化它们的文字。\n想要跳过所有内容，只查看源代码？\n全在 GitHub .\n\n运行服务器\n为了开始本教程，我们将要需要一个运行着的服务器。这将是我们纯粹用来获取和保存数据的伺服终端。为了让这尽可能的容易，我们已经用许多不同的语言编写了简单的服务器，它正好完成我们需要的事。 你可以查看源代码 或者 下载 zip 文件 包括了所有你开始学习需要的东西\n\n为了简单起见，我们将要运行的服务器使用 JSON 文件作为数据库。你不会在生产环境运行这个，但是它让我们更容易模拟使用一个API时你可能会做的事。一旦你启动服务器，它将会支持我们的API终端,同时也将伺服我们需要的静态页面。\n\n### 开始\n对于此教程,我们将使它尽可能的容易。被包括在上面讨论的服务器包里的是一个我们将在其中工作的 HTML 文件。在你最喜欢的编辑器里打开 public/index.html。它应该看起来像这样 （可能有一些小的不同，稍后我们将添加一个额外的 <code> script </code> 标签）：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>React Tutorial</title>\n    <script src=\"https://npmcdn.com/react@15.3.1/dist/react.js\"></script>\n    <script src=\"https://npmcdn.com/react-dom@15.3.1/dist/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n    <script src=\"https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js\"></script>\n    <script src=\"https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"content\"></div>\n    <script type=\"text/babel\" src=\"scripts/example.js\"></script>\n    <script type=\"text/babel\">\n      // To get started with this tutorial running your own code, simply remove\n      // the script tag loading scripts/example.js and start writing code here.\n    </script>\n  </body>\n</html>\n\n```\n\n在本教程剩余的部分，我们将在此 script 标签中编写我们的 JavaScript 代码。我们没有任何高级的实时加载所以在保存以后你需要刷新你的浏览器来观察更新。通过在浏览器打开 http://localhost:3000 关注你的进展。当你没有任何修改第一次加载时，你将看到我们将要准备建立的已经完成的产品。当你准备开始工作，请删除前面的 <script> 标签然后你就可以继续了。\n\n注意：\n我们在这里引入 jQuery 是因为我们想简化我们未来的 ajax 请求，但这对React的正常工作 不是 必要的。\n\n","slug":"react评论框实例","published":1,"updated":"2017-02-21T01:39:11.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn92003t24uunoq85yjq","content":"<p>我们将建立一个你可以放进博客的简单却真实的评论框，一个 Disqus、LiveFyre 或 Facebook comments 提供的实时评论的基础版本。</p>\n<p>我们将提供：</p>\n<p>一个所有评论的视图<br>一个用于提交评论的表单<br>为你提供制定后台的挂钩(Hooks)<br>同时也会有一些简洁的功能：</p>\n<p>优化的评论： 评论在它们保存到服务器之前就显示在列表里,所以感觉很快。<br>实时更新： 其他用户的评论被实时浮现到评论中。<br>Markdown格式化： 用户可以用Markdown格式化它们的文字。<br>想要跳过所有内容，只查看源代码？<br>全在 GitHub .</p>\n<p>运行服务器<br>为了开始本教程，我们将要需要一个运行着的服务器。这将是我们纯粹用来获取和保存数据的伺服终端。为了让这尽可能的容易，我们已经用许多不同的语言编写了简单的服务器，它正好完成我们需要的事。 你可以查看源代码 或者 下载 zip 文件 包括了所有你开始学习需要的东西</p>\n<p>为了简单起见，我们将要运行的服务器使用 JSON 文件作为数据库。你不会在生产环境运行这个，但是它让我们更容易模拟使用一个API时你可能会做的事。一旦你启动服务器，它将会支持我们的API终端,同时也将伺服我们需要的静态页面。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>对于此教程,我们将使它尽可能的容易。被包括在上面讨论的服务器包里的是一个我们将在其中工作的 HTML 文件。在你最喜欢的编辑器里打开 public/index.html。它应该看起来像这样 （可能有一些小的不同，稍后我们将添加一个额外的 <code> script </code> 标签）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React Tutorial<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/react@15.3.1/dist/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/react-dom@15.3.1/dist/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/example.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      <span class=\"comment\">// To get started with this tutorial running your own code, simply remove</span></div><div class=\"line\">      <span class=\"comment\">// the script tag loading scripts/example.js and start writing code here.</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在本教程剩余的部分，我们将在此 script 标签中编写我们的 JavaScript 代码。我们没有任何高级的实时加载所以在保存以后你需要刷新你的浏览器来观察更新。通过在浏览器打开 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> 关注你的进展。当你没有任何修改第一次加载时，你将看到我们将要准备建立的已经完成的产品。当你准备开始工作，请删除前面的 <script> 标签然后你就可以继续了。</p>\n<p>注意：<br>我们在这里引入 jQuery 是因为我们想简化我们未来的 ajax 请求，但这对React的正常工作 不是 必要的。</p>\n</script></p>","excerpt":"","more":"<p>我们将建立一个你可以放进博客的简单却真实的评论框，一个 Disqus、LiveFyre 或 Facebook comments 提供的实时评论的基础版本。</p>\n<p>我们将提供：</p>\n<p>一个所有评论的视图<br>一个用于提交评论的表单<br>为你提供制定后台的挂钩(Hooks)<br>同时也会有一些简洁的功能：</p>\n<p>优化的评论： 评论在它们保存到服务器之前就显示在列表里,所以感觉很快。<br>实时更新： 其他用户的评论被实时浮现到评论中。<br>Markdown格式化： 用户可以用Markdown格式化它们的文字。<br>想要跳过所有内容，只查看源代码？<br>全在 GitHub .</p>\n<p>运行服务器<br>为了开始本教程，我们将要需要一个运行着的服务器。这将是我们纯粹用来获取和保存数据的伺服终端。为了让这尽可能的容易，我们已经用许多不同的语言编写了简单的服务器，它正好完成我们需要的事。 你可以查看源代码 或者 下载 zip 文件 包括了所有你开始学习需要的东西</p>\n<p>为了简单起见，我们将要运行的服务器使用 JSON 文件作为数据库。你不会在生产环境运行这个，但是它让我们更容易模拟使用一个API时你可能会做的事。一旦你启动服务器，它将会支持我们的API终端,同时也将伺服我们需要的静态页面。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>对于此教程,我们将使它尽可能的容易。被包括在上面讨论的服务器包里的是一个我们将在其中工作的 HTML 文件。在你最喜欢的编辑器里打开 public/index.html。它应该看起来像这样 （可能有一些小的不同，稍后我们将添加一个额外的 <code> script </code> 标签）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React Tutorial<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/react@15.3.1/dist/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/react-dom@15.3.1/dist/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scripts/example.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">      <span class=\"comment\">// To get started with this tutorial running your own code, simply remove</span></div><div class=\"line\">      <span class=\"comment\">// the script tag loading scripts/example.js and start writing code here.</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在本教程剩余的部分，我们将在此 script 标签中编写我们的 JavaScript 代码。我们没有任何高级的实时加载所以在保存以后你需要刷新你的浏览器来观察更新。通过在浏览器打开 <a href=\"http://localhost:3000\">http://localhost:3000</a> 关注你的进展。当你没有任何修改第一次加载时，你将看到我们将要准备建立的已经完成的产品。当你准备开始工作，请删除前面的 <script> 标签然后你就可以继续了。</p>\n<p>注意：<br>我们在这里引入 jQuery 是因为我们想简化我们未来的 ajax 请求，但这对React的正常工作 不是 必要的。</p>\n"},{"title":"浏览器兼容性问题汇总","date":"2016-12-21T14:59:16.000Z","_content":"\n\n<code>trim</code>（不支持IE6~IE9） 去掉字符串中的空格。\n\n```javascript\n// 以下为兼容写法\nString.prototype.trim = function () {\n    return this.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n}\n\n```\n\n\n<!--more-->\n\n<code>requestAnimationFrame</code>（不支持IE6~IE9）它是由浏览器专门为动画提供的API，效果和setTimeout/setInterval类似。\n\n```javascript\n// 以下为兼容写法\nvar rAF = window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function (callback) { window.setTimeout(callback, 1000 / 60); };\n\n```\n\n<code>addEventListener</code> （不支持IE）  为元素绑定事件。\n```javascript\n// 以下写法可以兼容大部分情况\nvar addHandler = function(el, type, handler, args) {\n    if (el.addEventListener) {\n        el.addEventListener(type, handler, false);\n    } else if (el.attachEvent) {\n        el.attachEvent('on' + type, handler);\n    } else {\n        el['on' + type] = handler;\n    }\n};\nvar removeHandler = function(el, type, handler, args) {\n    if (el.removeEventListener) {\n        el.removeEventListener(type, handler, false);\n    } else if (el.detachEvent) {\n        el.detachEvent('on' + type, handler);\n    } else {\n        el['on' + type] = null;\n    }\n};\n```\n\nevent.target （不支持IE6~IE9） 引发事件的DOM元素。\n\n```javascript\n// 以下为兼容写法\ntarget = event.target || event.srcElement;\n```\n\nevent.preventDefault （不支持IE6~IE9）如果事件对象的cancelable属性为true，则该方法可以取消事件的默认动作，但并不取消事件的冒泡行为。\n\n```javascript\n// 以下为兼容写法\nevent.preventDefault ? event.preventDefault() : (event.returnValue = false);\n\n```\nevent.stopPropagation（不支持IE6~IE9）阻止事件的冒泡行为。\n\n```javascript\n// 以下为兼容写法\nevent.stopPropagation ? event.stopPropagation() : (event.cancelBubble = false);\n\n```\nevent.touches.pageX（不支持IE6~IE9）鼠标在页面上的位置,从页面左上角开始,即是以页面为参考点,不随滑动条移动而变化。\n\n```javascript\n// 以下为兼容写法\nvar touches = e.touches ? e.touches[0] : e;\nvar pageX = (touches.pageX) ? touches.pageX : e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);\nvar pageY = (touches.pageY) ? touches.pageY : e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);\n\n```","source":"_posts/浏览器兼容性问题汇总.md","raw":"---\ntitle: 浏览器兼容性问题汇总\ndate: 2016-12-21 22:59:16\ncategories: \n  - 技术\n  - JavaScript\ntags: [JavaScript, JS兼容性]\n---\n\n\n<code>trim</code>（不支持IE6~IE9） 去掉字符串中的空格。\n\n```javascript\n// 以下为兼容写法\nString.prototype.trim = function () {\n    return this.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n}\n\n```\n\n\n<!--more-->\n\n<code>requestAnimationFrame</code>（不支持IE6~IE9）它是由浏览器专门为动画提供的API，效果和setTimeout/setInterval类似。\n\n```javascript\n// 以下为兼容写法\nvar rAF = window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function (callback) { window.setTimeout(callback, 1000 / 60); };\n\n```\n\n<code>addEventListener</code> （不支持IE）  为元素绑定事件。\n```javascript\n// 以下写法可以兼容大部分情况\nvar addHandler = function(el, type, handler, args) {\n    if (el.addEventListener) {\n        el.addEventListener(type, handler, false);\n    } else if (el.attachEvent) {\n        el.attachEvent('on' + type, handler);\n    } else {\n        el['on' + type] = handler;\n    }\n};\nvar removeHandler = function(el, type, handler, args) {\n    if (el.removeEventListener) {\n        el.removeEventListener(type, handler, false);\n    } else if (el.detachEvent) {\n        el.detachEvent('on' + type, handler);\n    } else {\n        el['on' + type] = null;\n    }\n};\n```\n\nevent.target （不支持IE6~IE9） 引发事件的DOM元素。\n\n```javascript\n// 以下为兼容写法\ntarget = event.target || event.srcElement;\n```\n\nevent.preventDefault （不支持IE6~IE9）如果事件对象的cancelable属性为true，则该方法可以取消事件的默认动作，但并不取消事件的冒泡行为。\n\n```javascript\n// 以下为兼容写法\nevent.preventDefault ? event.preventDefault() : (event.returnValue = false);\n\n```\nevent.stopPropagation（不支持IE6~IE9）阻止事件的冒泡行为。\n\n```javascript\n// 以下为兼容写法\nevent.stopPropagation ? event.stopPropagation() : (event.cancelBubble = false);\n\n```\nevent.touches.pageX（不支持IE6~IE9）鼠标在页面上的位置,从页面左上角开始,即是以页面为参考点,不随滑动条移动而变化。\n\n```javascript\n// 以下为兼容写法\nvar touches = e.touches ? e.touches[0] : e;\nvar pageX = (touches.pageX) ? touches.pageX : e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);\nvar pageY = (touches.pageY) ? touches.pageY : e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);\n\n```","slug":"浏览器兼容性问题汇总","published":1,"updated":"2016-12-29T05:01:27.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn97003x24uuw68jim9w","content":"<p><code>trim</code>（不支持IE6~IE9） 去掉字符串中的空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><code>requestAnimationFrame</code>（不支持IE6~IE9）它是由浏览器专门为动画提供的API，效果和setTimeout/setInterval类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> rAF = <span class=\"built_in\">window</span>.requestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.mozRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.oRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.msRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123; <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>); &#125;;</div></pre></td></tr></table></figure>\n<p><code>addEventListener</code> （不支持IE）  为元素绑定事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下写法可以兼容大部分情况</span></div><div class=\"line\"><span class=\"keyword\">var</span> addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, handler, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (el.addEventListener) &#123;</div><div class=\"line\">        el.addEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.attachEvent) &#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = handler;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> removeHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, handler, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (el.removeEventListener) &#123;</div><div class=\"line\">        el.removeEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.detachEvent) &#123;</div><div class=\"line\">        el.detachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>event.target （不支持IE6~IE9） 引发事件的DOM元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">target = event.target || event.srcElement;</div></pre></td></tr></table></figure>\n<p>event.preventDefault （不支持IE6~IE9）如果事件对象的cancelable属性为true，则该方法可以取消事件的默认动作，但并不取消事件的冒泡行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">event.preventDefault ? event.preventDefault() : (event.returnValue = <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>event.stopPropagation（不支持IE6~IE9）阻止事件的冒泡行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>event.touches.pageX（不支持IE6~IE9）鼠标在页面上的位置,从页面左上角开始,即是以页面为参考点,不随滑动条移动而变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> touches = e.touches ? e.touches[<span class=\"number\">0</span>] : e;</div><div class=\"line\"><span class=\"keyword\">var</span> pageX = (touches.pageX) ? touches.pageX : e.clientX + (<span class=\"built_in\">document</span>.documentElement.scrollLeft ? <span class=\"built_in\">document</span>.documentElement.scrollLeft : <span class=\"built_in\">document</span>.body.scrollLeft);</div><div class=\"line\"><span class=\"keyword\">var</span> pageY = (touches.pageY) ? touches.pageY : e.clientY + (<span class=\"built_in\">document</span>.documentElement.scrollTop ? <span class=\"built_in\">document</span>.documentElement.scrollTop : <span class=\"built_in\">document</span>.body.scrollTop);</div></pre></td></tr></table></figure>","excerpt":"<p><code>trim</code>（不支持IE6~IE9） 去掉字符串中的空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p><code>requestAnimationFrame</code>（不支持IE6~IE9）它是由浏览器专门为动画提供的API，效果和setTimeout/setInterval类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> rAF = <span class=\"built_in\">window</span>.requestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.mozRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.oRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"built_in\">window</span>.msRequestAnimationFrame ||</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123; <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>); &#125;;</div></pre></td></tr></table></figure>\n<p><code>addEventListener</code> （不支持IE）  为元素绑定事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下写法可以兼容大部分情况</span></div><div class=\"line\"><span class=\"keyword\">var</span> addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, handler, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (el.addEventListener) &#123;</div><div class=\"line\">        el.addEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.attachEvent) &#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = handler;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> removeHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, handler, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (el.removeEventListener) &#123;</div><div class=\"line\">        el.removeEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.detachEvent) &#123;</div><div class=\"line\">        el.detachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>event.target （不支持IE6~IE9） 引发事件的DOM元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">target = event.target || event.srcElement;</div></pre></td></tr></table></figure>\n<p>event.preventDefault （不支持IE6~IE9）如果事件对象的cancelable属性为true，则该方法可以取消事件的默认动作，但并不取消事件的冒泡行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">event.preventDefault ? event.preventDefault() : (event.returnValue = <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>event.stopPropagation（不支持IE6~IE9）阻止事件的冒泡行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\">event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>event.touches.pageX（不支持IE6~IE9）鼠标在页面上的位置,从页面左上角开始,即是以页面为参考点,不随滑动条移动而变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下为兼容写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> touches = e.touches ? e.touches[<span class=\"number\">0</span>] : e;</div><div class=\"line\"><span class=\"keyword\">var</span> pageX = (touches.pageX) ? touches.pageX : e.clientX + (<span class=\"built_in\">document</span>.documentElement.scrollLeft ? <span class=\"built_in\">document</span>.documentElement.scrollLeft : <span class=\"built_in\">document</span>.body.scrollLeft);</div><div class=\"line\"><span class=\"keyword\">var</span> pageY = (touches.pageY) ? touches.pageY : e.clientY + (<span class=\"built_in\">document</span>.documentElement.scrollTop ? <span class=\"built_in\">document</span>.documentElement.scrollTop : <span class=\"built_in\">document</span>.body.scrollTop);</div></pre></td></tr></table></figure>"},{"title":"每一段旅途都有他的意义[二]","date":"2015-08-28T15:29:10.000Z","_content":" \n西安几个主景(还差个大雁塔没时间去)游完后，下一站是华山。8月22日下午16:06我们乘坐的K2046次列车，在火车上还偶遇一陕西帅哥，具体是哪个市的忘记了，他的位置在我旁边，在车上他、我、传姐我们三个人一直聊到下车，我们都是在华山站下车，然后各自离去，<!--more-->之后我们去买了些今天晚上和明天早上在山上需要的食物和水。紧接着坐车到山脚下，然后吃晚饭，吃完晚饭是七点多，就一直在山脚下玩到了九点半，然后各自背上一个双肩包开始夜爬华山。\n\n夜爬华山，曾经从未想过的一个念头，人生本就是这样的，总要经历一些突如其来的事。一切都在按规划之中，也就没有挑战性，没有生活乐趣及意义了。\n\n目标已定，接下来要做的就是咬紧牙关，爬到华山最高峰。\n\n最初的那一小时，路不陡也更谈不上险了，走得挺轻松自在的，看着远处山上那弯弯曲曲且越来越高的点点光芒，心里总盼着可以快点到阶梯路段。在山下可能走了两个小时才终于到达了阶梯路段，到了阶梯路段的起点后，一路上去基本上全是台阶，两边是铁链子，有些路段窄得只容得下一个人；有些路段是笔直的九十度；有些路段两边是悬崖峭壁、万丈深渊。但由于是晚上，即使是万丈深渊我们也只看到黑漆漆的一片，可晚上我们又需更加小心，不然一不留神就不知道掉到哪个崖缝去了。\n\n从山脚到峰顶的过程中，刚开始是凭借自己的体力徒步登山，到后面是拉着铁链在爬山，再后面拉铁链都爬不动了，直接双手撑地上爬着走，当体力不支的时候能清楚的听到自己的喘气声。一路上我们走走停停，不断的歇息，同时相互鼓励、帮助、照看、提醒。可见我们这团队不管是在工作中，还是生活上，都能做到团结一致、携手共济，我也很庆幸在我的人生中能与他们相识。           因为背了背包的原因吧，背部总是早早就被汗水浸湿，每一次停下歇息都能感受到背部的冰凉，不过山上风大，休息一会儿就又干了，总之是反反复复的湿了又干，干了又湿。当爬到半山腰的时候，已经凌晨过了，一个劲儿的想睡觉，只要一坐下歇息，感觉就能马上睡着。清楚记得在爬完天梯那段路程后，在王母宫那里歇息了好一会儿，那里有一块特大的石板，当时躺在上面的感觉比平时躺家里的床上都还要舒服，真想在这里睡上一觉，睡醒后再继续爬山。不过不管前面的路程有多艰难、险阻、遥远，只要坚持下去，就一定会达到终点。岂能被一块石板就诱惑了前进的毅力。休息好之后又继续向前。越是往上爬就越想睡觉，但只要咬咬牙，坚持一会儿，我们就离峰顶又近了一步。\n\n五点半左右，天开始亮了，这个时候一心盼着快到金锁关，因为只要到了金锁关，离东峰以及看日出的观日台就近了，六点过终于到了金锁关，这个时候这里可以看到朝霞已经开始显露，同时金锁关也被挤得水泄不通，所有人都挤在了这里等着看日出（后来听说今天所有早早来占个位置，挤在这里等看日出的人都非常失落，日出被云挡住了）。我本来想再向前，爬到东峰的观日台，可是已经寸步难移，根本上不去了。金锁关这里也没好的位置看日出和拍照了，我就挤到了另一条通向西峰的道路，在路边坐着休息等他们。\n\n天一亮，感觉整个人又精神满满、朝气蓬勃。达到山顶后，不管是站在峰顶还是山上任意一个角落，眼前的景色都是十分耀眼。等到他们在金锁关拍完照片，我们相继到了东峰，再去了南峰，当站在最高峰（南峰）那一刻时，眺望着四周美景，昨晚的疲惫似乎都已烟消云散，一切的付出也都值了。在南峰遗憾的是没能去长空栈道体验一翻，当我们到达长空栈道的时候，已经排起很长的队伍 了，而且栈道上每次只能三四个人上去。由于时间原因，只能默默的离开去了西峰。达到西峰后，就从西峰下去坐了索道下山。西峰这里的索道是有始以来坐过最长最刺激的一次索道，我们坐在缆车里整个华山美景都映入了我们眼球，再看着下面的深渊尖叫着，呐喊着、欢笑着……\n\n从最初的挺轻松自在到最后的筋疲力尽，华山之行算是结束了。随着索道来到了山脚下，坐上了到游客中心的客车。上车后我很快就睡着了，待我一觉醒来，已经快到终点了，后来听他们说从山脚下到游客中心这段路程非常弯曲，他们睡着后头被甩得嗑嗑撞撞，由于我是跟他们是分开坐的，全然不知自己睡着后的状态，反正是睡得特别香。在游客中心下车后，又紧接着坐了到华山火车站的客车，到达华山火车站后，找了家既可以吃饭又可以住宿的店，点好菜后再订了钟点房，吃饱后就开始睡觉，睡等晚上7点多的火车，此时此刻能拥有一张舒适的床，真是太棒了。我们休息到五点多，起床收拾整理，六点下楼去吃晚饭，正吃着晚饭的时候，外面开始刮大风，电闪雷鸣，天空越来越黑，看这阵式是有一场强烈的暴风雨来袭。为了不淋雨，只能加速解决这顿晚餐了。吃完饭，一路跑到火车站，刚好到检票处，大颗大颗的雨滴开始打落在地上，真是幸运。同时也挺感慨这几天的行程一切都是那么的庆幸、顺利，一切都是刚刚好。\n\n原来不幸的还在后面，也即将来临  ——待续\"人在囧途之火车站\"\n\n\n\n![](http://r.photo.store.qq.com/psb?/V105GT1029YVtn/WcJgKYy0tspShBDSj*guQc57WA9rwZWw*ceS0zVZRcE!/o/dGoAAAAAAAAA&ek=1&kp=1&pt=0&bo=gALAA.gD3AUFAFA!&su=118843761&tm=1482584400&sce=0-12-12&rf=2-9)                                                                                                       ","source":"_posts/每一段旅途都有他的意义[二].md","raw":"---\ntitle: '每一段旅途都有他的意义[二]'\ndate: 2015-08-28 23:29:10\ncategories: 生活\ntags: 旅途 \n---\n \n西安几个主景(还差个大雁塔没时间去)游完后，下一站是华山。8月22日下午16:06我们乘坐的K2046次列车，在火车上还偶遇一陕西帅哥，具体是哪个市的忘记了，他的位置在我旁边，在车上他、我、传姐我们三个人一直聊到下车，我们都是在华山站下车，然后各自离去，<!--more-->之后我们去买了些今天晚上和明天早上在山上需要的食物和水。紧接着坐车到山脚下，然后吃晚饭，吃完晚饭是七点多，就一直在山脚下玩到了九点半，然后各自背上一个双肩包开始夜爬华山。\n\n夜爬华山，曾经从未想过的一个念头，人生本就是这样的，总要经历一些突如其来的事。一切都在按规划之中，也就没有挑战性，没有生活乐趣及意义了。\n\n目标已定，接下来要做的就是咬紧牙关，爬到华山最高峰。\n\n最初的那一小时，路不陡也更谈不上险了，走得挺轻松自在的，看着远处山上那弯弯曲曲且越来越高的点点光芒，心里总盼着可以快点到阶梯路段。在山下可能走了两个小时才终于到达了阶梯路段，到了阶梯路段的起点后，一路上去基本上全是台阶，两边是铁链子，有些路段窄得只容得下一个人；有些路段是笔直的九十度；有些路段两边是悬崖峭壁、万丈深渊。但由于是晚上，即使是万丈深渊我们也只看到黑漆漆的一片，可晚上我们又需更加小心，不然一不留神就不知道掉到哪个崖缝去了。\n\n从山脚到峰顶的过程中，刚开始是凭借自己的体力徒步登山，到后面是拉着铁链在爬山，再后面拉铁链都爬不动了，直接双手撑地上爬着走，当体力不支的时候能清楚的听到自己的喘气声。一路上我们走走停停，不断的歇息，同时相互鼓励、帮助、照看、提醒。可见我们这团队不管是在工作中，还是生活上，都能做到团结一致、携手共济，我也很庆幸在我的人生中能与他们相识。           因为背了背包的原因吧，背部总是早早就被汗水浸湿，每一次停下歇息都能感受到背部的冰凉，不过山上风大，休息一会儿就又干了，总之是反反复复的湿了又干，干了又湿。当爬到半山腰的时候，已经凌晨过了，一个劲儿的想睡觉，只要一坐下歇息，感觉就能马上睡着。清楚记得在爬完天梯那段路程后，在王母宫那里歇息了好一会儿，那里有一块特大的石板，当时躺在上面的感觉比平时躺家里的床上都还要舒服，真想在这里睡上一觉，睡醒后再继续爬山。不过不管前面的路程有多艰难、险阻、遥远，只要坚持下去，就一定会达到终点。岂能被一块石板就诱惑了前进的毅力。休息好之后又继续向前。越是往上爬就越想睡觉，但只要咬咬牙，坚持一会儿，我们就离峰顶又近了一步。\n\n五点半左右，天开始亮了，这个时候一心盼着快到金锁关，因为只要到了金锁关，离东峰以及看日出的观日台就近了，六点过终于到了金锁关，这个时候这里可以看到朝霞已经开始显露，同时金锁关也被挤得水泄不通，所有人都挤在了这里等着看日出（后来听说今天所有早早来占个位置，挤在这里等看日出的人都非常失落，日出被云挡住了）。我本来想再向前，爬到东峰的观日台，可是已经寸步难移，根本上不去了。金锁关这里也没好的位置看日出和拍照了，我就挤到了另一条通向西峰的道路，在路边坐着休息等他们。\n\n天一亮，感觉整个人又精神满满、朝气蓬勃。达到山顶后，不管是站在峰顶还是山上任意一个角落，眼前的景色都是十分耀眼。等到他们在金锁关拍完照片，我们相继到了东峰，再去了南峰，当站在最高峰（南峰）那一刻时，眺望着四周美景，昨晚的疲惫似乎都已烟消云散，一切的付出也都值了。在南峰遗憾的是没能去长空栈道体验一翻，当我们到达长空栈道的时候，已经排起很长的队伍 了，而且栈道上每次只能三四个人上去。由于时间原因，只能默默的离开去了西峰。达到西峰后，就从西峰下去坐了索道下山。西峰这里的索道是有始以来坐过最长最刺激的一次索道，我们坐在缆车里整个华山美景都映入了我们眼球，再看着下面的深渊尖叫着，呐喊着、欢笑着……\n\n从最初的挺轻松自在到最后的筋疲力尽，华山之行算是结束了。随着索道来到了山脚下，坐上了到游客中心的客车。上车后我很快就睡着了，待我一觉醒来，已经快到终点了，后来听他们说从山脚下到游客中心这段路程非常弯曲，他们睡着后头被甩得嗑嗑撞撞，由于我是跟他们是分开坐的，全然不知自己睡着后的状态，反正是睡得特别香。在游客中心下车后，又紧接着坐了到华山火车站的客车，到达华山火车站后，找了家既可以吃饭又可以住宿的店，点好菜后再订了钟点房，吃饱后就开始睡觉，睡等晚上7点多的火车，此时此刻能拥有一张舒适的床，真是太棒了。我们休息到五点多，起床收拾整理，六点下楼去吃晚饭，正吃着晚饭的时候，外面开始刮大风，电闪雷鸣，天空越来越黑，看这阵式是有一场强烈的暴风雨来袭。为了不淋雨，只能加速解决这顿晚餐了。吃完饭，一路跑到火车站，刚好到检票处，大颗大颗的雨滴开始打落在地上，真是幸运。同时也挺感慨这几天的行程一切都是那么的庆幸、顺利，一切都是刚刚好。\n\n原来不幸的还在后面，也即将来临  ——待续\"人在囧途之火车站\"\n\n\n\n![](http://r.photo.store.qq.com/psb?/V105GT1029YVtn/WcJgKYy0tspShBDSj*guQc57WA9rwZWw*ceS0zVZRcE!/o/dGoAAAAAAAAA&ek=1&kp=1&pt=0&bo=gALAA.gD3AUFAFA!&su=118843761&tm=1482584400&sce=0-12-12&rf=2-9)                                                                                                       ","slug":"每一段旅途都有他的意义[二]","published":1,"updated":"2016-12-29T05:01:27.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn99003z24uu7lid3tyb","content":"<p>西安几个主景(还差个大雁塔没时间去)游完后，下一站是华山。8月22日下午16:06我们乘坐的K2046次列车，在火车上还偶遇一陕西帅哥，具体是哪个市的忘记了，他的位置在我旁边，在车上他、我、传姐我们三个人一直聊到下车，我们都是在华山站下车，然后各自离去，<a id=\"more\"></a>之后我们去买了些今天晚上和明天早上在山上需要的食物和水。紧接着坐车到山脚下，然后吃晚饭，吃完晚饭是七点多，就一直在山脚下玩到了九点半，然后各自背上一个双肩包开始夜爬华山。</p>\n<p>夜爬华山，曾经从未想过的一个念头，人生本就是这样的，总要经历一些突如其来的事。一切都在按规划之中，也就没有挑战性，没有生活乐趣及意义了。</p>\n<p>目标已定，接下来要做的就是咬紧牙关，爬到华山最高峰。</p>\n<p>最初的那一小时，路不陡也更谈不上险了，走得挺轻松自在的，看着远处山上那弯弯曲曲且越来越高的点点光芒，心里总盼着可以快点到阶梯路段。在山下可能走了两个小时才终于到达了阶梯路段，到了阶梯路段的起点后，一路上去基本上全是台阶，两边是铁链子，有些路段窄得只容得下一个人；有些路段是笔直的九十度；有些路段两边是悬崖峭壁、万丈深渊。但由于是晚上，即使是万丈深渊我们也只看到黑漆漆的一片，可晚上我们又需更加小心，不然一不留神就不知道掉到哪个崖缝去了。</p>\n<p>从山脚到峰顶的过程中，刚开始是凭借自己的体力徒步登山，到后面是拉着铁链在爬山，再后面拉铁链都爬不动了，直接双手撑地上爬着走，当体力不支的时候能清楚的听到自己的喘气声。一路上我们走走停停，不断的歇息，同时相互鼓励、帮助、照看、提醒。可见我们这团队不管是在工作中，还是生活上，都能做到团结一致、携手共济，我也很庆幸在我的人生中能与他们相识。           因为背了背包的原因吧，背部总是早早就被汗水浸湿，每一次停下歇息都能感受到背部的冰凉，不过山上风大，休息一会儿就又干了，总之是反反复复的湿了又干，干了又湿。当爬到半山腰的时候，已经凌晨过了，一个劲儿的想睡觉，只要一坐下歇息，感觉就能马上睡着。清楚记得在爬完天梯那段路程后，在王母宫那里歇息了好一会儿，那里有一块特大的石板，当时躺在上面的感觉比平时躺家里的床上都还要舒服，真想在这里睡上一觉，睡醒后再继续爬山。不过不管前面的路程有多艰难、险阻、遥远，只要坚持下去，就一定会达到终点。岂能被一块石板就诱惑了前进的毅力。休息好之后又继续向前。越是往上爬就越想睡觉，但只要咬咬牙，坚持一会儿，我们就离峰顶又近了一步。</p>\n<p>五点半左右，天开始亮了，这个时候一心盼着快到金锁关，因为只要到了金锁关，离东峰以及看日出的观日台就近了，六点过终于到了金锁关，这个时候这里可以看到朝霞已经开始显露，同时金锁关也被挤得水泄不通，所有人都挤在了这里等着看日出（后来听说今天所有早早来占个位置，挤在这里等看日出的人都非常失落，日出被云挡住了）。我本来想再向前，爬到东峰的观日台，可是已经寸步难移，根本上不去了。金锁关这里也没好的位置看日出和拍照了，我就挤到了另一条通向西峰的道路，在路边坐着休息等他们。</p>\n<p>天一亮，感觉整个人又精神满满、朝气蓬勃。达到山顶后，不管是站在峰顶还是山上任意一个角落，眼前的景色都是十分耀眼。等到他们在金锁关拍完照片，我们相继到了东峰，再去了南峰，当站在最高峰（南峰）那一刻时，眺望着四周美景，昨晚的疲惫似乎都已烟消云散，一切的付出也都值了。在南峰遗憾的是没能去长空栈道体验一翻，当我们到达长空栈道的时候，已经排起很长的队伍 了，而且栈道上每次只能三四个人上去。由于时间原因，只能默默的离开去了西峰。达到西峰后，就从西峰下去坐了索道下山。西峰这里的索道是有始以来坐过最长最刺激的一次索道，我们坐在缆车里整个华山美景都映入了我们眼球，再看着下面的深渊尖叫着，呐喊着、欢笑着……</p>\n<p>从最初的挺轻松自在到最后的筋疲力尽，华山之行算是结束了。随着索道来到了山脚下，坐上了到游客中心的客车。上车后我很快就睡着了，待我一觉醒来，已经快到终点了，后来听他们说从山脚下到游客中心这段路程非常弯曲，他们睡着后头被甩得嗑嗑撞撞，由于我是跟他们是分开坐的，全然不知自己睡着后的状态，反正是睡得特别香。在游客中心下车后，又紧接着坐了到华山火车站的客车，到达华山火车站后，找了家既可以吃饭又可以住宿的店，点好菜后再订了钟点房，吃饱后就开始睡觉，睡等晚上7点多的火车，此时此刻能拥有一张舒适的床，真是太棒了。我们休息到五点多，起床收拾整理，六点下楼去吃晚饭，正吃着晚饭的时候，外面开始刮大风，电闪雷鸣，天空越来越黑，看这阵式是有一场强烈的暴风雨来袭。为了不淋雨，只能加速解决这顿晚餐了。吃完饭，一路跑到火车站，刚好到检票处，大颗大颗的雨滴开始打落在地上，真是幸运。同时也挺感慨这几天的行程一切都是那么的庆幸、顺利，一切都是刚刚好。</p>\n<p>原来不幸的还在后面，也即将来临  ——待续”人在囧途之火车站”</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V105GT1029YVtn/WcJgKYy0tspShBDSj*guQc57WA9rwZWw*ceS0zVZRcE!/o/dGoAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gALAA.gD3AUFAFA!&amp;su=118843761&amp;tm=1482584400&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\">                                                                                                       </p>\n","excerpt":"<p>西安几个主景(还差个大雁塔没时间去)游完后，下一站是华山。8月22日下午16:06我们乘坐的K2046次列车，在火车上还偶遇一陕西帅哥，具体是哪个市的忘记了，他的位置在我旁边，在车上他、我、传姐我们三个人一直聊到下车，我们都是在华山站下车，然后各自离去，","more":"之后我们去买了些今天晚上和明天早上在山上需要的食物和水。紧接着坐车到山脚下，然后吃晚饭，吃完晚饭是七点多，就一直在山脚下玩到了九点半，然后各自背上一个双肩包开始夜爬华山。</p>\n<p>夜爬华山，曾经从未想过的一个念头，人生本就是这样的，总要经历一些突如其来的事。一切都在按规划之中，也就没有挑战性，没有生活乐趣及意义了。</p>\n<p>目标已定，接下来要做的就是咬紧牙关，爬到华山最高峰。</p>\n<p>最初的那一小时，路不陡也更谈不上险了，走得挺轻松自在的，看着远处山上那弯弯曲曲且越来越高的点点光芒，心里总盼着可以快点到阶梯路段。在山下可能走了两个小时才终于到达了阶梯路段，到了阶梯路段的起点后，一路上去基本上全是台阶，两边是铁链子，有些路段窄得只容得下一个人；有些路段是笔直的九十度；有些路段两边是悬崖峭壁、万丈深渊。但由于是晚上，即使是万丈深渊我们也只看到黑漆漆的一片，可晚上我们又需更加小心，不然一不留神就不知道掉到哪个崖缝去了。</p>\n<p>从山脚到峰顶的过程中，刚开始是凭借自己的体力徒步登山，到后面是拉着铁链在爬山，再后面拉铁链都爬不动了，直接双手撑地上爬着走，当体力不支的时候能清楚的听到自己的喘气声。一路上我们走走停停，不断的歇息，同时相互鼓励、帮助、照看、提醒。可见我们这团队不管是在工作中，还是生活上，都能做到团结一致、携手共济，我也很庆幸在我的人生中能与他们相识。           因为背了背包的原因吧，背部总是早早就被汗水浸湿，每一次停下歇息都能感受到背部的冰凉，不过山上风大，休息一会儿就又干了，总之是反反复复的湿了又干，干了又湿。当爬到半山腰的时候，已经凌晨过了，一个劲儿的想睡觉，只要一坐下歇息，感觉就能马上睡着。清楚记得在爬完天梯那段路程后，在王母宫那里歇息了好一会儿，那里有一块特大的石板，当时躺在上面的感觉比平时躺家里的床上都还要舒服，真想在这里睡上一觉，睡醒后再继续爬山。不过不管前面的路程有多艰难、险阻、遥远，只要坚持下去，就一定会达到终点。岂能被一块石板就诱惑了前进的毅力。休息好之后又继续向前。越是往上爬就越想睡觉，但只要咬咬牙，坚持一会儿，我们就离峰顶又近了一步。</p>\n<p>五点半左右，天开始亮了，这个时候一心盼着快到金锁关，因为只要到了金锁关，离东峰以及看日出的观日台就近了，六点过终于到了金锁关，这个时候这里可以看到朝霞已经开始显露，同时金锁关也被挤得水泄不通，所有人都挤在了这里等着看日出（后来听说今天所有早早来占个位置，挤在这里等看日出的人都非常失落，日出被云挡住了）。我本来想再向前，爬到东峰的观日台，可是已经寸步难移，根本上不去了。金锁关这里也没好的位置看日出和拍照了，我就挤到了另一条通向西峰的道路，在路边坐着休息等他们。</p>\n<p>天一亮，感觉整个人又精神满满、朝气蓬勃。达到山顶后，不管是站在峰顶还是山上任意一个角落，眼前的景色都是十分耀眼。等到他们在金锁关拍完照片，我们相继到了东峰，再去了南峰，当站在最高峰（南峰）那一刻时，眺望着四周美景，昨晚的疲惫似乎都已烟消云散，一切的付出也都值了。在南峰遗憾的是没能去长空栈道体验一翻，当我们到达长空栈道的时候，已经排起很长的队伍 了，而且栈道上每次只能三四个人上去。由于时间原因，只能默默的离开去了西峰。达到西峰后，就从西峰下去坐了索道下山。西峰这里的索道是有始以来坐过最长最刺激的一次索道，我们坐在缆车里整个华山美景都映入了我们眼球，再看着下面的深渊尖叫着，呐喊着、欢笑着……</p>\n<p>从最初的挺轻松自在到最后的筋疲力尽，华山之行算是结束了。随着索道来到了山脚下，坐上了到游客中心的客车。上车后我很快就睡着了，待我一觉醒来，已经快到终点了，后来听他们说从山脚下到游客中心这段路程非常弯曲，他们睡着后头被甩得嗑嗑撞撞，由于我是跟他们是分开坐的，全然不知自己睡着后的状态，反正是睡得特别香。在游客中心下车后，又紧接着坐了到华山火车站的客车，到达华山火车站后，找了家既可以吃饭又可以住宿的店，点好菜后再订了钟点房，吃饱后就开始睡觉，睡等晚上7点多的火车，此时此刻能拥有一张舒适的床，真是太棒了。我们休息到五点多，起床收拾整理，六点下楼去吃晚饭，正吃着晚饭的时候，外面开始刮大风，电闪雷鸣，天空越来越黑，看这阵式是有一场强烈的暴风雨来袭。为了不淋雨，只能加速解决这顿晚餐了。吃完饭，一路跑到火车站，刚好到检票处，大颗大颗的雨滴开始打落在地上，真是幸运。同时也挺感慨这几天的行程一切都是那么的庆幸、顺利，一切都是刚刚好。</p>\n<p>原来不幸的还在后面，也即将来临  ——待续”人在囧途之火车站”</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V105GT1029YVtn/WcJgKYy0tspShBDSj*guQc57WA9rwZWw*ceS0zVZRcE!/o/dGoAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gALAA.gD3AUFAFA!&amp;su=118843761&amp;tm=1482584400&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\">                                                                                                       </p>"},{"title":"变量的解构赋值","date":"2017-01-05T13:50:00.000Z","toc":true,"_content":"#### 数组的解构赋值 \n##### 基本用法 \nES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n<!--more-->\n以前，为变量赋值，只能直接指定值。\n```javascript\nvar a = 1\nvar b = 2\nvar c = 3\n```\nES6语法可以像下面这样赋值\n```javascript\nvar [a, b, c] = [1, 2, 3]\n```\n这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a']\nx // \"a\"\ny // undefined\nz // []\n```\n如果解构不成功，变量的值就等于undefined。\n```javascript\nvar [foo] = []\nvar [bar, foo] = [1]\n```\n以上两种情况都属于解构不成功，foo的值都会等于undefined。\n##### 不存在变量提升 \n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n#####  暂时性死区 \n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n```javascript\ntypeof x; // ReferenceError\nlet x;\n```\n以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof undeclared_variable // \"undefined\"\n```\nundeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n```javascript\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n```javascript\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n```\n解构赋值不仅适用于var命令，也适用于let和const命令。\nvar [v1, v2, ..., vN ] = array\nlet [v1, v2, ..., vN ] = array\nconst [v1, v2, ..., vN ] = array\n\n##### 默认值 \n解构赋值允许指定默认值\n\n```javascript\nvar [foo = true] = [];\nfoo // true\n\n[x, y = 'b'] = ['a']; // x='a', y='b'\n[x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n```\nES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。\n\n```javascript\nvar [x = 1] = [undefined];\nx // 1\n\nvar [x = 1] = [null];\nx // null\n```\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n```\n上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。\n```javascript\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n```javascript\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError\n```\n上面最后一个表达式之所以会报错，是因为x用到默认值y时，y还没有声明。\n\n#### 对象的解构赋值 \n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nvar { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nvar { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nvar { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n```\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world\n```\n这实际上说明，对象的解构赋值是下面形式的简写\n\n```javascript\nvar { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n```\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。\n\n注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。\n\n```javascript\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\nlet baz;\nlet {bar: baz} = {bar: 1}; // SyntaxError: Duplicate declaration \"baz\"\n```\n\n上面代码中，解构赋值的变量都会重新声明，所以报错了。不过，因为var命令允许重新声明，所以这个错误只会在使用let和const命令时出现。如果没有第二个let命令，上面的代码就不会报错。\n\n```javascript\nlet foo;\n({foo} = {foo: 1}); // 成功\n\nlet baz;\n({bar: baz} = {bar: 1}); // 成功\n```\n\n上面代码中，let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。\n\n和数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nvar obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nvar { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时p是模式，不是变量，因此不会被赋值。\n```javascript\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n```\n\n上面代码中，只有line是变量，loc和start都是模式，不会被赋值。\n\n下面是嵌套赋值的例子。\n```javascript\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x:y = 3} = {};\ny // 3\n\nvar {x:y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于undefined。\n```javascript\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n```\n以上如果x属性等于null，就不严格相等于undefined，导致默认值不会生效。\n\n如果解构失败，变量的值等于undefined。\n\n```javascript\nvar {foo} = {bar: 'baz'};\nfoo // undefined\n```\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nvar {foo: {bar}} = {baz: 'baz'};\n```\n上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。\n\n```javascript\nvar _tmp = {baz: 'baz'};\n_tmp.foo.bar // 报错\n```\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nvar x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n上面代码的写法会报错，因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\n({x} = {x: 1});\n```\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许，等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n```javascript\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n```\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math;\n```\n上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nvar arr = [1, 2, 3];\nvar {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”，参见《对象的扩展》一章。\n\n#### 字符串的解构赋值 \n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet {length : len} = 'hello';\nlen // 5\n```\n\n#### 数值和布尔值的解构赋值 \n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n```\n解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n```\n#### #### 数值和布尔值的解构赋值 \n\n```javascript\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n```\n\n上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。\n\n下面是另一个例子。\n```javascript\n[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n```\n函数参数的解构也可以使用默认值。\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n```\n\n上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\n\nundefined就会触发函数参数的默认值。\n\n```javascript\n[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n```\n\n#### 解构赋值可以方便地将一组参数与变量名对应起来。\n.....\n\n#### 用途\n\n##### （1）交换变量的值\n```javascript\n[x, y] = [y, x]\n```\n\n##### （2）从函数返回多个值\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nvar [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nvar { foo, bar } = example();\n```\n\n##### （3）函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n##### （4）提取JSON数据\n解构赋值对提取JSON对象中的数据，尤其有用。\n\n```javascript\nvar jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n\n```\n##### （5）函数参数的默认值\n```javascript\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n\n##### （6）遍历Map结构\n\n任何部署了Iterator接口的对象，都可以用for...of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n```javascript\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n##### （7）输入模块的指定方法\n\n加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");","source":"_posts/变量的解构赋值.md","raw":"\ntitle: 变量的解构赋值\ndate: 2017-01-05 21:50:00\ncategories: \n  - 技术\n  - ES6\ntags: 解构赋值 \ntoc: true\n---\n#### 数组的解构赋值 \n##### 基本用法 \nES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n<!--more-->\n以前，为变量赋值，只能直接指定值。\n```javascript\nvar a = 1\nvar b = 2\nvar c = 3\n```\nES6语法可以像下面这样赋值\n```javascript\nvar [a, b, c] = [1, 2, 3]\n```\n这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a']\nx // \"a\"\ny // undefined\nz // []\n```\n如果解构不成功，变量的值就等于undefined。\n```javascript\nvar [foo] = []\nvar [bar, foo] = [1]\n```\n以上两种情况都属于解构不成功，foo的值都会等于undefined。\n##### 不存在变量提升 \n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n#####  暂时性死区 \n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n```javascript\ntypeof x; // ReferenceError\nlet x;\n```\n以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof undeclared_variable // \"undefined\"\n```\nundeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n```javascript\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n```javascript\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n```\n解构赋值不仅适用于var命令，也适用于let和const命令。\nvar [v1, v2, ..., vN ] = array\nlet [v1, v2, ..., vN ] = array\nconst [v1, v2, ..., vN ] = array\n\n##### 默认值 \n解构赋值允许指定默认值\n\n```javascript\nvar [foo = true] = [];\nfoo // true\n\n[x, y = 'b'] = ['a']; // x='a', y='b'\n[x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n```\nES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。\n\n```javascript\nvar [x = 1] = [undefined];\nx // 1\n\nvar [x = 1] = [null];\nx // null\n```\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n```\n上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。\n```javascript\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n```javascript\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError\n```\n上面最后一个表达式之所以会报错，是因为x用到默认值y时，y还没有声明。\n\n#### 对象的解构赋值 \n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nvar { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nvar { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nvar { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n```\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world\n```\n这实际上说明，对象的解构赋值是下面形式的简写\n\n```javascript\nvar { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n```\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。\n\n注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。\n\n```javascript\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\nlet baz;\nlet {bar: baz} = {bar: 1}; // SyntaxError: Duplicate declaration \"baz\"\n```\n\n上面代码中，解构赋值的变量都会重新声明，所以报错了。不过，因为var命令允许重新声明，所以这个错误只会在使用let和const命令时出现。如果没有第二个let命令，上面的代码就不会报错。\n\n```javascript\nlet foo;\n({foo} = {foo: 1}); // 成功\n\nlet baz;\n({bar: baz} = {bar: 1}); // 成功\n```\n\n上面代码中，let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。\n\n和数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nvar obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nvar { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时p是模式，不是变量，因此不会被赋值。\n```javascript\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n```\n\n上面代码中，只有line是变量，loc和start都是模式，不会被赋值。\n\n下面是嵌套赋值的例子。\n```javascript\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x:y = 3} = {};\ny // 3\n\nvar {x:y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于undefined。\n```javascript\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n```\n以上如果x属性等于null，就不严格相等于undefined，导致默认值不会生效。\n\n如果解构失败，变量的值等于undefined。\n\n```javascript\nvar {foo} = {bar: 'baz'};\nfoo // undefined\n```\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nvar {foo: {bar}} = {baz: 'baz'};\n```\n上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。\n\n```javascript\nvar _tmp = {baz: 'baz'};\n_tmp.foo.bar // 报错\n```\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nvar x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n上面代码的写法会报错，因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\n({x} = {x: 1});\n```\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许，等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n```javascript\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n```\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math;\n```\n上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nvar arr = [1, 2, 3];\nvar {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”，参见《对象的扩展》一章。\n\n#### 字符串的解构赋值 \n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet {length : len} = 'hello';\nlen // 5\n```\n\n#### 数值和布尔值的解构赋值 \n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n```\n解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n```\n#### #### 数值和布尔值的解构赋值 \n\n```javascript\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n```\n\n上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。\n\n下面是另一个例子。\n```javascript\n[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n```\n函数参数的解构也可以使用默认值。\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n```\n\n上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\n\nundefined就会触发函数参数的默认值。\n\n```javascript\n[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n```\n\n#### 解构赋值可以方便地将一组参数与变量名对应起来。\n.....\n\n#### 用途\n\n##### （1）交换变量的值\n```javascript\n[x, y] = [y, x]\n```\n\n##### （2）从函数返回多个值\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nvar [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nvar { foo, bar } = example();\n```\n\n##### （3）函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n##### （4）提取JSON数据\n解构赋值对提取JSON对象中的数据，尤其有用。\n\n```javascript\nvar jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n\n```\n##### （5）函数参数的默认值\n```javascript\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n\n##### （6）遍历Map结构\n\n任何部署了Iterator接口的对象，都可以用for...of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n```javascript\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n##### （7）输入模块的指定方法\n\n加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");","slug":"变量的解构赋值","published":1,"updated":"2017-01-09T02:05:18.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9d004224uu8qicgz4n","content":"<h4 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h4><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br><a id=\"more\"></a><br>以前，为变量赋值，只能直接指定值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>ES6语法可以像下面这样赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure></p>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。<br>下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>]</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [foo] = []</div><div class=\"line\"><span class=\"keyword\">var</span> [bar, foo] = [<span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<p>以上两种情况都属于解构不成功，foo的值都会等于undefined。</p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</div><div class=\"line\">a <span class=\"comment\">// 1</span></div><div class=\"line\">b <span class=\"comment\">// 2</span></div><div class=\"line\">d <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</div></pre></td></tr></table></figure>\n<p>以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。<br>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// TDZ开始</span></div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">  tmp = <span class=\"number\">123</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure></p>\n<p>以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。<br>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure></p>\n<p>undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些“死区”比较隐蔽，不太容易发现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p>调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = <span class=\"number\">2</span>, y = x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// [2, 2]</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值不仅适用于var命令，也适用于let和const命令。<br>var [v1, v2, …, vN ] = array<br>let [v1, v2, …, vN ] = array<br>const [v1, v2, …, vN ] = array</p>\n<h5 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h5><p>解构赋值允许指定默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [foo = <span class=\"literal\">true</span>] = [];</div><div class=\"line\">foo <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>]; <span class=\"comment\">// x='a', y='b'</span></div><div class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x='a', y='b'</span></div></pre></td></tr></table></figure>\n<p>ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</div><div class=\"line\">x <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaa'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>];</div></pre></td></tr></table></figure>\n<p>上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;</div><div class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">  x = f();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  x = [<span class=\"number\">1</span>][<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError</span></div></pre></td></tr></table></figure></p>\n<p>上面最后一个表达式之所以会报错，是因为x用到默认值y时，y还没有声明。</p>\n<h4 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</div><div class=\"line\">f <span class=\"comment\">// 'hello'</span></div><div class=\"line\">l <span class=\"comment\">// 'world</span></div></pre></td></tr></table></figure>\n<p>这实际上说明，对象的解构赋值是下面形式的简写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div></pre></td></tr></table></figure>\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></div></pre></td></tr></table></figure>\n<p>上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</p>\n<p>注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> baz;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">bar</span>: baz&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"baz\"</span></div></pre></td></tr></table></figure>\n<p>上面代码中，解构赋值的变量都会重新声明，所以报错了。不过，因为var命令允许重新声明，所以这个错误只会在使用let和const命令时出现。如果没有第二个let命令，上面的代码就不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> baz;</div><div class=\"line\">(&#123;<span class=\"attr\">bar</span>: baz&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div></pre></td></tr></table></figure>\n<p>上面代码中，let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。</p>\n<p>和数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p</span>: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure>\n<p>注意，这时p是模式，不是变量，因此不会被赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> node = &#123;</div><div class=\"line\">  <span class=\"attr\">loc</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">start</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">line</span>: <span class=\"number\">1</span>,</div><div class=\"line\">      <span class=\"attr\">column</span>: <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">loc</span>: &#123; <span class=\"attr\">start</span>: &#123; line &#125;&#125; &#125; = node;</div><div class=\"line\">line <span class=\"comment\">// 1</span></div><div class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></div><div class=\"line\">start <span class=\"comment\">// error: start is undefined</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，只有line是变量，loc和start都是模式，不会被赋值。</p>\n<p>下面是嵌套赋值的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> arr = [];</div><div class=\"line\"></div><div class=\"line\">(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;);</div><div class=\"line\"></div><div class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></div><div class=\"line\">arr <span class=\"comment\">// [true]</span></div></pre></td></tr></table></figure></p>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">'Something went wrong'</span> &#125; = &#123;&#125;;</div><div class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></div></pre></td></tr></table></figure>\n<p>默认值生效的条件是，对象的属性值严格等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">undefined</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">null</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// null</span></div></pre></td></tr></table></figure></p>\n<p>以上如果x属性等于null，就不严格相等于undefined，导致默认值不会生效。</p>\n<p>如果解构失败，变量的值等于undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;foo&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span>&#125;;</div><div class=\"line\">foo <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">foo</span>: &#123;bar&#125;&#125; = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</div></pre></td></tr></table></figure>\n<p>上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _tmp = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</div><div class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure>\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></div></pre></td></tr></table></figure>\n<p>上面代码的写法会报错，因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确的写法</span></div><div class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</div></pre></td></tr></table></figure>\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许，等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>]);</div><div class=\"line\">(&#123;&#125; = <span class=\"string\">'abc'</span>);</div><div class=\"line\">(&#123;&#125; = []);</div></pre></td></tr></table></figure></p>\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>;</div></pre></td></tr></table></figure>\n<p>上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"number\">0</span> : first, [arr.length - <span class=\"number\">1</span>] : last&#125; = arr;</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">last <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”，参见《对象的扩展》一章。</p>\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div></pre></td></tr></table></figure>\n<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h4 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h4><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</div><div class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</div><div class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// TypeError</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// TypeError</span></div></pre></td></tr></table></figure>\n<h4 id=\"数值和布尔值的解构赋值-1\"><a href=\"#数值和布尔值的解构赋值-1\" class=\"headerlink\" title=\"#### 数值和布尔值的解构赋值\"></a>#### 数值和布尔值的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>\n<p>下面是另一个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b);</div><div class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></div></pre></td></tr></table></figure></p>\n<p>函数参数的解构也可以使用默认值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></div><div class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></div><div class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></div><div class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></div><div class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></div></pre></td></tr></table></figure>\n<p>上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p>undefined就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">'yes'</span></span>) =&gt;</span> x);</div><div class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></div></pre></td></tr></table></figure>\n<h4 id=\"解构赋值可以方便地将一组参数与变量名对应起来。\"><a href=\"#解构赋值可以方便地将一组参数与变量名对应起来。\" class=\"headerlink\" title=\"解构赋值可以方便地将一组参数与变量名对应起来。\"></a>解构赋值可以方便地将一组参数与变量名对应起来。</h4><p>…..</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><h5 id=\"（1）交换变量的值\"><a href=\"#（1）交换变量的值\" class=\"headerlink\" title=\"（1）交换变量的值\"></a>（1）交换变量的值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x, y] = [y, x]</div></pre></td></tr></table></figure>\n<h5 id=\"（2）从函数返回多个值\"><a href=\"#（2）从函数返回多个值\" class=\"headerlink\" title=\"（2）从函数返回多个值\"></a>（2）从函数返回多个值</h5><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回一个数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = example();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回一个对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>\n<h5 id=\"（3）函数参数的定义\"><a href=\"#（3）函数参数的定义\" class=\"headerlink\" title=\"（3）函数参数的定义\"></a>（3）函数参数的定义</h5><p>解构赋值可以方便地将一组参数与变量名对应起来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"（4）提取JSON数据\"><a href=\"#（4）提取JSON数据\" class=\"headerlink\" title=\"（4）提取JSON数据\"></a>（4）提取JSON数据</h5><p>解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jsonData = &#123;</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</div><div class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">\"OK\"</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</div><div class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></div></pre></td></tr></table></figure>\n<h5 id=\"（5）函数参数的默认值\"><a href=\"#（5）函数参数的默认值\" class=\"headerlink\" title=\"（5）函数参数的默认值\"></a>（5）函数参数的默认值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></div><div class=\"line\">  async = true,</div><div class=\"line\">  beforeSend = function () &#123;&#125;,</div><div class=\"line\">  cache = <span class=\"literal\">true</span>,</div><div class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</div><div class=\"line\">  global = <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"comment\">// ... more config</span></div><div class=\"line\">&#125;) &#123;</div><div class=\"line\">  <span class=\"comment\">// ... do stuff</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"（6）遍历Map结构\"><a href=\"#（6）遍历Map结构\" class=\"headerlink\" title=\"（6）遍历Map结构\"></a>（6）遍历Map结构</h5><p>任何部署了Iterator接口的对象，都可以用for…of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</div><div class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// first is hello</span></div><div class=\"line\"><span class=\"comment\">// second is world</span></div></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取键名</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取键值</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（7）输入模块的指定方法\"><a href=\"#（7）输入模块的指定方法\" class=\"headerlink\" title=\"（7）输入模块的指定方法\"></a>（7）输入模块的指定方法</h5><p>加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。<br>const { SourceMapConsumer, SourceNode } = require(“source-map”);</p>\n","excerpt":"<h4 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h4><h5 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h5><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br>","more":"<br>以前，为变量赋值，只能直接指定值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>ES6语法可以像下面这样赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure></p>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。<br>下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>]</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [foo] = []</div><div class=\"line\"><span class=\"keyword\">var</span> [bar, foo] = [<span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<p>以上两种情况都属于解构不成功，foo的值都会等于undefined。</p>\n<h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</div><div class=\"line\">a <span class=\"comment\">// 1</span></div><div class=\"line\">b <span class=\"comment\">// 2</span></div><div class=\"line\">d <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<h5 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h5><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</div></pre></td></tr></table></figure>\n<p>以上存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。<br>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// TDZ开始</span></div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">  tmp = <span class=\"number\">123</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure></p>\n<p>以上变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。<br>作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure></p>\n<p>undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>\n<p>有些“死区”比较隐蔽，不太容易发现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p>调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = <span class=\"number\">2</span>, y = x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// [2, 2]</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值不仅适用于var命令，也适用于let和const命令。<br>var [v1, v2, …, vN ] = array<br>let [v1, v2, …, vN ] = array<br>const [v1, v2, …, vN ] = array</p>\n<h5 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h5><p>解构赋值允许指定默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [foo = <span class=\"literal\">true</span>] = [];</div><div class=\"line\">foo <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>]; <span class=\"comment\">// x='a', y='b'</span></div><div class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x='a', y='b'</span></div></pre></td></tr></table></figure>\n<p>ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</div><div class=\"line\">x <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaa'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>];</div></pre></td></tr></table></figure>\n<p>上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;</div><div class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">  x = f();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  x = [<span class=\"number\">1</span>][<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError</span></div></pre></td></tr></table></figure></p>\n<p>上面最后一个表达式之所以会报错，是因为x用到默认值y时，y还没有声明。</p>\n<h4 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</div><div class=\"line\">f <span class=\"comment\">// 'hello'</span></div><div class=\"line\">l <span class=\"comment\">// 'world</span></div></pre></td></tr></table></figure>\n<p>这实际上说明，对象的解构赋值是下面形式的简写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div></pre></td></tr></table></figure>\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></div></pre></td></tr></table></figure>\n<p>上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</p>\n<p>注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> baz;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">bar</span>: baz&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"baz\"</span></div></pre></td></tr></table></figure>\n<p>上面代码中，解构赋值的变量都会重新声明，所以报错了。不过，因为var命令允许重新声明，所以这个错误只会在使用let和const命令时出现。如果没有第二个let命令，上面的代码就不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> baz;</div><div class=\"line\">(&#123;<span class=\"attr\">bar</span>: baz&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div></pre></td></tr></table></figure>\n<p>上面代码中，let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。</p>\n<p>和数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p</span>: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure>\n<p>注意，这时p是模式，不是变量，因此不会被赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> node = &#123;</div><div class=\"line\">  <span class=\"attr\">loc</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">start</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">line</span>: <span class=\"number\">1</span>,</div><div class=\"line\">      <span class=\"attr\">column</span>: <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">loc</span>: &#123; <span class=\"attr\">start</span>: &#123; line &#125;&#125; &#125; = node;</div><div class=\"line\">line <span class=\"comment\">// 1</span></div><div class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></div><div class=\"line\">start <span class=\"comment\">// error: start is undefined</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，只有line是变量，loc和start都是模式，不会被赋值。</p>\n<p>下面是嵌套赋值的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> arr = [];</div><div class=\"line\"></div><div class=\"line\">(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;);</div><div class=\"line\"></div><div class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></div><div class=\"line\">arr <span class=\"comment\">// [true]</span></div></pre></td></tr></table></figure></p>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">'Something went wrong'</span> &#125; = &#123;&#125;;</div><div class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></div></pre></td></tr></table></figure>\n<p>默认值生效的条件是，对象的属性值严格等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">undefined</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">null</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// null</span></div></pre></td></tr></table></figure></p>\n<p>以上如果x属性等于null，就不严格相等于undefined，导致默认值不会生效。</p>\n<p>如果解构失败，变量的值等于undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;foo&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span>&#125;;</div><div class=\"line\">foo <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">foo</span>: &#123;bar&#125;&#125; = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</div></pre></td></tr></table></figure>\n<p>上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _tmp = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</div><div class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure>\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></div></pre></td></tr></table></figure>\n<p>上面代码的写法会报错，因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确的写法</span></div><div class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</div></pre></td></tr></table></figure>\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许，等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>]);</div><div class=\"line\">(&#123;&#125; = <span class=\"string\">'abc'</span>);</div><div class=\"line\">(&#123;&#125; = []);</div></pre></td></tr></table></figure></p>\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>;</div></pre></td></tr></table></figure>\n<p>上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"number\">0</span> : first, [arr.length - <span class=\"number\">1</span>] : last&#125; = arr;</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">last <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”，参见《对象的扩展》一章。</p>\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div></pre></td></tr></table></figure>\n<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h4 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h4><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</div><div class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</div><div class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// TypeError</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// TypeError</span></div></pre></td></tr></table></figure>\n<h4 id=\"数值和布尔值的解构赋值-1\"><a href=\"#数值和布尔值的解构赋值-1\" class=\"headerlink\" title=\"#### 数值和布尔值的解构赋值\"></a>#### 数值和布尔值的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>\n<p>下面是另一个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b);</div><div class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></div></pre></td></tr></table></figure></p>\n<p>函数参数的解构也可以使用默认值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></div><div class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></div><div class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></div><div class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></div><div class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></div><div class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></div></pre></td></tr></table></figure>\n<p>上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p>undefined就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">'yes'</span></span>) =&gt;</span> x);</div><div class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></div></pre></td></tr></table></figure>\n<h4 id=\"解构赋值可以方便地将一组参数与变量名对应起来。\"><a href=\"#解构赋值可以方便地将一组参数与变量名对应起来。\" class=\"headerlink\" title=\"解构赋值可以方便地将一组参数与变量名对应起来。\"></a>解构赋值可以方便地将一组参数与变量名对应起来。</h4><p>…..</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><h5 id=\"（1）交换变量的值\"><a href=\"#（1）交换变量的值\" class=\"headerlink\" title=\"（1）交换变量的值\"></a>（1）交换变量的值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x, y] = [y, x]</div></pre></td></tr></table></figure>\n<h5 id=\"（2）从函数返回多个值\"><a href=\"#（2）从函数返回多个值\" class=\"headerlink\" title=\"（2）从函数返回多个值\"></a>（2）从函数返回多个值</h5><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回一个数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = example();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回一个对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>\n<h5 id=\"（3）函数参数的定义\"><a href=\"#（3）函数参数的定义\" class=\"headerlink\" title=\"（3）函数参数的定义\"></a>（3）函数参数的定义</h5><p>解构赋值可以方便地将一组参数与变量名对应起来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"（4）提取JSON数据\"><a href=\"#（4）提取JSON数据\" class=\"headerlink\" title=\"（4）提取JSON数据\"></a>（4）提取JSON数据</h5><p>解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jsonData = &#123;</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</div><div class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">\"OK\"</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</div><div class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></div></pre></td></tr></table></figure>\n<h5 id=\"（5）函数参数的默认值\"><a href=\"#（5）函数参数的默认值\" class=\"headerlink\" title=\"（5）函数参数的默认值\"></a>（5）函数参数的默认值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</div><div class=\"line\">  async = true,</div><div class=\"line\">  beforeSend = function (</span>) </span>&#123;&#125;,</div><div class=\"line\">  cache = <span class=\"literal\">true</span>,</div><div class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</div><div class=\"line\">  global = <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"comment\">// ... more config</span></div><div class=\"line\">&#125;) &#123;</div><div class=\"line\">  <span class=\"comment\">// ... do stuff</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"（6）遍历Map结构\"><a href=\"#（6）遍历Map结构\" class=\"headerlink\" title=\"（6）遍历Map结构\"></a>（6）遍历Map结构</h5><p>任何部署了Iterator接口的对象，都可以用for…of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</div><div class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// first is hello</span></div><div class=\"line\"><span class=\"comment\">// second is world</span></div></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取键名</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取键值</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"（7）输入模块的指定方法\"><a href=\"#（7）输入模块的指定方法\" class=\"headerlink\" title=\"（7）输入模块的指定方法\"></a>（7）输入模块的指定方法</h5><p>加载模块时，往往需要指定输入那些方法。解构赋值使得输入语句非常清晰。<br>const { SourceMapConsumer, SourceNode } = require(“source-map”);</p>"},{"title":"纯CSS样式美化(滚动条/checkbox)","date":"2016-06-28T02:16:18.000Z","_content":"#### 兼容IE和Chrome浏览器滚动条CSS样式\n<!-- more -->\nIE CSS\n```css\nhtml,body {\nscrollbar-face-color:#FB4446; /*滚动条3D表面（ThreedFace）的颜色*/ \nscrollbar-highlight-color:#fff; /*滚动条3D界面的亮边（ThreedHighlight）颜色*/ \nscrollbar-shadow-color:#eeeeee; /*滚动条3D界面的暗边（ThreedShadow）颜色*/ \nscrollbar-3dlight-color:#eeeeee; /*滚动条亮边框颜色*/ \nscrollbar-arrow-color:#000; /*滚动条方向箭头的颜色 */ \nscrollbar-track-color:#fff; /*滚动条的拖动区域(TrackBar)颜色*/\nscrollbar-darkshadow-color:#fff; /*滚动条暗边框（ThreedDarkShadow）颜色*/ }\n```\nChrome CSS\n```css\n/*---滚动条默认显示样式--*/  \n::-webkit-scrollbar-thumb{  \n   background-color:#FB4446;  \n   height:50px;  \n   outline-offset:-2px;  \n   outline:2px solid #fff;  \n   -webkit-border-radius:4px;  \n   border: 2px solid #fff;  \n}  \n/*---鼠标点击滚动条显示样式--*/  \n::-webkit-scrollbar-thumb:hover{  \n   background-color:#F01360;  \n   height:50px;  \n   -webkit-border-radius:4px;  \n}  \n/*---滚动条大小--*/  \n::-webkit-scrollbar{  \n   width:8px;  \n   height:8px;  \n}  \n/*---滚动框背景样式--*/  \n::-webkit-scrollbar-track-piece{  \n   background-color:#fff;  \n   -webkit-border-radius:0;  \n}\n```\n#### 纯CSS美化checkbox\n\n```css\n.selectBetting{ \n   display: none; \n} \n.selectBetting + label { \n background:$bgf8efce;\n border-radius:50%;\n border:1px solid $borb9aa77;\n width:$v25;\n height:$v25;\n display: inline-block; \n position: relative; \n}  \n .selectBetting:checked + label { \n   background-color: $fontRed; \n   border:2px solid $fontRed;\n} \n.selectBetting:checked + label::after { \n   font-family: \"customfont\";\n   content: '\\e616'; //勾选符号 \n   position: absolute; \n   top: 50px;\n   left: 0px; \n   color: white; \n   width: 100%; \n   text-align: center; \n   font-size: 1.4em; \n   padding: 1px 0 0 0; \n   vertical-align: text-top; \n} \n```\nhtml\n```html\n<input type=\"checkbox\" id=\"checkbox_sel\" class=\"selectBetting\" />\n<label for=\"checkbox_sel\" class=\"\"></label>\n```","source":"_posts/纯CSS样式美化.md","raw":"---\ntitle: 纯CSS样式美化(滚动条/checkbox)\ndate: 2016-06-28 10:16:18\ncategories: \n  - 技术\n  - CSS\ntags: [CSS]\n---\n#### 兼容IE和Chrome浏览器滚动条CSS样式\n<!-- more -->\nIE CSS\n```css\nhtml,body {\nscrollbar-face-color:#FB4446; /*滚动条3D表面（ThreedFace）的颜色*/ \nscrollbar-highlight-color:#fff; /*滚动条3D界面的亮边（ThreedHighlight）颜色*/ \nscrollbar-shadow-color:#eeeeee; /*滚动条3D界面的暗边（ThreedShadow）颜色*/ \nscrollbar-3dlight-color:#eeeeee; /*滚动条亮边框颜色*/ \nscrollbar-arrow-color:#000; /*滚动条方向箭头的颜色 */ \nscrollbar-track-color:#fff; /*滚动条的拖动区域(TrackBar)颜色*/\nscrollbar-darkshadow-color:#fff; /*滚动条暗边框（ThreedDarkShadow）颜色*/ }\n```\nChrome CSS\n```css\n/*---滚动条默认显示样式--*/  \n::-webkit-scrollbar-thumb{  \n   background-color:#FB4446;  \n   height:50px;  \n   outline-offset:-2px;  \n   outline:2px solid #fff;  \n   -webkit-border-radius:4px;  \n   border: 2px solid #fff;  \n}  \n/*---鼠标点击滚动条显示样式--*/  \n::-webkit-scrollbar-thumb:hover{  \n   background-color:#F01360;  \n   height:50px;  \n   -webkit-border-radius:4px;  \n}  \n/*---滚动条大小--*/  \n::-webkit-scrollbar{  \n   width:8px;  \n   height:8px;  \n}  \n/*---滚动框背景样式--*/  \n::-webkit-scrollbar-track-piece{  \n   background-color:#fff;  \n   -webkit-border-radius:0;  \n}\n```\n#### 纯CSS美化checkbox\n\n```css\n.selectBetting{ \n   display: none; \n} \n.selectBetting + label { \n background:$bgf8efce;\n border-radius:50%;\n border:1px solid $borb9aa77;\n width:$v25;\n height:$v25;\n display: inline-block; \n position: relative; \n}  \n .selectBetting:checked + label { \n   background-color: $fontRed; \n   border:2px solid $fontRed;\n} \n.selectBetting:checked + label::after { \n   font-family: \"customfont\";\n   content: '\\e616'; //勾选符号 \n   position: absolute; \n   top: 50px;\n   left: 0px; \n   color: white; \n   width: 100%; \n   text-align: center; \n   font-size: 1.4em; \n   padding: 1px 0 0 0; \n   vertical-align: text-top; \n} \n```\nhtml\n```html\n<input type=\"checkbox\" id=\"checkbox_sel\" class=\"selectBetting\" />\n<label for=\"checkbox_sel\" class=\"\"></label>\n```","slug":"纯CSS样式美化","published":1,"updated":"2017-02-18T12:17:15.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9h004524uunpi88cs7","content":"<h4 id=\"兼容IE和Chrome浏览器滚动条CSS样式\"><a href=\"#兼容IE和Chrome浏览器滚动条CSS样式\" class=\"headerlink\" title=\"兼容IE和Chrome浏览器滚动条CSS样式\"></a>兼容IE和Chrome浏览器滚动条CSS样式</h4><a id=\"more\"></a>\n<p>IE CSS<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">html,body &#123;</div><div class=\"line\">scrollbar-face-color:#FB4446; /*滚动条3D表面（ThreedFace）的颜色*/ </div><div class=\"line\">scrollbar-highlight-color:#fff; /*滚动条3D界面的亮边（ThreedHighlight）颜色*/ </div><div class=\"line\">scrollbar-shadow-color:#eeeeee; /*滚动条3D界面的暗边（ThreedShadow）颜色*/ </div><div class=\"line\">scrollbar-3dlight-color:#eeeeee; /*滚动条亮边框颜色*/ </div><div class=\"line\">scrollbar-arrow-color:#000; /*滚动条方向箭头的颜色 */ </div><div class=\"line\">scrollbar-track-color:#fff; /*滚动条的拖动区域(TrackBar)颜色*/</div><div class=\"line\">scrollbar-darkshadow-color:#fff; /*滚动条暗边框（ThreedDarkShadow）颜色*/ &#125;</div></pre></td></tr></table></figure></p>\n<p>Chrome CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*---滚动条默认显示样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#FB4446</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;  </div><div class=\"line\">   <span class=\"attribute\">outline-offset</span>:-<span class=\"number\">2px</span>;  </div><div class=\"line\">   <span class=\"attribute\">outline</span>:<span class=\"number\">2px</span> solid <span class=\"number\">#fff</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">4px</span>;  </div><div class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#fff</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---鼠标点击滚动条显示样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#F01360</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">4px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---滚动条大小--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"number\">8px</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">8px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---滚动框背景样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track-piece</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#fff</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"纯CSS美化checkbox\"><a href=\"#纯CSS美化checkbox\" class=\"headerlink\" title=\"纯CSS美化checkbox\"></a>纯CSS美化checkbox</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">.selectBetting&#123; </div><div class=\"line\">   display: none; </div><div class=\"line\">&#125; </div><div class=\"line\">.selectBetting + label &#123; </div><div class=\"line\"> background:$bgf8efce;</div><div class=\"line\"> border-radius:50%;</div><div class=\"line\"> border:1px solid $borb9aa77;</div><div class=\"line\"> width:$v25;</div><div class=\"line\"> height:$v25;</div><div class=\"line\"> display: inline-block; </div><div class=\"line\"> position: relative; </div><div class=\"line\">&#125;  </div><div class=\"line\"> .selectBetting:checked + label &#123; </div><div class=\"line\">   background-color: $fontRed; </div><div class=\"line\">   border:2px solid $fontRed;</div><div class=\"line\">&#125; </div><div class=\"line\">.selectBetting:checked + label::after &#123; </div><div class=\"line\">   font-family: \"customfont\";</div><div class=\"line\">   content: '\\e616'; //勾选符号 </div><div class=\"line\">   position: absolute; </div><div class=\"line\">   top: 50px;</div><div class=\"line\">   left: 0px; </div><div class=\"line\">   color: white; </div><div class=\"line\">   width: 100%; </div><div class=\"line\">   text-align: center; </div><div class=\"line\">   font-size: 1.4em; </div><div class=\"line\">   padding: 1px 0 0 0; </div><div class=\"line\">   vertical-align: text-top; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox_sel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selectBetting\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox_sel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h4 id=\"兼容IE和Chrome浏览器滚动条CSS样式\"><a href=\"#兼容IE和Chrome浏览器滚动条CSS样式\" class=\"headerlink\" title=\"兼容IE和Chrome浏览器滚动条CSS样式\"></a>兼容IE和Chrome浏览器滚动条CSS样式</h4>","more":"<p>IE CSS<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">html,body &#123;</div><div class=\"line\">scrollbar-face-color:#FB4446; /*滚动条3D表面（ThreedFace）的颜色*/ </div><div class=\"line\">scrollbar-highlight-color:#fff; /*滚动条3D界面的亮边（ThreedHighlight）颜色*/ </div><div class=\"line\">scrollbar-shadow-color:#eeeeee; /*滚动条3D界面的暗边（ThreedShadow）颜色*/ </div><div class=\"line\">scrollbar-3dlight-color:#eeeeee; /*滚动条亮边框颜色*/ </div><div class=\"line\">scrollbar-arrow-color:#000; /*滚动条方向箭头的颜色 */ </div><div class=\"line\">scrollbar-track-color:#fff; /*滚动条的拖动区域(TrackBar)颜色*/</div><div class=\"line\">scrollbar-darkshadow-color:#fff; /*滚动条暗边框（ThreedDarkShadow）颜色*/ &#125;</div></pre></td></tr></table></figure></p>\n<p>Chrome CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*---滚动条默认显示样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#FB4446</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;  </div><div class=\"line\">   <span class=\"attribute\">outline-offset</span>:-<span class=\"number\">2px</span>;  </div><div class=\"line\">   <span class=\"attribute\">outline</span>:<span class=\"number\">2px</span> solid <span class=\"number\">#fff</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">4px</span>;  </div><div class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#fff</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---鼠标点击滚动条显示样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#F01360</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">4px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---滚动条大小--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"number\">8px</span>;  </div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">8px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/*---滚动框背景样式--*/</span>  </div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track-piece</span>&#123;  </div><div class=\"line\">   <span class=\"attribute\">background-color</span>:<span class=\"number\">#fff</span>;  </div><div class=\"line\">   <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"纯CSS美化checkbox\"><a href=\"#纯CSS美化checkbox\" class=\"headerlink\" title=\"纯CSS美化checkbox\"></a>纯CSS美化checkbox</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">.selectBetting&#123; </div><div class=\"line\">   display: none; </div><div class=\"line\">&#125; </div><div class=\"line\">.selectBetting + label &#123; </div><div class=\"line\"> background:$bgf8efce;</div><div class=\"line\"> border-radius:50%;</div><div class=\"line\"> border:1px solid $borb9aa77;</div><div class=\"line\"> width:$v25;</div><div class=\"line\"> height:$v25;</div><div class=\"line\"> display: inline-block; </div><div class=\"line\"> position: relative; </div><div class=\"line\">&#125;  </div><div class=\"line\"> .selectBetting:checked + label &#123; </div><div class=\"line\">   background-color: $fontRed; </div><div class=\"line\">   border:2px solid $fontRed;</div><div class=\"line\">&#125; </div><div class=\"line\">.selectBetting:checked + label::after &#123; </div><div class=\"line\">   font-family: \"customfont\";</div><div class=\"line\">   content: '\\e616'; //勾选符号 </div><div class=\"line\">   position: absolute; </div><div class=\"line\">   top: 50px;</div><div class=\"line\">   left: 0px; </div><div class=\"line\">   color: white; </div><div class=\"line\">   width: 100%; </div><div class=\"line\">   text-align: center; </div><div class=\"line\">   font-size: 1.4em; </div><div class=\"line\">   padding: 1px 0 0 0; </div><div class=\"line\">   vertical-align: text-top; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox_sel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selectBetting\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox_sel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"面试遇到的问题","date":"2016-08-24T14:13:16.000Z","_content":"\n#### CSS：谈谈栅格布局\nhttp://www.cnblogs.com/dojo-lzz/p/4621627.html\n\n\n#### 跨域处理\nhttp://www.jscss.cc/2016/10/14/cors.html\n\n#### JS 谈谈闭包\n\n#### JS: 谈谈原型链","source":"_posts/面试遇到的问题.md","raw":"---\ntitle: 面试遇到的问题\ndate: 2016-08-24 22:13:16\ncategories: \n  - 生活\ntags: 面试\n---\n\n#### CSS：谈谈栅格布局\nhttp://www.cnblogs.com/dojo-lzz/p/4621627.html\n\n\n#### 跨域处理\nhttp://www.jscss.cc/2016/10/14/cors.html\n\n#### JS 谈谈闭包\n\n#### JS: 谈谈原型链","slug":"面试遇到的问题","published":1,"updated":"2017-01-06T02:17:32.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9l004824uu607qwong","content":"<h4 id=\"CSS：谈谈栅格布局\"><a href=\"#CSS：谈谈栅格布局\" class=\"headerlink\" title=\"CSS：谈谈栅格布局\"></a>CSS：谈谈栅格布局</h4><p><a href=\"http://www.cnblogs.com/dojo-lzz/p/4621627.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dojo-lzz/p/4621627.html</a></p>\n<h4 id=\"跨域处理\"><a href=\"#跨域处理\" class=\"headerlink\" title=\"跨域处理\"></a>跨域处理</h4><p><a href=\"http://www.jscss.cc/2016/10/14/cors.html\" target=\"_blank\" rel=\"external\">http://www.jscss.cc/2016/10/14/cors.html</a></p>\n<h4 id=\"JS-谈谈闭包\"><a href=\"#JS-谈谈闭包\" class=\"headerlink\" title=\"JS 谈谈闭包\"></a>JS 谈谈闭包</h4><h4 id=\"JS-谈谈原型链\"><a href=\"#JS-谈谈原型链\" class=\"headerlink\" title=\"JS: 谈谈原型链\"></a>JS: 谈谈原型链</h4>","excerpt":"","more":"<h4 id=\"CSS：谈谈栅格布局\"><a href=\"#CSS：谈谈栅格布局\" class=\"headerlink\" title=\"CSS：谈谈栅格布局\"></a>CSS：谈谈栅格布局</h4><p><a href=\"http://www.cnblogs.com/dojo-lzz/p/4621627.html\">http://www.cnblogs.com/dojo-lzz/p/4621627.html</a></p>\n<h4 id=\"跨域处理\"><a href=\"#跨域处理\" class=\"headerlink\" title=\"跨域处理\"></a>跨域处理</h4><p><a href=\"http://www.jscss.cc/2016/10/14/cors.html\">http://www.jscss.cc/2016/10/14/cors.html</a></p>\n<h4 id=\"JS-谈谈闭包\"><a href=\"#JS-谈谈闭包\" class=\"headerlink\" title=\"JS 谈谈闭包\"></a>JS 谈谈闭包</h4><h4 id=\"JS-谈谈原型链\"><a href=\"#JS-谈谈原型链\" class=\"headerlink\" title=\"JS: 谈谈原型链\"></a>JS: 谈谈原型链</h4>"},{"title":"项目中D3遇到的那些烦心事","date":"2017-02-23T08:06:11.000Z","toc":null,"_content":"\n### 1. value 值存在0的时候，y轴出现小数据点\n解决方案：\n\n//获取到最大值\nvar max = d3.max(dataset)\n\n//当最大值小于某个值的可能会出现小数点的时候，这里取最大值不能小于10，小于则重新定义标尺及轴线\nif(max<10){\n  max = 10\n  ticks = 5\n}\n<!-- more -->\n//定义y轴标尺\nvar yScale = d3.scale.linear()\n  .domain([0, max])\n  .range([height, 0])\n\n//定义纵轴  \nvar yAxis=d3.svg.axis()\n  .scale(yScale)\n  .orient(\"left\")\n  .ticks(ticks)\n\n//定义比例尺\nvar linear = d3.scale.linear()  \n  .domain([0, max])  \n  .range([0, height])\n\n//添加y轴\nvar yBar=svg.append(\"g\")\n  .attr('class','axis axis-y')\n  .attr('transform', 'translate('+cfg.grid.x+', '+cfg.grid.y2+')')\n  .call(yAxis)\n\n//定义纵轴网格线\nvar yInner = d3.svg.axis()\n  .scale(yScale)\n  .tickSize(-(width- cfg.grid.x-10),0)\n  .tickFormat(\"\")\n  .orient(\"left\")\n  .ticks(ticks)\n\n### 2.文字旋转\n\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字旋转')\n  .style('transform', 'rotate(7deg)')\n```\n\n此处旋转文字使用 .style('transform', 'rotate(7deg)') 在IE里不兼容\n\n##### 解决方案\n\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字旋转')\n  .attr('transform', 'rotate(7)')\n```\n注意：使用.attr的时候 <code>rotate</code>不能加<code>deg</code>单位\n\n\n### 3.提示框兼容性问题\ntop, left 分别取event.clientY,pageY / event.clientX,pageX 的值\n提示框位置要直接放在body层\n\ntop, left分别取screenY /screenX时\n提示框位置放在与svg同级的父元素下，但这个属性在IE的值与谷歌不同，因此会导致提示框位置不对\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n  .style('padding', '20px')\n\nsvg.append('text')\n  .text('提示框显示位置')\n  .style('cursor', 'pointer')\n  .on('mouseover', function(){\n    console.log(event)\n    var top = event.pageY\n    var left = event.pageX\n\n    var sTop = event.screenY\n    var sLeft = event.screenX\n    console.log('sTop', sTop, 'sLeft', sLeft)\n    console.log('top', top, 'left', left)\n  })\n```\n\n### 4.文字竖着显示\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字竖着显示')\n  .style('writing-mode','tb-rl')\n  .attr('textLength', 90) //文字间距\n\n```","source":"_posts/项目中D3遇到的那些烦心事.md","raw":"---\ntitle: 项目中D3遇到的那些烦心事\ndate: 2017-02-23 16:06:11\ncategories:\n- 技术\n- D3.js\ntags:  \ntoc: \n---\n\n### 1. value 值存在0的时候，y轴出现小数据点\n解决方案：\n\n//获取到最大值\nvar max = d3.max(dataset)\n\n//当最大值小于某个值的可能会出现小数点的时候，这里取最大值不能小于10，小于则重新定义标尺及轴线\nif(max<10){\n  max = 10\n  ticks = 5\n}\n<!-- more -->\n//定义y轴标尺\nvar yScale = d3.scale.linear()\n  .domain([0, max])\n  .range([height, 0])\n\n//定义纵轴  \nvar yAxis=d3.svg.axis()\n  .scale(yScale)\n  .orient(\"left\")\n  .ticks(ticks)\n\n//定义比例尺\nvar linear = d3.scale.linear()  \n  .domain([0, max])  \n  .range([0, height])\n\n//添加y轴\nvar yBar=svg.append(\"g\")\n  .attr('class','axis axis-y')\n  .attr('transform', 'translate('+cfg.grid.x+', '+cfg.grid.y2+')')\n  .call(yAxis)\n\n//定义纵轴网格线\nvar yInner = d3.svg.axis()\n  .scale(yScale)\n  .tickSize(-(width- cfg.grid.x-10),0)\n  .tickFormat(\"\")\n  .orient(\"left\")\n  .ticks(ticks)\n\n### 2.文字旋转\n\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字旋转')\n  .style('transform', 'rotate(7deg)')\n```\n\n此处旋转文字使用 .style('transform', 'rotate(7deg)') 在IE里不兼容\n\n##### 解决方案\n\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字旋转')\n  .attr('transform', 'rotate(7)')\n```\n注意：使用.attr的时候 <code>rotate</code>不能加<code>deg</code>单位\n\n\n### 3.提示框兼容性问题\ntop, left 分别取event.clientY,pageY / event.clientX,pageX 的值\n提示框位置要直接放在body层\n\ntop, left分别取screenY /screenX时\n提示框位置放在与svg同级的父元素下，但这个属性在IE的值与谷歌不同，因此会导致提示框位置不对\n```javascript\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', 100)\n  .attr('height', 100)\n  .style('padding', '20px')\n\nsvg.append('text')\n  .text('提示框显示位置')\n  .style('cursor', 'pointer')\n  .on('mouseover', function(){\n    console.log(event)\n    var top = event.pageY\n    var left = event.pageX\n\n    var sTop = event.screenY\n    var sLeft = event.screenX\n    console.log('sTop', sTop, 'sLeft', sLeft)\n    console.log('top', top, 'left', left)\n  })\n```\n\n### 4.文字竖着显示\n```javascript\nvar svg = d3.select('body')\n        .append('svg')\n        .attr('width', 100)\n        .attr('height', 100)\n        .style('padding', '20px')\n\nsvg.append('text')\n  .text('文字竖着显示')\n  .style('writing-mode','tb-rl')\n  .attr('textLength', 90) //文字间距\n\n```","slug":"项目中D3遇到的那些烦心事","published":1,"updated":"2017-02-28T01:49:59.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9p004b24uujvq62pew","content":"<h3 id=\"1-value-值存在0的时候，y轴出现小数据点\"><a href=\"#1-value-值存在0的时候，y轴出现小数据点\" class=\"headerlink\" title=\"1. value 值存在0的时候，y轴出现小数据点\"></a>1. value 值存在0的时候，y轴出现小数据点</h3><p>解决方案：</p>\n<p>//获取到最大值<br>var max = d3.max(dataset)</p>\n<p>//当最大值小于某个值的可能会出现小数点的时候，这里取最大值不能小于10，小于则重新定义标尺及轴线<br>if(max<10){ max=\"10\" ticks=\"5\" }=\"\" <a=\"\" id=\"more\"><br>//定义y轴标尺<br>var yScale = d3.scale.linear()<br>  .domain([0, max])<br>  .range([height, 0])</10){></p>\n<p>//定义纵轴<br>var yAxis=d3.svg.axis()<br>  .scale(yScale)<br>  .orient(“left”)<br>  .ticks(ticks)</p>\n<p>//定义比例尺<br>var linear = d3.scale.linear()<br>  .domain([0, max])<br>  .range([0, height])</p>\n<p>//添加y轴<br>var yBar=svg.append(“g”)<br>  .attr(‘class’,’axis axis-y’)<br>  .attr(‘transform’, ‘translate(‘+cfg.grid.x+’, ‘+cfg.grid.y2+’)’)<br>  .call(yAxis)</p>\n<p>//定义纵轴网格线<br>var yInner = d3.svg.axis()<br>  .scale(yScale)<br>  .tickSize(-(width- cfg.grid.x-10),0)<br>  .tickFormat(“”)<br>  .orient(“left”)<br>  .ticks(ticks)</p>\n<h3 id=\"2-文字旋转\"><a href=\"#2-文字旋转\" class=\"headerlink\" title=\"2.文字旋转\"></a>2.文字旋转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字旋转'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'transform'</span>, <span class=\"string\">'rotate(7deg)'</span>)</div></pre></td></tr></table></figure>\n<p>此处旋转文字使用 .style(‘transform’, ‘rotate(7deg)’) 在IE里不兼容</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字旋转'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'transform'</span>, <span class=\"string\">'rotate(7)'</span>)</div></pre></td></tr></table></figure>\n<p>注意：使用.attr的时候 <code>rotate</code>不能加<code>deg</code>单位</p>\n<h3 id=\"3-提示框兼容性问题\"><a href=\"#3-提示框兼容性问题\" class=\"headerlink\" title=\"3.提示框兼容性问题\"></a>3.提示框兼容性问题</h3><p>top, left 分别取event.clientY,pageY / event.clientX,pageX 的值<br>提示框位置要直接放在body层</p>\n<p>top, left分别取screenY /screenX时<br>提示框位置放在与svg同级的父元素下，但这个属性在IE的值与谷歌不同，因此会导致提示框位置不对<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'提示框显示位置'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>)</div><div class=\"line\">  .on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"keyword\">var</span> top = event.pageY</div><div class=\"line\">    <span class=\"keyword\">var</span> left = event.pageX</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> sTop = event.screenY</div><div class=\"line\">    <span class=\"keyword\">var</span> sLeft = event.screenX</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sTop'</span>, sTop, <span class=\"string\">'sLeft'</span>, sLeft)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'top'</span>, top, <span class=\"string\">'left'</span>, left)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-文字竖着显示\"><a href=\"#4-文字竖着显示\" class=\"headerlink\" title=\"4.文字竖着显示\"></a>4.文字竖着显示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字竖着显示'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'writing-mode'</span>,<span class=\"string\">'tb-rl'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'textLength'</span>, <span class=\"number\">90</span>) <span class=\"comment\">//文字间距</span></div></pre></td></tr></table></figure>","excerpt":"<h3 id=\"1-value-值存在0的时候，y轴出现小数据点\"><a href=\"#1-value-值存在0的时候，y轴出现小数据点\" class=\"headerlink\" title=\"1. value 值存在0的时候，y轴出现小数据点\"></a>1. value 值存在0的时候，y轴出现小数据点</h3><p>解决方案：</p>\n<p>//获取到最大值<br>var max = d3.max(dataset)</p>\n<p>//当最大值小于某个值的可能会出现小数点的时候，这里取最大值不能小于10，小于则重新定义标尺及轴线<br>if(max<10){\n  max = 10\n  ticks = 5\n}","more":"<br>//定义y轴标尺<br>var yScale = d3.scale.linear()<br>  .domain([0, max])<br>  .range([height, 0])</p>\n<p>//定义纵轴<br>var yAxis=d3.svg.axis()<br>  .scale(yScale)<br>  .orient(“left”)<br>  .ticks(ticks)</p>\n<p>//定义比例尺<br>var linear = d3.scale.linear()<br>  .domain([0, max])<br>  .range([0, height])</p>\n<p>//添加y轴<br>var yBar=svg.append(“g”)<br>  .attr(‘class’,’axis axis-y’)<br>  .attr(‘transform’, ‘translate(‘+cfg.grid.x+’, ‘+cfg.grid.y2+’)’)<br>  .call(yAxis)</p>\n<p>//定义纵轴网格线<br>var yInner = d3.svg.axis()<br>  .scale(yScale)<br>  .tickSize(-(width- cfg.grid.x-10),0)<br>  .tickFormat(“”)<br>  .orient(“left”)<br>  .ticks(ticks)</p>\n<h3 id=\"2-文字旋转\"><a href=\"#2-文字旋转\" class=\"headerlink\" title=\"2.文字旋转\"></a>2.文字旋转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字旋转'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'transform'</span>, <span class=\"string\">'rotate(7deg)'</span>)</div></pre></td></tr></table></figure>\n<p>此处旋转文字使用 .style(‘transform’, ‘rotate(7deg)’) 在IE里不兼容</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字旋转'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'transform'</span>, <span class=\"string\">'rotate(7)'</span>)</div></pre></td></tr></table></figure>\n<p>注意：使用.attr的时候 <code>rotate</code>不能加<code>deg</code>单位</p>\n<h3 id=\"3-提示框兼容性问题\"><a href=\"#3-提示框兼容性问题\" class=\"headerlink\" title=\"3.提示框兼容性问题\"></a>3.提示框兼容性问题</h3><p>top, left 分别取event.clientY,pageY / event.clientX,pageX 的值<br>提示框位置要直接放在body层</p>\n<p>top, left分别取screenY /screenX时<br>提示框位置放在与svg同级的父元素下，但这个属性在IE的值与谷歌不同，因此会导致提示框位置不对<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">  .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'提示框显示位置'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>)</div><div class=\"line\">  .on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event)</div><div class=\"line\">    <span class=\"keyword\">var</span> top = event.pageY</div><div class=\"line\">    <span class=\"keyword\">var</span> left = event.pageX</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> sTop = event.screenY</div><div class=\"line\">    <span class=\"keyword\">var</span> sLeft = event.screenX</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sTop'</span>, sTop, <span class=\"string\">'sLeft'</span>, sLeft)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'top'</span>, top, <span class=\"string\">'left'</span>, left)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-文字竖着显示\"><a href=\"#4-文字竖着显示\" class=\"headerlink\" title=\"4.文字竖着显示\"></a>4.文字竖着显示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'body'</span>)</div><div class=\"line\">        .append(<span class=\"string\">'svg'</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'width'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .attr(<span class=\"string\">'height'</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        .style(<span class=\"string\">'padding'</span>, <span class=\"string\">'20px'</span>)</div><div class=\"line\"></div><div class=\"line\">svg.append(<span class=\"string\">'text'</span>)</div><div class=\"line\">  .text(<span class=\"string\">'文字竖着显示'</span>)</div><div class=\"line\">  .style(<span class=\"string\">'writing-mode'</span>,<span class=\"string\">'tb-rl'</span>)</div><div class=\"line\">  .attr(<span class=\"string\">'textLength'</span>, <span class=\"number\">90</span>) <span class=\"comment\">//文字间距</span></div></pre></td></tr></table></figure>"},{"title":"验证码倒计时","date":"2016-07-20T13:58:16.000Z","_content":"\n```html\n<input type=\"button\" id=\"btn\" value=\"免费获取验证码\" /> \n```\n\n```javascrip\nvar wait=60; \nfunction time(o) { \n  if (wait == 0) { \n    o.removeAttribute(\"disabled\"); \n    o.value=\"免费获取验证码\"; \n    wait = 60; \n  }else{ \n    o.setAttribute(\"disabled\", true); \n    o.value=\"重新发送(\" + wait + \")\"; \n    wait--; \n    setTimeout(function() { \n      time(o) \n    },1000) \n  } \n} \ndocument.getElementById(\"btn\").onclick=function(){time(this);} \n```","source":"_posts/验证码倒计时.md","raw":"---\ntitle: 验证码倒计时\ndate: 2016-06-50 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: JS刷新\n---\n\n```html\n<input type=\"button\" id=\"btn\" value=\"免费获取验证码\" /> \n```\n\n```javascrip\nvar wait=60; \nfunction time(o) { \n  if (wait == 0) { \n    o.removeAttribute(\"disabled\"); \n    o.value=\"免费获取验证码\"; \n    wait = 60; \n  }else{ \n    o.setAttribute(\"disabled\", true); \n    o.value=\"重新发送(\" + wait + \")\"; \n    wait--; \n    setTimeout(function() { \n      time(o) \n    },1000) \n  } \n} \ndocument.getElementById(\"btn\").onclick=function(){time(this);} \n```","slug":"验证码倒计时","published":1,"updated":"2017-02-18T12:44:31.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9s004e24uu8b9ue4rs","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"免费获取验证码\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var wait=60; </div><div class=\"line\">function time(o) &#123; </div><div class=\"line\">  if (wait == 0) &#123; </div><div class=\"line\">    o.removeAttribute(&quot;disabled&quot;); </div><div class=\"line\">    o.value=&quot;免费获取验证码&quot;; </div><div class=\"line\">    wait = 60; </div><div class=\"line\">  &#125;else&#123; </div><div class=\"line\">    o.setAttribute(&quot;disabled&quot;, true); </div><div class=\"line\">    o.value=&quot;重新发送(&quot; + wait + &quot;)&quot;; </div><div class=\"line\">    wait--; </div><div class=\"line\">    setTimeout(function() &#123; </div><div class=\"line\">      time(o) </div><div class=\"line\">    &#125;,1000) </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">document.getElementById(&quot;btn&quot;).onclick=function()&#123;time(this);&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"免费获取验证码\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var wait=60; </div><div class=\"line\">function time(o) &#123; </div><div class=\"line\">  if (wait == 0) &#123; </div><div class=\"line\">    o.removeAttribute(&quot;disabled&quot;); </div><div class=\"line\">    o.value=&quot;免费获取验证码&quot;; </div><div class=\"line\">    wait = 60; </div><div class=\"line\">  &#125;else&#123; </div><div class=\"line\">    o.setAttribute(&quot;disabled&quot;, true); </div><div class=\"line\">    o.value=&quot;重新发送(&quot; + wait + &quot;)&quot;; </div><div class=\"line\">    wait--; </div><div class=\"line\">    setTimeout(function() &#123; </div><div class=\"line\">      time(o) </div><div class=\"line\">    &#125;,1000) </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">document.getElementById(&quot;btn&quot;).onclick=function()&#123;time(this);&#125;</div></pre></td></tr></table></figure>"},{"title":"网页中常用Jquery效果","date":"2016-06-11T15:03:57.000Z","_content":"#### 下拉菜单\n```javascript\n$(function(){\n  $(\".s-weather\").hover(function(){ \n      $(\".s-wShow\").show(); \n      },function(){ \n      $(\".s-wShow\").hide();   \n  })\n<!-- more -->\n  $(\".s-wShow\").hover(function(){\n      $(\".s-wShow\").show(); \n      },function(){ \n   $(\".s-wShow\").hide(); \n  })\n})\n```\n#### 导航菜单切换1\n```javascript\n $(function(){\n    $(\".tabs-nav a:first\").addClass(\"current\")\n        $(\".tabs-nav a\").on(\"click\",function(){\n        var index=$(this).index();\n        $(this).addClass(\"current\");\n        $(this).siblings().removeClass(\"current\");\n        $(\".wrap\").find(\".tabs-box\").hide().eq(index).show();\n    })\n})  \n```\n#### 导航菜单切换2\n```javascript\n $(function(){\n       $(\".sel-tabs-nemu li\").on(\"click\",function(){\n        var i=$(this).index();\n        $(\".sel-tabs-nemu li\").children().removeClass(\"cur\");\n        $(this).children().addClass(\"cur\");\n        $(\".con_center\").find(\".sel-tabs-content\").hide().eq(i).show();\n    });\n})\n```\n \n\n#### a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\n```javascript\n    $('.tag_sort a').each(function () {\n        if ($($(this))[0].href == String(window.location))\n        $(this).addClass('cur').attr('href', 'javascript:void(0);');\n    });\n    A 标签target属性必须是_parent 在父框架集中打开被链接文档\n```\n#### 点击按钮回到顶部\n\n```css\n.gotop{ \n  position:fixed; \n  right:10px; \n  bottom:20px; \n  display:block; \n  background:#ccc;\n  font-size:24px; \n  color:#222; width:40px; \n  height:40px; \n  line-height:40px; \n  text-align:center; \n  cursor:pointer; \n  display:none;\n }\n```\n```javascript\n$(function(){\n  $(window).scroll(function(){\n    var wh=$(window).scrollTop();\n    if(wh>0)\n    {\n      $(\"#gotop\").fadeIn()\n    }else{\n      $(\"#gotop\").fadeOut();\n    }\n  });\n  $(\"#gotop\").click(function(){\n    $(\"body,html\").animate({scrollTop:0},300);\n  })\n})\n```\n```html\n<div style=\"height:; background:#eee;\"></div>\n<div class=\"gotop\" id=\"gotop\">^</div> \n```\n#### 禁止右键点击\n```javascript\n$(document).ready(function(){ \n  $(document).bind(\"contextmenu\",function(e){ \n   return false\n }); \n});\n```\n#### 隐藏搜索文本框文字\n\n```javascript\n$(document).ready(function() { \n   $(\"input.text1\").val(\"Enter your search text here\"); \n    textFill($('input.text1'))\n}); \nfunction textFill(input){ //input focus text function \n  var originalvalue = input.val(); \n  input.focus( function(){ if( $.trim(input.val()) == originalvalue )\n  { input.val(''); } }); \n  input.blur( function(){ if( $.trim(input.val()) == '' )\n  { input.val(originalvalue); } \n}); \n}\n```\n#### 在新窗口中打开链接\n\n```javascript\n$(document).ready(function() { \n//Example 1: Every link will open in a new window \n         $('a[href^=\"http://\"]').attr(\"target\", \"_blank\");\n//Example 2: Links with the rel=\"external\" attribute will only open in a new window  \n           $('a[@rel$='external']').click(function(){ \n               this.target = \"_blank\"; }); \n}); \n````\n#### 让两个 DIV 高度相同\n```javascript\nvar $columns = $('.column'); \nvar height = 0; $columns.each(function () { \n    if ($(this).height() > height) { \n    height = $(this).height(); } });\n    $columns.height(height);\n```\n#### Jquery判断当前屏幕分辨率并加载不同的css样式\n\n```javascript\n$(function () {\n    if ((screen.width == 1024) && (screen.height == 768)) {\n    $(\"#xx\").height(500);//此分辨率下你需要的操作\n    } else if ((screen.width == 1360) && (screen.height == 900)) {\n    $(\"#xx\").height(700);//这个分辨率下你的操作\n    } else {\n    $(\"#xx\").height(500);//默认操作\n    }\n});\n```\n#### jQ判断IE版本\n```javascript\nif ($.browser.msie && ($.browser.version == \"7.0\" \n    || $.browser.version == \"8.0\") && !$.support.style) {\n  $(document).ready(function () { \n    $(\"#chartContainer\").css(\"width\", 435); \n    $(\".highcharts-container\").css({ \"position\": \"absolute\", \"left\": -420, \"top\": 5 ;\n  })\n}\n```","source":"_posts/网页中常用Jquery效果.md","raw":"---\ntitle: 网页中常用Jquery效果\ndate: 2016-06-11 23:03:57\ncategories: \n  - 技术\n  - Jquery\ntags: \n---\n#### 下拉菜单\n```javascript\n$(function(){\n  $(\".s-weather\").hover(function(){ \n      $(\".s-wShow\").show(); \n      },function(){ \n      $(\".s-wShow\").hide();   \n  })\n<!-- more -->\n  $(\".s-wShow\").hover(function(){\n      $(\".s-wShow\").show(); \n      },function(){ \n   $(\".s-wShow\").hide(); \n  })\n})\n```\n#### 导航菜单切换1\n```javascript\n $(function(){\n    $(\".tabs-nav a:first\").addClass(\"current\")\n        $(\".tabs-nav a\").on(\"click\",function(){\n        var index=$(this).index();\n        $(this).addClass(\"current\");\n        $(this).siblings().removeClass(\"current\");\n        $(\".wrap\").find(\".tabs-box\").hide().eq(index).show();\n    })\n})  \n```\n#### 导航菜单切换2\n```javascript\n $(function(){\n       $(\".sel-tabs-nemu li\").on(\"click\",function(){\n        var i=$(this).index();\n        $(\".sel-tabs-nemu li\").children().removeClass(\"cur\");\n        $(this).children().addClass(\"cur\");\n        $(\".con_center\").find(\".sel-tabs-content\").hide().eq(i).show();\n    });\n})\n```\n \n\n#### a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\n```javascript\n    $('.tag_sort a').each(function () {\n        if ($($(this))[0].href == String(window.location))\n        $(this).addClass('cur').attr('href', 'javascript:void(0);');\n    });\n    A 标签target属性必须是_parent 在父框架集中打开被链接文档\n```\n#### 点击按钮回到顶部\n\n```css\n.gotop{ \n  position:fixed; \n  right:10px; \n  bottom:20px; \n  display:block; \n  background:#ccc;\n  font-size:24px; \n  color:#222; width:40px; \n  height:40px; \n  line-height:40px; \n  text-align:center; \n  cursor:pointer; \n  display:none;\n }\n```\n```javascript\n$(function(){\n  $(window).scroll(function(){\n    var wh=$(window).scrollTop();\n    if(wh>0)\n    {\n      $(\"#gotop\").fadeIn()\n    }else{\n      $(\"#gotop\").fadeOut();\n    }\n  });\n  $(\"#gotop\").click(function(){\n    $(\"body,html\").animate({scrollTop:0},300);\n  })\n})\n```\n```html\n<div style=\"height:; background:#eee;\"></div>\n<div class=\"gotop\" id=\"gotop\">^</div> \n```\n#### 禁止右键点击\n```javascript\n$(document).ready(function(){ \n  $(document).bind(\"contextmenu\",function(e){ \n   return false\n }); \n});\n```\n#### 隐藏搜索文本框文字\n\n```javascript\n$(document).ready(function() { \n   $(\"input.text1\").val(\"Enter your search text here\"); \n    textFill($('input.text1'))\n}); \nfunction textFill(input){ //input focus text function \n  var originalvalue = input.val(); \n  input.focus( function(){ if( $.trim(input.val()) == originalvalue )\n  { input.val(''); } }); \n  input.blur( function(){ if( $.trim(input.val()) == '' )\n  { input.val(originalvalue); } \n}); \n}\n```\n#### 在新窗口中打开链接\n\n```javascript\n$(document).ready(function() { \n//Example 1: Every link will open in a new window \n         $('a[href^=\"http://\"]').attr(\"target\", \"_blank\");\n//Example 2: Links with the rel=\"external\" attribute will only open in a new window  \n           $('a[@rel$='external']').click(function(){ \n               this.target = \"_blank\"; }); \n}); \n````\n#### 让两个 DIV 高度相同\n```javascript\nvar $columns = $('.column'); \nvar height = 0; $columns.each(function () { \n    if ($(this).height() > height) { \n    height = $(this).height(); } });\n    $columns.height(height);\n```\n#### Jquery判断当前屏幕分辨率并加载不同的css样式\n\n```javascript\n$(function () {\n    if ((screen.width == 1024) && (screen.height == 768)) {\n    $(\"#xx\").height(500);//此分辨率下你需要的操作\n    } else if ((screen.width == 1360) && (screen.height == 900)) {\n    $(\"#xx\").height(700);//这个分辨率下你的操作\n    } else {\n    $(\"#xx\").height(500);//默认操作\n    }\n});\n```\n#### jQ判断IE版本\n```javascript\nif ($.browser.msie && ($.browser.version == \"7.0\" \n    || $.browser.version == \"8.0\") && !$.support.style) {\n  $(document).ready(function () { \n    $(\"#chartContainer\").css(\"width\", 435); \n    $(\".highcharts-container\").css({ \"position\": \"absolute\", \"left\": -420, \"top\": 5 ;\n  })\n}\n```","slug":"网页中常用Jquery效果","published":1,"updated":"2017-02-18T12:29:08.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjn9u004h24uu8fv6aa04","content":"<h4 id=\"下拉菜单\"><a href=\"#下拉菜单\" class=\"headerlink\" title=\"下拉菜单\"></a>下拉菜单</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\".s-weather\"</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).show(); </div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).hide();   </div><div class=\"line\">  &#125;)</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">  $(<span class=\"string\">\".s-wShow\"</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).show(); </div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">   $(<span class=\"string\">\".s-wShow\"</span>).hide(); </div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"导航菜单切换1\"><a href=\"#导航菜单切换1\" class=\"headerlink\" title=\"导航菜单切换1\"></a>导航菜单切换1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\".tabs-nav a:first\"</span>).addClass(<span class=\"string\">\"current\"</span>)</div><div class=\"line\">        $(<span class=\"string\">\".tabs-nav a\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index=$(<span class=\"keyword\">this</span>).index();</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"current\"</span>);</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).siblings().removeClass(<span class=\"string\">\"current\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\".wrap\"</span>).find(<span class=\"string\">\".tabs-box\"</span>).hide().eq(index).show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"导航菜单切换2\"><a href=\"#导航菜单切换2\" class=\"headerlink\" title=\"导航菜单切换2\"></a>导航菜单切换2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       $(<span class=\"string\">\".sel-tabs-nemu li\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i=$(<span class=\"keyword\">this</span>).index();</div><div class=\"line\">        $(<span class=\"string\">\".sel-tabs-nemu li\"</span>).children().removeClass(<span class=\"string\">\"cur\"</span>);</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).children().addClass(<span class=\"string\">\"cur\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\".con_center\"</span>).find(<span class=\"string\">\".sel-tabs-content\"</span>).hide().eq(i).show();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\"><a href=\"#a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\" class=\"headerlink\" title=\"a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\"></a>a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.tag_sort a'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ($($(<span class=\"keyword\">this</span>))[<span class=\"number\">0</span>].href == <span class=\"built_in\">String</span>(<span class=\"built_in\">window</span>.location))</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'cur'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:void(0);'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">A 标签target属性必须是_parent 在父框架集中打开被链接文档</div></pre></td></tr></table></figure>\n<h4 id=\"点击按钮回到顶部\"><a href=\"#点击按钮回到顶部\" class=\"headerlink\" title=\"点击按钮回到顶部\"></a>点击按钮回到顶部</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.gotop</span>&#123; </div><div class=\"line\">  <span class=\"attribute\">position</span>:fixed; </div><div class=\"line\">  <span class=\"attribute\">right</span>:<span class=\"number\">10px</span>; </div><div class=\"line\">  <span class=\"attribute\">bottom</span>:<span class=\"number\">20px</span>; </div><div class=\"line\">  <span class=\"attribute\">display</span>:block; </div><div class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">24px</span>; </div><div class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#222</span>; <span class=\"attribute\">width</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">text-align</span>:center; </div><div class=\"line\">  <span class=\"attribute\">cursor</span>:pointer; </div><div class=\"line\">  <span class=\"attribute\">display</span>:none;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> wh=$(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\">    <span class=\"keyword\">if</span>(wh&gt;<span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      $(<span class=\"string\">\"#gotop\"</span>).fadeIn()</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      $(<span class=\"string\">\"#gotop\"</span>).fadeOut();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  $(<span class=\"string\">\"#gotop\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"body,html\"</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,<span class=\"number\">300</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:; background:#eee;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gotop\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span>^<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"禁止右键点击\"><a href=\"#禁止右键点击\" class=\"headerlink\" title=\"禁止右键点击\"></a>禁止右键点击</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123; </div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"> &#125;); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"隐藏搜索文本框文字\"><a href=\"#隐藏搜索文本框文字\" class=\"headerlink\" title=\"隐藏搜索文本框文字\"></a>隐藏搜索文本框文字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here\"</span>); </div><div class=\"line\">    textFill($(<span class=\"string\">'input.text1'</span>))</div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function </span></div><div class=\"line\">  <span class=\"keyword\">var</span> originalvalue = input.val(); </div><div class=\"line\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )</div><div class=\"line\">  &#123; input.val(<span class=\"string\">''</span>); &#125; &#125;); </div><div class=\"line\">  input.blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )</div><div class=\"line\">  &#123; input.val(originalvalue); &#125; </div><div class=\"line\">&#125;); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在新窗口中打开链接\"><a href=\"#在新窗口中打开链接\" class=\"headerlink\" title=\"在新窗口中打开链接\"></a>在新窗口中打开链接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\"><span class=\"comment\">//Example 1: Every link will open in a new window </span></div><div class=\"line\">         $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>, <span class=\"string\">\"_blank\"</span>);</div><div class=\"line\"><span class=\"comment\">//Example 2: Links with the rel=\"external\" attribute will only open in a new window  </span></div><div class=\"line\">           $(<span class=\"string\">'a[@rel$='</span>external<span class=\"string\">']'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">               <span class=\"keyword\">this</span>.target = <span class=\"string\">\"_blank\"</span>; &#125;); </div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n<h4 id=\"让两个-DIV-高度相同\"><a href=\"#让两个-DIV-高度相同\" class=\"headerlink\" title=\"让两个 DIV 高度相同\"></a>让两个 DIV 高度相同</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $columns = $(<span class=\"string\">'.column'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">0</span>; $columns.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).height() &gt; height) &#123; </div><div class=\"line\">    height = $(<span class=\"keyword\">this</span>).height(); &#125; &#125;);</div><div class=\"line\">    $columns.height(height);</div></pre></td></tr></table></figure>\n<h4 id=\"Jquery判断当前屏幕分辨率并加载不同的css样式\"><a href=\"#Jquery判断当前屏幕分辨率并加载不同的css样式\" class=\"headerlink\" title=\"Jquery判断当前屏幕分辨率并加载不同的css样式\"></a>Jquery判断当前屏幕分辨率并加载不同的css样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((screen.width == <span class=\"number\">1024</span>) &amp;&amp; (screen.height == <span class=\"number\">768</span>)) &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">500</span>);<span class=\"comment\">//此分辨率下你需要的操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((screen.width == <span class=\"number\">1360</span>) &amp;&amp; (screen.height == <span class=\"number\">900</span>)) &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">700</span>);<span class=\"comment\">//这个分辨率下你的操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">500</span>);<span class=\"comment\">//默认操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"jQ判断IE版本\"><a href=\"#jQ判断IE版本\" class=\"headerlink\" title=\"jQ判断IE版本\"></a>jQ判断IE版本</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ($.browser.msie &amp;&amp; ($.browser.version == <span class=\"string\">\"7.0\"</span> </div><div class=\"line\">    || $.browser.version == <span class=\"string\">\"8.0\"</span>) &amp;&amp; !$.support.style) &#123;</div><div class=\"line\">  $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    $(<span class=\"string\">\"#chartContainer\"</span>).css(<span class=\"string\">\"width\"</span>, <span class=\"number\">435</span>); </div><div class=\"line\">    $(<span class=\"string\">\".highcharts-container\"</span>).css(&#123; <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>, <span class=\"string\">\"left\"</span>: <span class=\"number\">-420</span>, <span class=\"string\">\"top\"</span>: <span class=\"number\">5</span> ;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"下拉菜单\"><a href=\"#下拉菜单\" class=\"headerlink\" title=\"下拉菜单\"></a>下拉菜单</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\".s-weather\"</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).show(); </div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).hide();   </div><div class=\"line\">  &#125;)</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">  $(<span class=\"string\">\".s-wShow\"</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"string\">\".s-wShow\"</span>).show(); </div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">   $(<span class=\"string\">\".s-wShow\"</span>).hide(); </div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"导航菜单切换1\"><a href=\"#导航菜单切换1\" class=\"headerlink\" title=\"导航菜单切换1\"></a>导航菜单切换1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\".tabs-nav a:first\"</span>).addClass(<span class=\"string\">\"current\"</span>)</div><div class=\"line\">        $(<span class=\"string\">\".tabs-nav a\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index=$(<span class=\"keyword\">this</span>).index();</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"current\"</span>);</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).siblings().removeClass(<span class=\"string\">\"current\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\".wrap\"</span>).find(<span class=\"string\">\".tabs-box\"</span>).hide().eq(index).show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"导航菜单切换2\"><a href=\"#导航菜单切换2\" class=\"headerlink\" title=\"导航菜单切换2\"></a>导航菜单切换2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       $(<span class=\"string\">\".sel-tabs-nemu li\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i=$(<span class=\"keyword\">this</span>).index();</div><div class=\"line\">        $(<span class=\"string\">\".sel-tabs-nemu li\"</span>).children().removeClass(<span class=\"string\">\"cur\"</span>);</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).children().addClass(<span class=\"string\">\"cur\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\".con_center\"</span>).find(<span class=\"string\">\".sel-tabs-content\"</span>).hide().eq(i).show();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\"><a href=\"#a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\" class=\"headerlink\" title=\"a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。\"></a>a标签点击跳转页面后怎么给当前点击的a标签用jquery添加一个样式。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.tag_sort a'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ($($(<span class=\"keyword\">this</span>))[<span class=\"number\">0</span>].href == <span class=\"built_in\">String</span>(<span class=\"built_in\">window</span>.location))</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'cur'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:void(0);'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">A 标签target属性必须是_parent 在父框架集中打开被链接文档</div></pre></td></tr></table></figure>\n<h4 id=\"点击按钮回到顶部\"><a href=\"#点击按钮回到顶部\" class=\"headerlink\" title=\"点击按钮回到顶部\"></a>点击按钮回到顶部</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.gotop</span>&#123; </div><div class=\"line\">  <span class=\"attribute\">position</span>:fixed; </div><div class=\"line\">  <span class=\"attribute\">right</span>:<span class=\"number\">10px</span>; </div><div class=\"line\">  <span class=\"attribute\">bottom</span>:<span class=\"number\">20px</span>; </div><div class=\"line\">  <span class=\"attribute\">display</span>:block; </div><div class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">24px</span>; </div><div class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#222</span>; <span class=\"attribute\">width</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">40px</span>; </div><div class=\"line\">  <span class=\"attribute\">text-align</span>:center; </div><div class=\"line\">  <span class=\"attribute\">cursor</span>:pointer; </div><div class=\"line\">  <span class=\"attribute\">display</span>:none;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> wh=$(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\">    <span class=\"keyword\">if</span>(wh&gt;<span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      $(<span class=\"string\">\"#gotop\"</span>).fadeIn()</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      $(<span class=\"string\">\"#gotop\"</span>).fadeOut();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  $(<span class=\"string\">\"#gotop\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"body,html\"</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,<span class=\"number\">300</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:; background:#eee;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gotop\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span>^<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"禁止右键点击\"><a href=\"#禁止右键点击\" class=\"headerlink\" title=\"禁止右键点击\"></a>禁止右键点击</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123; </div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"> &#125;); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"隐藏搜索文本框文字\"><a href=\"#隐藏搜索文本框文字\" class=\"headerlink\" title=\"隐藏搜索文本框文字\"></a>隐藏搜索文本框文字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here\"</span>); </div><div class=\"line\">    textFill($(<span class=\"string\">'input.text1'</span>))</div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function </span></div><div class=\"line\">  <span class=\"keyword\">var</span> originalvalue = input.val(); </div><div class=\"line\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )</div><div class=\"line\">  &#123; input.val(<span class=\"string\">''</span>); &#125; &#125;); </div><div class=\"line\">  input.blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )</div><div class=\"line\">  &#123; input.val(originalvalue); &#125; </div><div class=\"line\">&#125;); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"在新窗口中打开链接\"><a href=\"#在新窗口中打开链接\" class=\"headerlink\" title=\"在新窗口中打开链接\"></a>在新窗口中打开链接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\"><span class=\"comment\">//Example 1: Every link will open in a new window </span></div><div class=\"line\">         $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>, <span class=\"string\">\"_blank\"</span>);</div><div class=\"line\"><span class=\"comment\">//Example 2: Links with the rel=\"external\" attribute will only open in a new window  </span></div><div class=\"line\">           $(<span class=\"string\">'a[@rel$='</span>external<span class=\"string\">']'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">               <span class=\"keyword\">this</span>.target = <span class=\"string\">\"_blank\"</span>; &#125;); </div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure>\n<h4 id=\"让两个-DIV-高度相同\"><a href=\"#让两个-DIV-高度相同\" class=\"headerlink\" title=\"让两个 DIV 高度相同\"></a>让两个 DIV 高度相同</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $columns = $(<span class=\"string\">'.column'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">0</span>; $columns.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).height() &gt; height) &#123; </div><div class=\"line\">    height = $(<span class=\"keyword\">this</span>).height(); &#125; &#125;);</div><div class=\"line\">    $columns.height(height);</div></pre></td></tr></table></figure>\n<h4 id=\"Jquery判断当前屏幕分辨率并加载不同的css样式\"><a href=\"#Jquery判断当前屏幕分辨率并加载不同的css样式\" class=\"headerlink\" title=\"Jquery判断当前屏幕分辨率并加载不同的css样式\"></a>Jquery判断当前屏幕分辨率并加载不同的css样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((screen.width == <span class=\"number\">1024</span>) &amp;&amp; (screen.height == <span class=\"number\">768</span>)) &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">500</span>);<span class=\"comment\">//此分辨率下你需要的操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((screen.width == <span class=\"number\">1360</span>) &amp;&amp; (screen.height == <span class=\"number\">900</span>)) &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">700</span>);<span class=\"comment\">//这个分辨率下你的操作</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"string\">\"#xx\"</span>).height(<span class=\"number\">500</span>);<span class=\"comment\">//默认操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"jQ判断IE版本\"><a href=\"#jQ判断IE版本\" class=\"headerlink\" title=\"jQ判断IE版本\"></a>jQ判断IE版本</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ($.browser.msie &amp;&amp; ($.browser.version == <span class=\"string\">\"7.0\"</span> </div><div class=\"line\">    || $.browser.version == <span class=\"string\">\"8.0\"</span>) &amp;&amp; !$.support.style) &#123;</div><div class=\"line\">  $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    $(<span class=\"string\">\"#chartContainer\"</span>).css(<span class=\"string\">\"width\"</span>, <span class=\"number\">435</span>); </div><div class=\"line\">    $(<span class=\"string\">\".highcharts-container\"</span>).css(&#123; <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>, <span class=\"string\">\"left\"</span>: <span class=\"number\">-420</span>, <span class=\"string\">\"top\"</span>: <span class=\"number\">5</span> ;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"闭包的概念","date":"2016-12-28T15:03:57.000Z","_content":"我的理解的闭包就是能够读取其他函数内部变量的函数\n由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，<!--more-->因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n我们有时候需要得到函数内的局部变量。但是根据变量作用域，这是办不到的，只有通过变通方法才能实现。\n\n```javascript\nfunction f1(){\n\tvar n=999;\n　\tfunction f2(){\n　\t\talert(n); // 999\n　}\n}\n```\n\n在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。\n但是反过来就不行，f2内部的局部变量，对f1就是不可见的。\n这就是Javascript语言特有的\"链式作用域\"结构（chainscope），子对象会一级一级地向上寻找所有父对象的变量。\n所以，父对象的所有变量，对子对象都是可见的，反之则不成立\n\n既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！\n\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　function f2(){\n　　　　　　alert(n); \n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n```\n\n#### 闭包的用途\n闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。\n怎么来理解这句话呢？请看下面的代码。\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　nAdd=function(){n+=1}\n　　　　function f2(){\n　　　　　　alert(n);\n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n　　nAdd();\n　　result(); // 1000\n\n```\n\n\n在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。\n为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。\n这段代码中另一个值得注意的地方，就是\"nAdd=function(){n+=1}\"这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。\n\n#### 使用闭包的注意点\n1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n#### 思考题\n```javascript\nvar name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\nconsole.log(object.getNameFunc()());\n```\n\n```javascript\nvar name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var self = this;\n　　　　　　return function(){\n　　　　　　　　return self.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n```","source":"_posts/闭包的概念.md","raw":"---\ntitle: 闭包的概念\ndate: 2016-12-28 23:03:57\ncategories: \n  - 技术\n  - JavaScript\ntags: 闭包\n---\n我的理解的闭包就是能够读取其他函数内部变量的函数\n由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，<!--more-->因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n我们有时候需要得到函数内的局部变量。但是根据变量作用域，这是办不到的，只有通过变通方法才能实现。\n\n```javascript\nfunction f1(){\n\tvar n=999;\n　\tfunction f2(){\n　\t\talert(n); // 999\n　}\n}\n```\n\n在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。\n但是反过来就不行，f2内部的局部变量，对f1就是不可见的。\n这就是Javascript语言特有的\"链式作用域\"结构（chainscope），子对象会一级一级地向上寻找所有父对象的变量。\n所以，父对象的所有变量，对子对象都是可见的，反之则不成立\n\n既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！\n\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　function f2(){\n　　　　　　alert(n); \n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n```\n\n#### 闭包的用途\n闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。\n怎么来理解这句话呢？请看下面的代码。\n```javascript\nfunction f1(){\n　　　　var n=999;\n　　　　nAdd=function(){n+=1}\n　　　　function f2(){\n　　　　　　alert(n);\n　　　　}\n　　　　return f2;\n　　}\n　　var result=f1();\n　　result(); // 999\n　　nAdd();\n　　result(); // 1000\n\n```\n\n\n在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。\n为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。\n这段代码中另一个值得注意的地方，就是\"nAdd=function(){n+=1}\"这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。\n\n#### 使用闭包的注意点\n1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n#### 思考题\n```javascript\nvar name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\nconsole.log(object.getNameFunc()());\n```\n\n```javascript\nvar name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var self = this;\n　　　　　　return function(){\n　　　　　　　　return self.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());\n```","slug":"闭包的概念","published":1,"updated":"2016-12-29T05:01:27.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjnbm007o24uugf1hgbbc","content":"<p>我的理解的闭包就是能够读取其他函数内部变量的函数<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，<a id=\"more\"></a>因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>我们有时候需要得到函数内的局部变量。但是根据变量作用域，这是办不到的，只有通过变通方法才能实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　\t\talert(n); <span class=\"comment\">// 999</span></div><div class=\"line\">　&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。<br>但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chainscope），子对象会一级一级地向上寻找所有父对象的变量。<br>所以，父对象的所有变量，对子对象都是可见的，反之则不成立</p>\n<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　alert(n); </div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　<span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">　　result(); <span class=\"comment\">// 999</span></div></pre></td></tr></table></figure>\n<h4 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h4><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>怎么来理解这句话呢？请看下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　　　nAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125;</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　alert(n);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　<span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">　　result(); <span class=\"comment\">// 999</span></div><div class=\"line\">　　nAdd();</div><div class=\"line\">　　result(); <span class=\"comment\">// 1000</span></div></pre></td></tr></table></figure></p>\n<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h4 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h4><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> self.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">　　alert(object.getNameFunc()());</div></pre></td></tr></table></figure>","excerpt":"<p>我的理解的闭包就是能够读取其他函数内部变量的函数<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，","more":"因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>我们有时候需要得到函数内的局部变量。但是根据变量作用域，这是办不到的，只有通过变通方法才能实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　\t\talert(n); <span class=\"comment\">// 999</span></div><div class=\"line\">　&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。<br>但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chainscope），子对象会一级一级地向上寻找所有父对象的变量。<br>所以，父对象的所有变量，对子对象都是可见的，反之则不成立</p>\n<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　alert(n); </div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　<span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">　　result(); <span class=\"comment\">// 999</span></div></pre></td></tr></table></figure>\n<h4 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h4><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>怎么来理解这句话呢？请看下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　　　nAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125;</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　alert(n);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> f2;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　<span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">　　result(); <span class=\"comment\">// 999</span></div><div class=\"line\">　　nAdd();</div><div class=\"line\">　　result(); <span class=\"comment\">// 1000</span></div></pre></td></tr></table></figure></p>\n<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h4 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h4><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> self.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">　　alert(object.getNameFunc()());</div></pre></td></tr></table></figure>"},{"title":"安装MongoDB","date":"2017-02-23T13:58:16.000Z","_content":"\n### 1.安装MongoDB\n\n### 2.在安装目录下执行Mongod\ncd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin\n<!-- more -->\n\n### 3.在安装目录下执行Mongo\ncd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin\n\n### 4.为了不用每次都进目录启服务，设置本地服务\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install\n \n### 5.启动服务\nnet start mongodb\n\n\n### 异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48\n#### 解决方案：\n1，删除E:\\MongoDB\\data\\mongod.lock文件\n2，删除服务\n\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --remove\n\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install","source":"_posts/安装MongoDB.md","raw":"---\ntitle: 安装MongoDB\ndate: 2017-02-23 21:58:16\ncategories: \n  - 技术\n  - JavaScript\ntags: 循环遍历\n---\n\n### 1.安装MongoDB\n\n### 2.在安装目录下执行Mongod\ncd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin\n<!-- more -->\n\n### 3.在安装目录下执行Mongo\ncd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin\n\n### 4.为了不用每次都进目录启服务，设置本地服务\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install\n \n### 5.启动服务\nnet start mongodb\n\n\n### 异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48\n#### 解决方案：\n1，删除E:\\MongoDB\\data\\mongod.lock文件\n2，删除服务\n\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --remove\n\nmongod --logpath \"D:/data/mongo.log\" --logappend --dbpath \"D:/data/db\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install","slug":"安装MongoDB","published":1,"updated":"2017-02-24T06:05:26.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizoyjnbo007p24uuslr4yoff","content":"<h3 id=\"1-安装MongoDB\"><a href=\"#1-安装MongoDB\" class=\"headerlink\" title=\"1.安装MongoDB\"></a>1.安装MongoDB</h3><h3 id=\"2-在安装目录下执行Mongod\"><a href=\"#2-在安装目录下执行Mongod\" class=\"headerlink\" title=\"2.在安装目录下执行Mongod\"></a>2.在安装目录下执行Mongod</h3><p>cd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin<br><a id=\"more\"></a></p>\n<h3 id=\"3-在安装目录下执行Mongo\"><a href=\"#3-在安装目录下执行Mongo\" class=\"headerlink\" title=\"3.在安装目录下执行Mongo\"></a>3.在安装目录下执行Mongo</h3><p>cd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin</p>\n<h3 id=\"4-为了不用每次都进目录启服务，设置本地服务\"><a href=\"#4-为了不用每次都进目录启服务，设置本地服务\" class=\"headerlink\" title=\"4.为了不用每次都进目录启服务，设置本地服务\"></a>4.为了不用每次都进目录启服务，设置本地服务</h3><p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –install</p>\n<h3 id=\"5-启动服务\"><a href=\"#5-启动服务\" class=\"headerlink\" title=\"5.启动服务\"></a>5.启动服务</h3><p>net start mongodb</p>\n<h3 id=\"异常：服务开启不了-发生服务特定错误-100-发生服务特定错误-48\"><a href=\"#异常：服务开启不了-发生服务特定错误-100-发生服务特定错误-48\" class=\"headerlink\" title=\"异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48\"></a>异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48</h3><h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><p>1，删除E:\\MongoDB\\data\\mongod.lock文件<br>2，删除服务</p>\n<p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –remove</p>\n<p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –install</p>\n","excerpt":"<h3 id=\"1-安装MongoDB\"><a href=\"#1-安装MongoDB\" class=\"headerlink\" title=\"1.安装MongoDB\"></a>1.安装MongoDB</h3><h3 id=\"2-在安装目录下执行Mongod\"><a href=\"#2-在安装目录下执行Mongod\" class=\"headerlink\" title=\"2.在安装目录下执行Mongod\"></a>2.在安装目录下执行Mongod</h3><p>cd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin<br>","more":"</p>\n<h3 id=\"3-在安装目录下执行Mongo\"><a href=\"#3-在安装目录下执行Mongo\" class=\"headerlink\" title=\"3.在安装目录下执行Mongo\"></a>3.在安装目录下执行Mongo</h3><p>cd: D:\\Program Files\\MongoDB\\Server\\3.2\\bin</p>\n<h3 id=\"4-为了不用每次都进目录启服务，设置本地服务\"><a href=\"#4-为了不用每次都进目录启服务，设置本地服务\" class=\"headerlink\" title=\"4.为了不用每次都进目录启服务，设置本地服务\"></a>4.为了不用每次都进目录启服务，设置本地服务</h3><p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –install</p>\n<h3 id=\"5-启动服务\"><a href=\"#5-启动服务\" class=\"headerlink\" title=\"5.启动服务\"></a>5.启动服务</h3><p>net start mongodb</p>\n<h3 id=\"异常：服务开启不了-发生服务特定错误-100-发生服务特定错误-48\"><a href=\"#异常：服务开启不了-发生服务特定错误-100-发生服务特定错误-48\" class=\"headerlink\" title=\"异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48\"></a>异常：服务开启不了 发生服务特定错误: 100 发生服务特定错误: 48</h3><h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><p>1，删除E:\\MongoDB\\data\\mongod.lock文件<br>2，删除服务</p>\n<p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –remove</p>\n<p>mongod –logpath “D:/data/mongo.log” –logappend –dbpath “D:/data/db” –directoryperdb –serviceName “MongoDB” –serviceDisplayName “MongoDB” –install</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cizoyjn1o000024uuqrgdervy","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn2e000724uu3ny4nxvl"},{"post_id":"cizoyjn1o000024uuqrgdervy","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjn2f000824uuenpunhoe"},{"post_id":"cizoyjn3q000924uu65wm97i2","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn4f000i24uujgpf9dww"},{"post_id":"cizoyjn3q000924uu65wm97i2","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjn4j000l24uu3dj5mpgo"},{"post_id":"cizoyjn4h000k24uu09uy5n7w","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn4w000t24uu7czceu13"},{"post_id":"cizoyjn4h000k24uu09uy5n7w","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn50000w24uu9efwka0u"},{"post_id":"cizoyjn3v000b24uugjmpd9g7","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn56000z24uunasf5y0v"},{"post_id":"cizoyjn3v000b24uugjmpd9g7","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn5a001324uucydwhc4j"},{"post_id":"cizoyjn4l000o24uu955s9800","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn5d001724uu77q8d5yj"},{"post_id":"cizoyjn4l000o24uu955s9800","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn5g001a24uumjezdw4t"},{"post_id":"cizoyjn4s000q24uu7xrqkp6v","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn5l001c24uuue3o7ddj"},{"post_id":"cizoyjn4s000q24uu7xrqkp6v","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn5q001f24uumsyjdve0"},{"post_id":"cizoyjn43000e24uuchuc7sgv","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn5t001h24uu0x9jvli7"},{"post_id":"cizoyjn43000e24uuchuc7sgv","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn60001k24uuq3odsgrv"},{"post_id":"cizoyjn4v000s24uute1fhfin","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn64001n24uu3o788s54"},{"post_id":"cizoyjn4v000s24uute1fhfin","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn6g001r24uun2s3vr6u"},{"post_id":"cizoyjn4c000g24uuynosnbx2","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn6l001u24uu39f5hse4"},{"post_id":"cizoyjn4c000g24uuynosnbx2","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn6q001z24uupcfklzbu"},{"post_id":"cizoyjn55000y24uu2edjfvxw","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn6u002224uulc8rwked"},{"post_id":"cizoyjn55000y24uu2edjfvxw","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjn6x002524uu97igsq0x"},{"post_id":"cizoyjn58001124uufme44pe9","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn72002924uugu0xxvip"},{"post_id":"cizoyjn58001124uufme44pe9","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn74002b24uuf5kx5uv2"},{"post_id":"cizoyjn5c001624uuu2s6z156","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7a002g24uu5tp6fpyq"},{"post_id":"cizoyjn5c001624uuu2s6z156","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn7c002i24uu6z4kicjj"},{"post_id":"cizoyjn4z000v24uumb44twzv","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7i002n24uuxfrbod88"},{"post_id":"cizoyjn4z000v24uumb44twzv","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn7k002p24uu8clnvr5x"},{"post_id":"cizoyjn5f001924uuf177dfne","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7o002t24uuov1cxl67"},{"post_id":"cizoyjn5f001924uuf177dfne","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn7t002w24uu3ed75chn"},{"post_id":"cizoyjn5j001b24uuus5hi5so","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn7y003024uun8tl1dg7"},{"post_id":"cizoyjn5j001b24uuus5hi5so","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjn81003324uu5rt84wbc"},{"post_id":"cizoyjn5o001e24uud71csxj1","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn84003624uu7o7qkyd4"},{"post_id":"cizoyjn5o001e24uud71csxj1","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn88003924uuh9tbqv1y"},{"post_id":"cizoyjn5r001g24uuoeeqhcun","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn8d003c24uukotisc16"},{"post_id":"cizoyjn5r001g24uuoeeqhcun","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn8h003g24uuid18kntp"},{"post_id":"cizoyjn5v001j24uu8kbsds6c","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn8n003j24uus14ewtkw"},{"post_id":"cizoyjn5v001j24uu8kbsds6c","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn8r003m24uu2oz1yuk2"},{"post_id":"cizoyjn62001m24uu8cuvc9cq","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn8v003o24uu3v5qw2eg"},{"post_id":"cizoyjn62001m24uu8cuvc9cq","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjn8z003s24uucudllll1"},{"post_id":"cizoyjn6e001q24uujl7my2ba","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn94003u24uuwwqryuik"},{"post_id":"cizoyjn6e001q24uujl7my2ba","category_id":"cizoyjn6q001y24uu851z4kvf","_id":"cizoyjn98003y24uu0ya9x22p"},{"post_id":"cizoyjn6v002424uuarxu3s60","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9b004024uu9m3mu0mz"},{"post_id":"cizoyjn6v002424uuarxu3s60","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjn9e004324uuz4840nt3"},{"post_id":"cizoyjn6y002824uualwv1lef","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9k004624uuf48996tc"},{"post_id":"cizoyjn6y002824uualwv1lef","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjn9o004924uug1wpyox4"},{"post_id":"cizoyjn6j001t24uu46hnh3dl","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9r004c24uudfnsj5bg"},{"post_id":"cizoyjn6j001t24uu46hnh3dl","category_id":"cizoyjn6x002624uuc0wzs6xv","_id":"cizoyjn9t004f24uuyzpp9q6i"},{"post_id":"cizoyjn6o001x24uujtbdo1di","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9v004i24uuhfklvtca"},{"post_id":"cizoyjn6o001x24uujtbdo1di","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjn9w004k24uukh8ejv1f"},{"post_id":"cizoyjn7b002h24uul6j6beg9","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9y004o24uugieac2oi"},{"post_id":"cizoyjn7b002h24uul6j6beg9","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjn9y004p24uu6aysljas"},{"post_id":"cizoyjn7h002m24uubkzsc5gj","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjn9z004r24uudnscuilm"},{"post_id":"cizoyjn7h002m24uubkzsc5gj","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna0004t24uuap23uzok"},{"post_id":"cizoyjn6s002124uuu5g3q408","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna1004v24uuu996qfq8"},{"post_id":"cizoyjn6s002124uuu5g3q408","category_id":"cizoyjn7e002k24uudfgftq97","_id":"cizoyjna1004x24uuzbogoqjf"},{"post_id":"cizoyjn7j002o24uu4hm1fmc9","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna2004z24uuci171kjz"},{"post_id":"cizoyjn7j002o24uu4hm1fmc9","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna2005024uunh3r3cbh"},{"post_id":"cizoyjn7n002r24uukszu8uhi","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna2005124uuzghyhhya"},{"post_id":"cizoyjn7n002r24uukszu8uhi","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna3005424uuxi64dy7e"},{"post_id":"cizoyjn73002a24uuza6mygt2","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna4005624uughxameic"},{"post_id":"cizoyjn73002a24uuza6mygt2","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna4005824uu5pz0fdpp"},{"post_id":"cizoyjn7q002v24uu3nbj0sef","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna5005a24uuh2hnog5f"},{"post_id":"cizoyjn7q002v24uu3nbj0sef","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna5005c24uu9znpo0ut"},{"post_id":"cizoyjn7w002y24uumrdq6fmp","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna6005e24uu1yvu420v"},{"post_id":"cizoyjn7w002y24uumrdq6fmp","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjna7005g24uupqon187y"},{"post_id":"cizoyjn80003224uuk20xsgdl","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjna8005h24uuctem0jlr"},{"post_id":"cizoyjn80003224uuk20xsgdl","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjna9005j24uu17w4p5pc"},{"post_id":"cizoyjn77002f24uudxqodzyj","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnaa005l24uuasygzonq"},{"post_id":"cizoyjn77002f24uudxqodzyj","category_id":"cizoyjn7x002z24uulv0pu7qk","_id":"cizoyjnab005o24uuw5xi7o7k"},{"post_id":"cizoyjn83003524uuu9cy4vyx","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnac005q24uu93w7p1ed"},{"post_id":"cizoyjn83003524uuu9cy4vyx","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjnad005s24uuv709hags"},{"post_id":"cizoyjn8c003b24uu5hm8ccpd","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnad005t24uusdzeulud"},{"post_id":"cizoyjn8c003b24uu5hm8ccpd","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjnae005u24uuuptvfyym"},{"post_id":"cizoyjn8f003f24uuaq54znqp","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnaf005x24uu8g9v6bc9"},{"post_id":"cizoyjn8f003f24uuaq54znqp","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnag005z24uur51urdzi"},{"post_id":"cizoyjn87003824uuok49zyns","category_id":"cizoyjn8f003e24uu5pgl9yuo","_id":"cizoyjnak006224uu8h1cuhc6"},{"post_id":"cizoyjn8i003i24uu3kgb2hrp","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnal006324uu8zok20js"},{"post_id":"cizoyjn8i003i24uu3kgb2hrp","category_id":"cizoyjn76002d24uuc8hu41nh","_id":"cizoyjnam006624uub7s5dpz8"},{"post_id":"cizoyjn8q003l24uuz5wc9qmq","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnam006724uu7gv4b159"},{"post_id":"cizoyjn8q003l24uuz5wc9qmq","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnan006a24uuhos2w1ms"},{"post_id":"cizoyjn8t003n24uudl8umvek","category_id":"cizoyjn8f003e24uu5pgl9yuo","_id":"cizoyjnao006b24uuat2qvjub"},{"post_id":"cizoyjn8y003r24uuphf6euyo","category_id":"cizoyjn8f003e24uu5pgl9yuo","_id":"cizoyjnao006d24uun7poi3k0"},{"post_id":"cizoyjn97003x24uuw68jim9w","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnao006e24uuf8f3njzk"},{"post_id":"cizoyjn97003x24uuw68jim9w","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnap006g24uuaifnmls8"},{"post_id":"cizoyjn99003z24uu7lid3tyb","category_id":"cizoyjn8f003e24uu5pgl9yuo","_id":"cizoyjnaq006i24uuex638x4t"},{"post_id":"cizoyjn9d004224uu8qicgz4n","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnar006l24uuu6y3h2i3"},{"post_id":"cizoyjn9d004224uu8qicgz4n","category_id":"cizoyjn6q001y24uu851z4kvf","_id":"cizoyjnar006m24uu6mtzpeyo"},{"post_id":"cizoyjn9h004524uunpi88cs7","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnas006o24uunfhopkid"},{"post_id":"cizoyjn9h004524uunpi88cs7","category_id":"cizoyjn2a000424uuvmwlm4dl","_id":"cizoyjnas006q24uuxni8mwey"},{"post_id":"cizoyjn9l004824uu607qwong","category_id":"cizoyjn8f003e24uu5pgl9yuo","_id":"cizoyjnat006s24uumlmk9tax"},{"post_id":"cizoyjn9p004b24uujvq62pew","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnau006v24uu7ei6hm6j"},{"post_id":"cizoyjn9p004b24uujvq62pew","category_id":"cizoyjn4e000h24uuznaqa187","_id":"cizoyjnau006w24uur0o2poma"},{"post_id":"cizoyjn9s004e24uu8b9ue4rs","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnav006z24uu3qud0533"},{"post_id":"cizoyjn9s004e24uu8b9ue4rs","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnav007024uuqejkq3s1"},{"post_id":"cizoyjn9u004h24uu8fv6aa04","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnaw007224uukodrr7sx"},{"post_id":"cizoyjn9u004h24uu8fv6aa04","category_id":"cizoyjn9x004n24uu0p9ymvcu","_id":"cizoyjnax007424uuojuo4kek"},{"post_id":"cizoyjnbm007o24uugf1hgbbc","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnbt007s24uu6nd90ed7"},{"post_id":"cizoyjnbm007o24uugf1hgbbc","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnbu007t24uus9dimabk"},{"post_id":"cizoyjnbo007p24uuslr4yoff","category_id":"cizoyjn22000124uuq1q9u4oe","_id":"cizoyjnbv007u24uuy1tms7qa"},{"post_id":"cizoyjnbo007p24uuslr4yoff","category_id":"cizoyjn5a001224uurgjmj6nd","_id":"cizoyjnbv007v24uu1hxjgg3m"}],"PostTag":[{"post_id":"cizoyjn1o000024uuqrgdervy","tag_id":"cizoyjn27000224uu18zn4acd","_id":"cizoyjn2c000524uufq6kqlzj"},{"post_id":"cizoyjn1o000024uuqrgdervy","tag_id":"cizoyjn29000324uu0ivvhrg9","_id":"cizoyjn2d000624uuk9lfby27"},{"post_id":"cizoyjn3q000924uu65wm97i2","tag_id":"cizoyjn43000d24uunr6zk34u","_id":"cizoyjn4l000n24uu1cnutkpv"},{"post_id":"cizoyjn3v000b24uugjmpd9g7","tag_id":"cizoyjn4k000m24uuhsvp4qs6","_id":"cizoyjn57001024uuhe1pe3hz"},{"post_id":"cizoyjn3v000b24uugjmpd9g7","tag_id":"cizoyjn4u000r24uuzardu2a9","_id":"cizoyjn5b001424uurbkfat2c"},{"post_id":"cizoyjn55000y24uu2edjfvxw","tag_id":"cizoyjn27000224uu18zn4acd","_id":"cizoyjn5e001824uurcbyzx81"},{"post_id":"cizoyjn43000e24uuchuc7sgv","tag_id":"cizoyjn53000x24uuz76k1ai8","_id":"cizoyjn60001l24uupioo06ch"},{"post_id":"cizoyjn43000e24uuchuc7sgv","tag_id":"cizoyjn5c001524uuu922zs7q","_id":"cizoyjn65001o24uu15csc1n5"},{"post_id":"cizoyjn43000e24uuchuc7sgv","tag_id":"cizoyjn5m001d24uu0he0vsq2","_id":"cizoyjn6g001s24uu2vvsfd78"},{"post_id":"cizoyjn4c000g24uuynosnbx2","tag_id":"cizoyjn5u001i24uuyajn6imj","_id":"cizoyjn6m001v24uu3sft5snr"},{"post_id":"cizoyjn4h000k24uu09uy5n7w","tag_id":"cizoyjn6d001p24uur2714odg","_id":"cizoyjn6r002024uuyizjkycs"},{"post_id":"cizoyjn4l000o24uu955s9800","tag_id":"cizoyjn5u001i24uuyajn6imj","_id":"cizoyjn6y002724uuv9rv0maj"},{"post_id":"cizoyjn4s000q24uu7xrqkp6v","tag_id":"cizoyjn6v002324uuevh7katn","_id":"cizoyjn77002e24uubm3cj6da"},{"post_id":"cizoyjn4v000s24uute1fhfin","tag_id":"cizoyjn5u001i24uuyajn6imj","_id":"cizoyjn7e002l24uudmuwvp9h"},{"post_id":"cizoyjn4z000v24uumb44twzv","tag_id":"cizoyjn7d002j24uuh5yy8lu8","_id":"cizoyjn7p002u24uu5lwlwylu"},{"post_id":"cizoyjn58001124uufme44pe9","tag_id":"cizoyjn5u001i24uuyajn6imj","_id":"cizoyjn7z003124uuytyv43oj"},{"post_id":"cizoyjn5c001624uuu2s6z156","tag_id":"cizoyjn7v002x24uuq9o733yp","_id":"cizoyjn85003724uumrgkeyka"},{"post_id":"cizoyjn5f001924uuf177dfne","tag_id":"cizoyjn7d002j24uuh5yy8lu8","_id":"cizoyjn8e003d24uun106cpg8"},{"post_id":"cizoyjn5o001e24uud71csxj1","tag_id":"cizoyjn8b003a24uuksy5ear1","_id":"cizoyjn8p003k24uue5mgzm4l"},{"post_id":"cizoyjn5r001g24uuoeeqhcun","tag_id":"cizoyjn8i003h24uu2s0yp00s","_id":"cizoyjn8x003q24uugg25ugvm"},{"post_id":"cizoyjn5v001j24uu8kbsds6c","tag_id":"cizoyjn7d002j24uuh5yy8lu8","_id":"cizoyjn96003w24uue8ndwqbo"},{"post_id":"cizoyjn62001m24uu8cuvc9cq","tag_id":"cizoyjn95003v24uu23era7ez","_id":"cizoyjn9e004424uu8dtitp4a"},{"post_id":"cizoyjn6e001q24uujl7my2ba","tag_id":"cizoyjn9c004124uus9yl3k67","_id":"cizoyjn9p004a24uu2kqka7xa"},{"post_id":"cizoyjn6j001t24uu46hnh3dl","tag_id":"cizoyjn9k004724uu97158id8","_id":"cizoyjn9t004g24uuqulqgu3u"},{"post_id":"cizoyjn9s004e24uu8b9ue4rs","tag_id":"cizoyjn8i003h24uu2s0yp00s","_id":"cizoyjn9w004j24uu0vyutwdr"},{"post_id":"cizoyjn6o001x24uujtbdo1di","tag_id":"cizoyjn9r004d24uutimo872h","_id":"cizoyjn9x004m24uuceoe4uqx"},{"post_id":"cizoyjn6s002124uuu5g3q408","tag_id":"cizoyjn9w004l24uussbsbu9m","_id":"cizoyjn9z004s24uumdpja6tm"},{"post_id":"cizoyjn6v002424uuarxu3s60","tag_id":"cizoyjn9z004q24uuywomyire","_id":"cizoyjna1004w24uugn2oafva"},{"post_id":"cizoyjn6y002824uualwv1lef","tag_id":"cizoyjna0004u24uuarsp9e71","_id":"cizoyjna3005324uupd5rvbid"},{"post_id":"cizoyjn6y002824uualwv1lef","tag_id":"cizoyjna1004y24uuaincu1gp","_id":"cizoyjna3005524uutqit8fq9"},{"post_id":"cizoyjn73002a24uuza6mygt2","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjna4005924uuagvf039m"},{"post_id":"cizoyjn77002f24uudxqodzyj","tag_id":"cizoyjna4005724uu6hzrccyi","_id":"cizoyjna6005d24uuq0x2cp5k"},{"post_id":"cizoyjn7b002h24uul6j6beg9","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnaa005k24uu1mxs1d28"},{"post_id":"cizoyjn7b002h24uul6j6beg9","tag_id":"cizoyjna6005f24uugyvnd2pr","_id":"cizoyjnaa005m24uu5z4tzfio"},{"post_id":"cizoyjn7h002m24uubkzsc5gj","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnab005p24uusgibzp0k"},{"post_id":"cizoyjn7j002o24uu4hm1fmc9","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnae005w24uupx29vk0b"},{"post_id":"cizoyjn7j002o24uu4hm1fmc9","tag_id":"cizoyjnac005r24uu4p3wphjr","_id":"cizoyjnaf005y24uuspw0dweo"},{"post_id":"cizoyjn7n002r24uukszu8uhi","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnai006124uu7h3lnxq8"},{"post_id":"cizoyjn7q002v24uu3nbj0sef","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnam006524uubcky8ael"},{"post_id":"cizoyjn7w002y24uumrdq6fmp","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnan006924uuao63kexv"},{"post_id":"cizoyjn80003224uuk20xsgdl","tag_id":"cizoyjnam006824uuxoynli0m","_id":"cizoyjnaq006h24uudl7vzp1d"},{"post_id":"cizoyjn80003224uuk20xsgdl","tag_id":"cizoyjnao006c24uux27rdcf8","_id":"cizoyjnaq006j24uupzznky96"},{"post_id":"cizoyjn83003524uuu9cy4vyx","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnas006p24uu9z32r1gt"},{"post_id":"cizoyjn83003524uuu9cy4vyx","tag_id":"cizoyjnaq006k24uuea8j00sa","_id":"cizoyjnas006r24uuahxan2x6"},{"post_id":"cizoyjn87003824uuok49zyns","tag_id":"cizoyjnar006n24uuua41oq2a","_id":"cizoyjnat006u24uuzkbi3h5g"},{"post_id":"cizoyjn8c003b24uu5hm8ccpd","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnav006y24uu44l0yg5m"},{"post_id":"cizoyjn8f003f24uuaq54znqp","tag_id":"cizoyjnau006x24uuj12y1e6q","_id":"cizoyjnaw007324uu1xloca1z"},{"post_id":"cizoyjn8i003i24uu3kgb2hrp","tag_id":"cizoyjna2005224uu38rrf29c","_id":"cizoyjnax007624uupciv49bf"},{"post_id":"cizoyjn8q003l24uuz5wc9qmq","tag_id":"cizoyjnax007524uu85qslva8","_id":"cizoyjnay007824uudh4cwpuk"},{"post_id":"cizoyjn8t003n24uudl8umvek","tag_id":"cizoyjnay007724uuw4xo53yq","_id":"cizoyjnaz007a24uuh2as6yd9"},{"post_id":"cizoyjn8y003r24uuphf6euyo","tag_id":"cizoyjnay007924uua9g4ysmi","_id":"cizoyjnb0007c24uuo1fdty24"},{"post_id":"cizoyjn97003x24uuw68jim9w","tag_id":"cizoyjnam006824uuxoynli0m","_id":"cizoyjnb2007f24uucmkw3o51"},{"post_id":"cizoyjn97003x24uuw68jim9w","tag_id":"cizoyjnb0007d24uu4paxhvne","_id":"cizoyjnb2007g24uuf64smp94"},{"post_id":"cizoyjn99003z24uu7lid3tyb","tag_id":"cizoyjnay007724uuw4xo53yq","_id":"cizoyjnb3007i24uutge54mp9"},{"post_id":"cizoyjn9d004224uu8qicgz4n","tag_id":"cizoyjnb2007h24uuk3n3hppc","_id":"cizoyjnb4007k24uu7wzmxc0a"},{"post_id":"cizoyjn9h004524uunpi88cs7","tag_id":"cizoyjnb4007j24uu6e5wu26a","_id":"cizoyjnb5007m24uusvjw914z"},{"post_id":"cizoyjn9l004824uu607qwong","tag_id":"cizoyjnb4007l24uudepzu2sa","_id":"cizoyjnb6007n24uuehda85dr"},{"post_id":"cizoyjnbm007o24uugf1hgbbc","tag_id":"cizoyjna1004y24uuaincu1gp","_id":"cizoyjnbs007q24uuafai52dh"},{"post_id":"cizoyjnbo007p24uuslr4yoff","tag_id":"cizoyjn7d002j24uuh5yy8lu8","_id":"cizoyjnbt007r24uu761v0yyj"}],"Tag":[{"name":"CSS3","_id":"cizoyjn27000224uu18zn4acd"},{"name":"clip-path","_id":"cizoyjn29000324uu0ivvhrg9"},{"name":"position","_id":"cizoyjn43000d24uunr6zk34u"},{"name":"datum","_id":"cizoyjn4k000m24uuhsvp4qs6"},{"name":"data","_id":"cizoyjn4u000r24uuzardu2a9"},{"name":"Update","_id":"cizoyjn53000x24uuz76k1ai8"},{"name":"Enter","_id":"cizoyjn5c001524uuu922zs7q"},{"name":"Exit","_id":"cizoyjn5m001d24uu0he0vsq2"},{"name":"D3.js","_id":"cizoyjn5u001i24uuyajn6imj"},{"name":"D3","_id":"cizoyjn6d001p24uur2714odg"},{"name":"地图","_id":"cizoyjn6v002324uuevh7katn"},{"name":"循环遍历","_id":"cizoyjn7d002j24uuh5yy8lu8"},{"name":"内存管理","_id":"cizoyjn7v002x24uuq9o733yp"},{"name":"键盘事件","_id":"cizoyjn8b003a24uuksy5ear1"},{"name":"JS刷新","_id":"cizoyjn8i003h24uu2s0yp00s"},{"name":"比例尺","_id":"cizoyjn95003v24uu23era7ez"},{"name":"ES6","_id":"cizoyjn9c004124uus9yl3k67"},{"name":"Webpack","_id":"cizoyjn9k004724uu97158id8"},{"name":"react-router","_id":"cizoyjn9r004d24uutimo872h"},{"name":"github","_id":"cizoyjn9w004l24uussbsbu9m"},{"name":"单位","_id":"cizoyjn9z004q24uuywomyire"},{"name":"作用域","_id":"cizoyjna0004u24uuarsp9e71"},{"name":"闭包","_id":"cizoyjna1004y24uuaincu1gp"},{"name":"react","_id":"cizoyjna2005224uu38rrf29c"},{"name":"npm","_id":"cizoyjna4005724uu6hzrccyi"},{"name":"JSX","_id":"cizoyjna6005f24uugyvnd2pr"},{"name":"props","_id":"cizoyjnac005r24uu4p3wphjr"},{"name":"JavaScript","_id":"cizoyjnam006824uuxoynli0m"},{"name":"原型链","_id":"cizoyjnao006c24uux27rdcf8"},{"name":"生命周期","_id":"cizoyjnaq006k24uuea8j00sa"},{"name":"人在囧途","_id":"cizoyjnar006n24uuua41oq2a"},{"name":"跨域","_id":"cizoyjnau006x24uuj12y1e6q"},{"name":"值传递","_id":"cizoyjnax007524uu85qslva8"},{"name":"旅途","_id":"cizoyjnay007724uuw4xo53yq"},{"name":"年总结","_id":"cizoyjnay007924uua9g4ysmi"},{"name":"JS兼容性","_id":"cizoyjnb0007d24uu4paxhvne"},{"name":"解构赋值","_id":"cizoyjnb2007h24uuk3n3hppc"},{"name":"CSS","_id":"cizoyjnb4007j24uu6e5wu26a"},{"name":"面试","_id":"cizoyjnb4007l24uudepzu2sa"}]}}