
title: D3.js地图绘制
date: 2016-12-26 21:29:38
categories: 
  - 技术
  - D3.js
tags: D3
---

使用D3.js供绘制一个重庆地图；地图添加立体效果；地图上标注点；添加提示框；地图钻取。

<!--more--> 

#### css代码
```css
#mapWrap{
  position: relative;
  width: 900px;

}
.tooltip{
  position: absolute;
  color: #fff;
  background: #040931;
  border: 1px solid #fff;
  padding: 10px;
  border-radius: 5px;
  display: none;
}
.back{
  position: absolute;
  right: 10px;
  color: #fff;
  color: #fff;
  padding: 10px;
  display: none;
}

```
##### html代码

```html
<div id="mapWrap">
  <div class="tooltip"></div>
  <div class="back"></div>
</div>
<script src="js/lib/sea.js"></script>
<script>
seajs.use(['./js/map2'], function(map){
  map.init()
})
</script>
```

```javascript
define(function(require) {

  require('./lib/d3')
  require('./lib/util')

  var data = [
    {
    "name": "丰都县",
    "geoCoord": [107.74845, 30.182199999999998]
    },{
    "name": "云阳县",
    "geoCoord": [108.83034075456257, 31.009656231968137]
    },{
    "name": "酉阳县",
    "geoCoord": [108.81187677218037, 28.867136105860993]
    },{
    "name": "万州区",
    "geoCoord": [108.38606641491705, 30.701455057077226]
    }
  ]  
  //配置项
  var width = 0
  var height = 0
  var classname = ''
  var container = ''
  var cfg = {}

  var _self = ''
  var mapData = []
  var tooltip = d3.select('.tooltip')
  var mapPath = 'data/map/chongqing.json'

  var map = {

    drawMap: function(){
      mapData = data
      _self = this
      width = 900
      height = 600
      classname = 'mapWrap'
      container = '#mapWrap',

      cfg = {
        padding: {
          top: 40,
          bottom: 40
        },
        mapStyle: {
          fill: '#001e5a',
          stroke: '#2fb9f8',
          strokeWidth: 1,
          transform: "perspective(1200px) rotateX(60deg) scale(1.2, 1.4) translateZ(0px)",
          transformOrigin: "50% 50% 0px"
        },
        hoverable: {
          fill: '#04184b'
        },
        filter: {
          fill: '#023ac0'
        }
      }

      _self.mapJson(mapPath, mapData)    
    }, 

    mapJson: function(mapPath, mapData){

    var _self = this

    d3.select('.'+classname+'').remove()
    var mapSvg = d3.select(container)
    .append("svg")
    .attr('class', classname)
    .attr("width", width)
    .attr("height", height)
    .style('padding-top', cfg.padding.top)
    .style('padding-bottom', cfg.padding.bottom)
    //.style('transform', cfg.mapStyle.transform)
    //.style('transform-origin', cfg.mapStyle.transformOrigin)

    d3.json(mapPath, function(error, root){

      //控制地图缩放的大小
      var features = root.features
      var scale = Util.getZoomScale(features, width, height),
      center = Util.getCenters(features);

      var projection = d3.geo.mercator()
      .scale(scale * 50)
      .center(center)
      .translate([width / 2, (height/2 )])

      var path = d3.geo.path().projection(projection);

      var wholeMap = mapSvg.append('g')
      .classed('mainG', true)

      // _self.getCenters(features)
      //绘制地图
      var mainMap = wholeMap.selectAll(".mainMap")
        .data(features)
        .enter().append("path")
        .attr("fill",cfg.mapStyle.fill)
        .attr("stroke",cfg.mapStyle.stroke)  
        .attr("stroke-width",cfg.mapStyle.strokeWidth)
        .attr("d", path )
        .on('mouseover', function(d){
        var posi = path.centroid(d)
        d3.select(this)
        .attr("fill", cfg.hoverable.fill)  
        .style('cursor', 'pointer')
        tooltip
        .style('left', ''+(posi[0]-60)+'px')
        .style('top', ''+(posi[1]-60)+'px')
        .style('display', 'block')  
        .html(d.properties.MC)
        })
        .on("mouseout", function(d){
        d3.select(this)
        .attr("fill", cfg.mapStyle.fill)  
        tooltip.style('display', 'none')
        })
        .on("click",function(d){
        tooltip.style('display', 'none')
        var id = d.properties.ZZJGDM
        mapPath = 'data/map/fenju/' + id + '.json'
        mapData = []
        console.log(mapPath)
        _self.mapJson(mapPath, mapData)
        d3.select('.back').style('display', 'block')

    })

    //标注点
    _self.markPoint(projection, mapData, ".mapWrap")

    //添加滤镜效果（投影）
    _self.filter(mapSvg,features,path)
    })
    },

    /**
    * 地图打点
    *
    * @param {function} projection 计算点位置的一个算法
    * @param {Object} lacationData 点的经纬度数据
    */
    markPoint: function(projection,lacationData,pId){
      //标注点
      var markPoint = d3.select(pId)
      .insert('g', '.mapWrap')
      .attr('class', 'markPoint')
      .attr('width', width)
      .attr('height', height)
      //添加点
      markPoint.selectAll('.circle')
      .data(lacationData)
      .enter()
      .append('circle')
      .attr('fill', '#efe')
      .attr('r', 10)
      .attr("cx", function(d){
      var coor = projection(d.geoCoord)
      return coor[0]
      })
      .attr("cy",function(d){
      var coor = projection(d.geoCoord)
      return coor[1]
      })
    },

    /**
    * 给地图添加滤镜效果
    *
    * @param {Object} mapSvg 存放地图的svg容器
    * @param {Object} features 地图各区域块的数据
    * @param {function} path 取得或设置地理投影,D3的一个方法函数
    */
    filter: function(mapSvg,features,path){
      var filter = mapSvg.append("defs").append("filter")
      .attr("id", "gaussinaBlur")
      .attr('x', 0)
      .attr('y', 0)
      .attr('width', '200%')
      .attr('height', '200%')

      filter.append("feGaussianBlur")
      .attr("result", "blurOut")
      .attr("in", "offOut")
      .attr("stdDeviation", "8")

      //底部添加一个地图并加阴影效果
      mapSvg.insert('g', '.mainG')
      .classed("filterG2", true)
      .selectAll("path")
      .data(features)  
      .enter().append("path")
      .attr("d", path)
      .attr("transform","translate(0,24)")
      .attr("filter","url(#gaussinaBlur)")
      .attr("fill", cfg.filter.fill)  
      .attr("opacity",0.4)

      var filterG = mapSvg.insert('g', '.mainG')
      .classed("filterG", true)
      .selectAll("path")
      .data(features)  
      .enter().append("path")
      .attr("d", path)
      .attr("transform","translate(0,12)")
      .attr("fill","#0232af")
      .attr("stroke","#011a53")  
      .attr("stroke-width",2)  		

    },

    //获取地图中心点
    getCenters: function(features) {
      var longitudeMin = 100000;
      var latitudeMin = 100000;
      var longitudeMax = 0;
      var latitudeMax = 0;
      features.forEach(function(e) {
      var a = d3.geo.bounds(e);
      if (a[0][0] < longitudeMin) {
      longitudeMin = a[0][0];
      }
      if (a[0][1] < latitudeMin) {
      latitudeMin = a[0][1];
      }
      if (a[1][0] > longitudeMax) {
      longitudeMax = a[1][0];
      }
      if (a[1][1] > latitudeMax) {
      latitudeMax = a[1][1];
      }
      });
      var a = (longitudeMax + longitudeMin) / 2;
      var b = (latitudeMax + latitudeMin) / 2;
      return [a, b];
    },
    bindEvent: function(){
      var _self = this
      d3.select('.back').on('click', function(e){
      d3.select('.back').style('display', 'none')
      mapPath = 'data/map/chongqing.json'
      var dataUrl = 'data/data.json'
      _self.mapJson(mapPath, mapData)
      })
    },

    init: function(){
      this.drawMap()
      this.bindEvent()
    }

  }
  return map

})

```
